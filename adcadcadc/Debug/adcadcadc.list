
adcadcadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007040  08007040  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007048  08007048  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08007050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  200002d4  08007324  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08007324  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b117  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003584  00000000  00000000  0003b41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e8  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  0003fb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282ac  00000000  00000000  00040bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001280c  00000000  00000000  00068e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9963  00000000  00000000  0007b680  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  00165060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006dd0 	.word	0x08006dd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002d8 	.word	0x200002d8
 80001ec:	08006dd0 	.word	0x08006dd0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005b2:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005b4:	4a4d      	ldr	r2, [pc, #308]	; (80006ec <MX_ADC1_Init+0x14c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c6:	4b48      	ldr	r3, [pc, #288]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005cc:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005e2:	4a43      	ldr	r2, [pc, #268]	; (80006f0 <MX_ADC1_Init+0x150>)
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b40      	ldr	r3, [pc, #256]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80005ec:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005ee:	2207      	movs	r2, #7
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f2:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <MX_ADC1_Init+0x148>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	4839      	ldr	r0, [pc, #228]	; (80006e8 <MX_ADC1_Init+0x148>)
 8000602:	f001 ff41 	bl	8002488 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f001 fbb6 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4831      	ldr	r0, [pc, #196]	; (80006e8 <MX_ADC1_Init+0x148>)
 8000622:	f002 f885 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f001 fba6 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000630:	2303      	movs	r3, #3
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000638:	2301      	movs	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	4829      	ldr	r0, [pc, #164]	; (80006e8 <MX_ADC1_Init+0x148>)
 8000642:	f002 f875 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800064c:	f001 fb96 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000650:	2308      	movs	r3, #8
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000654:	2303      	movs	r3, #3
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <MX_ADC1_Init+0x148>)
 8000662:	f002 f865 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800066c:	f001 fb86 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000670:	2309      	movs	r3, #9
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	481a      	ldr	r0, [pc, #104]	; (80006e8 <MX_ADC1_Init+0x148>)
 800067e:	f002 f857 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000688:	f001 fb78 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800068c:	230a      	movs	r3, #10
 800068e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000690:	2305      	movs	r3, #5
 8000692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <MX_ADC1_Init+0x148>)
 800069a:	f002 f849 	bl	8002730 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80006a4:	f001 fb6a 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006a8:	230c      	movs	r3, #12
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80006ac:	2306      	movs	r3, #6
 80006ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_ADC1_Init+0x148>)
 80006b6:	f002 f83b 	bl	8002730 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80006c0:	f001 fb5c 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_ADC1_Init+0x148>)
 80006d2:	f002 f82d 	bl	8002730 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 80006dc:	f001 fb4e 	bl	8001d7c <Error_Handler>
  }

}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000364 	.word	0x20000364
 80006ec:	40012000 	.word	0x40012000
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <MX_ADC3_Init+0x128>)
 8000708:	4a45      	ldr	r2, [pc, #276]	; (8000820 <MX_ADC3_Init+0x12c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b43      	ldr	r3, [pc, #268]	; (800081c <MX_ADC3_Init+0x128>)
 800070e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b41      	ldr	r3, [pc, #260]	; (800081c <MX_ADC3_Init+0x128>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <MX_ADC3_Init+0x128>)
 800071c:	2202      	movs	r2, #2
 800071e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000720:	4b3e      	ldr	r3, [pc, #248]	; (800081c <MX_ADC3_Init+0x128>)
 8000722:	2202      	movs	r2, #2
 8000724:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b3d      	ldr	r3, [pc, #244]	; (800081c <MX_ADC3_Init+0x128>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <MX_ADC3_Init+0x128>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b39      	ldr	r3, [pc, #228]	; (800081c <MX_ADC3_Init+0x128>)
 8000736:	4a3b      	ldr	r2, [pc, #236]	; (8000824 <MX_ADC3_Init+0x130>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b38      	ldr	r3, [pc, #224]	; (800081c <MX_ADC3_Init+0x128>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000740:	4b36      	ldr	r3, [pc, #216]	; (800081c <MX_ADC3_Init+0x128>)
 8000742:	2206      	movs	r2, #6
 8000744:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_ADC3_Init+0x128>)
 8000748:	2202      	movs	r2, #2
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b33      	ldr	r3, [pc, #204]	; (800081c <MX_ADC3_Init+0x128>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000754:	4831      	ldr	r0, [pc, #196]	; (800081c <MX_ADC3_Init+0x128>)
 8000756:	f001 fe97 	bl	8002488 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000760:	f001 fb0c 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000764:	2304      	movs	r3, #4
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800076c:	2301      	movs	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <MX_ADC3_Init+0x128>)
 8000776:	f001 ffdb 	bl	8002730 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000780:	f001 fafc 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000784:	2305      	movs	r3, #5
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4821      	ldr	r0, [pc, #132]	; (800081c <MX_ADC3_Init+0x128>)
 8000796:	f001 ffcb 	bl	8002730 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80007a0:	f001 faec 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007a4:	2306      	movs	r3, #6
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007a8:	2303      	movs	r3, #3
 80007aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	481a      	ldr	r0, [pc, #104]	; (800081c <MX_ADC3_Init+0x128>)
 80007b2:	f001 ffbd 	bl	8002730 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80007bc:	f001 fade 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007c0:	2307      	movs	r3, #7
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_ADC3_Init+0x128>)
 80007ce:	f001 ffaf 	bl	8002730 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 80007d8:	f001 fad0 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007dc:	230e      	movs	r3, #14
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007e0:	2305      	movs	r3, #5
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_ADC3_Init+0x128>)
 80007ea:	f001 ffa1 	bl	8002730 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 80007f4:	f001 fac2 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007f8:	230f      	movs	r3, #15
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80007fc:	2306      	movs	r3, #6
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_ADC3_Init+0x128>)
 8000806:	f001 ff93 	bl	8002730 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 8000810:	f001 fab4 	bl	8001d7c <Error_Handler>
  }

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200003ac 	.word	0x200003ac
 8000820:	40012200 	.word	0x40012200
 8000824:	0f000001 	.word	0x0f000001

08000828 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a79      	ldr	r2, [pc, #484]	; (8000a2c <HAL_ADC_MspInit+0x204>)
 8000846:	4293      	cmp	r3, r2
 8000848:	f040 808d 	bne.w	8000966 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4a76      	ldr	r2, [pc, #472]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6453      	str	r3, [r2, #68]	; 0x44
 800085c:	4b74      	ldr	r3, [pc, #464]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	4b70      	ldr	r3, [pc, #448]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a6f      	ldr	r2, [pc, #444]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
 8000878:	4b6d      	ldr	r3, [pc, #436]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	4b69      	ldr	r3, [pc, #420]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a68      	ldr	r2, [pc, #416]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b66      	ldr	r3, [pc, #408]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a61      	ldr	r2, [pc, #388]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = Current4_Pin|Voltage0_Pin|Voltage1_Pin;
 80008bc:	230d      	movs	r3, #13
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4859      	ldr	r0, [pc, #356]	; (8000a34 <HAL_ADC_MspInit+0x20c>)
 80008d0:	f003 fb5c 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current0_Pin|Currnet1_Pin;
 80008d4:	2309      	movs	r3, #9
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_ADC_MspInit+0x210>)
 80008e8:	f003 fb50 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current2_Pin|Current3_Pin;
 80008ec:	2303      	movs	r3, #3
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f0:	2303      	movs	r3, #3
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	484f      	ldr	r0, [pc, #316]	; (8000a3c <HAL_ADC_MspInit+0x214>)
 8000900:	f003 fb44 	bl	8003f8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000906:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <HAL_ADC_MspInit+0x21c>)
 8000908:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800090a:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000910:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000916:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800091c:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 800091e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000922:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800092c:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 800092e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000932:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000934:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000948:	483d      	ldr	r0, [pc, #244]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 800094a:	f002 fb21 	bl	8002f90 <HAL_DMA_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000954:	f001 fa12 	bl	8001d7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a39      	ldr	r2, [pc, #228]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
 800095e:	4a38      	ldr	r2, [pc, #224]	; (8000a40 <HAL_ADC_MspInit+0x218>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000964:	e05e      	b.n	8000a24 <HAL_ADC_MspInit+0x1fc>
  else if(adcHandle->Instance==ADC3)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <HAL_ADC_MspInit+0x220>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d159      	bne.n	8000a24 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	4a2d      	ldr	r2, [pc, #180]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097e:	6453      	str	r3, [r2, #68]	; 0x44
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a26      	ldr	r2, [pc, #152]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 8000996:	f043 0320 	orr.w	r3, r3, #32
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <HAL_ADC_MspInit+0x208>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0320 	and.w	r3, r3, #32
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Input_Pin|Temp_Pin|Forward0_Pin|Forward1_Pin 
 80009a8:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4823      	ldr	r0, [pc, #140]	; (8000a4c <HAL_ADC_MspInit+0x224>)
 80009be:	f003 fae5 	bl	8003f8c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009c4:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <HAL_ADC_MspInit+0x22c>)
 80009c6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009ce:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 8000a0a:	f002 fac1 	bl	8002f90 <HAL_DMA_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8000a14:	f001 f9b2 	bl	8001d7c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <HAL_ADC_MspInit+0x228>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	; 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	200003f4 	.word	0x200003f4
 8000a44:	40026470 	.word	0x40026470
 8000a48:	40012200 	.word	0x40012200
 8000a4c:	40021400 	.word	0x40021400
 8000a50:	20000304 	.word	0x20000304
 8000a54:	40026410 	.word	0x40026410

08000a58 <comandexecute>:
 *
 * not for ?
 * */

void comandexecute(uint8_t* rxdata, uint8_t* rxvaldata)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < CLIST; i++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e01a      	b.n	8000a9e <comandexecute+0x46>
	{
		if(strcmpi(rxdata, commandlist[i]) == 0)
 8000a68:	4ab7      	ldr	r2, [pc, #732]	; (8000d48 <comandexecute+0x2f0>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	4619      	mov	r1, r3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f005 fce4 	bl	8006440 <strcasecmp>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d109      	bne.n	8000a92 <comandexecute+0x3a>
		{
			indexforcommandswitch = i;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4bb2      	ldr	r3, [pc, #712]	; (8000d4c <comandexecute+0x2f4>)
 8000a84:	801a      	strh	r2, [r3, #0]
			matchforcommandswitch = 1;
 8000a86:	4bb2      	ldr	r3, [pc, #712]	; (8000d50 <comandexecute+0x2f8>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	801a      	strh	r2, [r3, #0]
			i = CLIST;
 8000a8c:	2319      	movs	r3, #25
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e002      	b.n	8000a98 <comandexecute+0x40>
		}
		else
		{
			matchforcommandswitch = 0;
 8000a92:	4baf      	ldr	r3, [pc, #700]	; (8000d50 <comandexecute+0x2f8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < CLIST; i++)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b18      	cmp	r3, #24
 8000aa2:	dde1      	ble.n	8000a68 <comandexecute+0x10>
		}
	}
	/* switch for command */
	if(matchforcommandswitch == 1)
 8000aa4:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <comandexecute+0x2f8>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	f040 81d8 	bne.w	8000e5e <comandexecute+0x406>
	{
		matchforcommandswitch = 0;
 8000aae:	4ba8      	ldr	r3, [pc, #672]	; (8000d50 <comandexecute+0x2f8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	801a      	strh	r2, [r3, #0]
		switch(indexforcommandswitch)
 8000ab4:	4ba5      	ldr	r3, [pc, #660]	; (8000d4c <comandexecute+0x2f4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b18      	cmp	r3, #24
 8000aba:	f200 81d8 	bhi.w	8000e6e <comandexecute+0x416>
 8000abe:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <comandexecute+0x6c>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000b29 	.word	0x08000b29
 8000ac8:	08000b39 	.word	0x08000b39
 8000acc:	08000b49 	.word	0x08000b49
 8000ad0:	08000ba1 	.word	0x08000ba1
 8000ad4:	08000bb1 	.word	0x08000bb1
 8000ad8:	08000c09 	.word	0x08000c09
 8000adc:	08000c61 	.word	0x08000c61
 8000ae0:	08000cb9 	.word	0x08000cb9
 8000ae4:	08000cc9 	.word	0x08000cc9
 8000ae8:	08000cd9 	.word	0x08000cd9
 8000aec:	08000ce9 	.word	0x08000ce9
 8000af0:	08000cf9 	.word	0x08000cf9
 8000af4:	08000d09 	.word	0x08000d09
 8000af8:	08000d19 	.word	0x08000d19
 8000afc:	08000d29 	.word	0x08000d29
 8000b00:	08000d39 	.word	0x08000d39
 8000b04:	08000d65 	.word	0x08000d65
 8000b08:	08000dcd 	.word	0x08000dcd
 8000b0c:	08000ddd 	.word	0x08000ddd
 8000b10:	08000ded 	.word	0x08000ded
 8000b14:	08000dfd 	.word	0x08000dfd
 8000b18:	08000e0d 	.word	0x08000e0d
 8000b1c:	08000e1d 	.word	0x08000e1d
 8000b20:	08000d75 	.word	0x08000d75
 8000b24:	08000e2d 	.word	0x08000e2d
		{
			case TEMPALARM:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2c:	2219      	movs	r2, #25
 8000b2e:	4989      	ldr	r1, [pc, #548]	; (8000d54 <comandexecute+0x2fc>)
 8000b30:	4889      	ldr	r0, [pc, #548]	; (8000d58 <comandexecute+0x300>)
 8000b32:	f004 fd44 	bl	80055be <HAL_UART_Transmit>
				break;
 8000b36:	e19a      	b.n	8000e6e <comandexecute+0x416>
			}
			case INTERLOCK:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b3c:	2219      	movs	r2, #25
 8000b3e:	4985      	ldr	r1, [pc, #532]	; (8000d54 <comandexecute+0x2fc>)
 8000b40:	4885      	ldr	r0, [pc, #532]	; (8000d58 <comandexecute+0x300>)
 8000b42:	f004 fd3c 	bl	80055be <HAL_UART_Transmit>
				break;
 8000b46:	e192      	b.n	8000e6e <comandexecute+0x416>
			}
			case ENABLE:
			{
				if(variable[FAULT] == 1)
 8000b48:	4b84      	ldr	r3, [pc, #528]	; (8000d5c <comandexecute+0x304>)
 8000b4a:	88db      	ldrh	r3, [r3, #6]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d107      	bne.n	8000b60 <comandexecute+0x108>
				{
					HAL_UART_Transmit(&huart1, commanddeniedbfault, sizeof(commanddeniedbfault), 0xFFFF);
 8000b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b54:	2222      	movs	r2, #34	; 0x22
 8000b56:	4982      	ldr	r1, [pc, #520]	; (8000d60 <comandexecute+0x308>)
 8000b58:	487f      	ldr	r0, [pc, #508]	; (8000d58 <comandexecute+0x300>)
 8000b5a:	f004 fd30 	bl	80055be <HAL_UART_Transmit>
					else
					{
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
					}
				}
				break;
 8000b5e:	e186      	b.n	8000e6e <comandexecute+0x416>
					if((atoi(rxvaldata) == 1) || (atoi(rxvaldata) == 0))
 8000b60:	6838      	ldr	r0, [r7, #0]
 8000b62:	f005 fc17 	bl	8006394 <atoi>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d005      	beq.n	8000b78 <comandexecute+0x120>
 8000b6c:	6838      	ldr	r0, [r7, #0]
 8000b6e:	f005 fc11 	bl	8006394 <atoi>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10b      	bne.n	8000b90 <comandexecute+0x138>
						variable[indexforcommandswitch] = atoi(rxvaldata);
 8000b78:	6838      	ldr	r0, [r7, #0]
 8000b7a:	f005 fc0b 	bl	8006394 <atoi>
 8000b7e:	4601      	mov	r1, r0
 8000b80:	4b72      	ldr	r3, [pc, #456]	; (8000d4c <comandexecute+0x2f4>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	b289      	uxth	r1, r1
 8000b88:	4b74      	ldr	r3, [pc, #464]	; (8000d5c <comandexecute+0x304>)
 8000b8a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000b8e:	e16e      	b.n	8000e6e <comandexecute+0x416>
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b94:	2219      	movs	r2, #25
 8000b96:	496f      	ldr	r1, [pc, #444]	; (8000d54 <comandexecute+0x2fc>)
 8000b98:	486f      	ldr	r0, [pc, #444]	; (8000d58 <comandexecute+0x300>)
 8000b9a:	f004 fd10 	bl	80055be <HAL_UART_Transmit>
				break;
 8000b9e:	e166      	b.n	8000e6e <comandexecute+0x416>
			}
			case FAULT:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba4:	2219      	movs	r2, #25
 8000ba6:	496b      	ldr	r1, [pc, #428]	; (8000d54 <comandexecute+0x2fc>)
 8000ba8:	486b      	ldr	r0, [pc, #428]	; (8000d58 <comandexecute+0x300>)
 8000baa:	f004 fd08 	bl	80055be <HAL_UART_Transmit>
				break;
 8000bae:	e15e      	b.n	8000e6e <comandexecute+0x416>
			}
			case BANDA:
			{
				if(variable[FAULT] == 1)
 8000bb0:	4b6a      	ldr	r3, [pc, #424]	; (8000d5c <comandexecute+0x304>)
 8000bb2:	88db      	ldrh	r3, [r3, #6]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d107      	bne.n	8000bc8 <comandexecute+0x170>
				{
					HAL_UART_Transmit(&huart1, commanddeniedbfault, sizeof(commanddeniedbfault), 0xFFFF);
 8000bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bbc:	2222      	movs	r2, #34	; 0x22
 8000bbe:	4968      	ldr	r1, [pc, #416]	; (8000d60 <comandexecute+0x308>)
 8000bc0:	4865      	ldr	r0, [pc, #404]	; (8000d58 <comandexecute+0x300>)
 8000bc2:	f004 fcfc 	bl	80055be <HAL_UART_Transmit>
					else
					{
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
					}
				}
				break;
 8000bc6:	e152      	b.n	8000e6e <comandexecute+0x416>
					if((atoi(rxvaldata) == 1) || (atoi(rxvaldata) == 0))
 8000bc8:	6838      	ldr	r0, [r7, #0]
 8000bca:	f005 fbe3 	bl	8006394 <atoi>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d005      	beq.n	8000be0 <comandexecute+0x188>
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	f005 fbdd 	bl	8006394 <atoi>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10b      	bne.n	8000bf8 <comandexecute+0x1a0>
						variable[indexforcommandswitch] = atoi(rxvaldata);
 8000be0:	6838      	ldr	r0, [r7, #0]
 8000be2:	f005 fbd7 	bl	8006394 <atoi>
 8000be6:	4601      	mov	r1, r0
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <comandexecute+0x2f4>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	b289      	uxth	r1, r1
 8000bf0:	4b5a      	ldr	r3, [pc, #360]	; (8000d5c <comandexecute+0x304>)
 8000bf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000bf6:	e13a      	b.n	8000e6e <comandexecute+0x416>
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfc:	2219      	movs	r2, #25
 8000bfe:	4955      	ldr	r1, [pc, #340]	; (8000d54 <comandexecute+0x2fc>)
 8000c00:	4855      	ldr	r0, [pc, #340]	; (8000d58 <comandexecute+0x300>)
 8000c02:	f004 fcdc 	bl	80055be <HAL_UART_Transmit>
				break;
 8000c06:	e132      	b.n	8000e6e <comandexecute+0x416>
			}
			case BANDB:
			{
				if(variable[FAULT] == 1)
 8000c08:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <comandexecute+0x304>)
 8000c0a:	88db      	ldrh	r3, [r3, #6]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d107      	bne.n	8000c20 <comandexecute+0x1c8>
				{
					HAL_UART_Transmit(&huart1, commanddeniedbfault, sizeof(commanddeniedbfault), 0xFFFF);
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	2222      	movs	r2, #34	; 0x22
 8000c16:	4952      	ldr	r1, [pc, #328]	; (8000d60 <comandexecute+0x308>)
 8000c18:	484f      	ldr	r0, [pc, #316]	; (8000d58 <comandexecute+0x300>)
 8000c1a:	f004 fcd0 	bl	80055be <HAL_UART_Transmit>
					else
					{
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
					}
				}
				break;
 8000c1e:	e126      	b.n	8000e6e <comandexecute+0x416>
					if((atoi(rxvaldata) == 1) || (atoi(rxvaldata) == 0))
 8000c20:	6838      	ldr	r0, [r7, #0]
 8000c22:	f005 fbb7 	bl	8006394 <atoi>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <comandexecute+0x1e0>
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	f005 fbb1 	bl	8006394 <atoi>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10b      	bne.n	8000c50 <comandexecute+0x1f8>
						variable[indexforcommandswitch] = atoi(rxvaldata);
 8000c38:	6838      	ldr	r0, [r7, #0]
 8000c3a:	f005 fbab 	bl	8006394 <atoi>
 8000c3e:	4601      	mov	r1, r0
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <comandexecute+0x2f4>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	b289      	uxth	r1, r1
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <comandexecute+0x304>)
 8000c4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000c4e:	e10e      	b.n	8000e6e <comandexecute+0x416>
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c54:	2219      	movs	r2, #25
 8000c56:	493f      	ldr	r1, [pc, #252]	; (8000d54 <comandexecute+0x2fc>)
 8000c58:	483f      	ldr	r0, [pc, #252]	; (8000d58 <comandexecute+0x300>)
 8000c5a:	f004 fcb0 	bl	80055be <HAL_UART_Transmit>
				break;
 8000c5e:	e106      	b.n	8000e6e <comandexecute+0x416>
			}
			case BYPASS:
			{
				if(variable[FAULT] == 1)
 8000c60:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <comandexecute+0x304>)
 8000c62:	88db      	ldrh	r3, [r3, #6]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d107      	bne.n	8000c78 <comandexecute+0x220>
				{
					HAL_UART_Transmit(&huart1, commanddeniedbfault, sizeof(commanddeniedbfault), 0xFFFF);
 8000c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6c:	2222      	movs	r2, #34	; 0x22
 8000c6e:	493c      	ldr	r1, [pc, #240]	; (8000d60 <comandexecute+0x308>)
 8000c70:	4839      	ldr	r0, [pc, #228]	; (8000d58 <comandexecute+0x300>)
 8000c72:	f004 fca4 	bl	80055be <HAL_UART_Transmit>
					else
					{
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
					}
				}
				break;
 8000c76:	e0fa      	b.n	8000e6e <comandexecute+0x416>
					if((atoi(rxvaldata) == 1) || (atoi(rxvaldata) == 0))
 8000c78:	6838      	ldr	r0, [r7, #0]
 8000c7a:	f005 fb8b 	bl	8006394 <atoi>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d005      	beq.n	8000c90 <comandexecute+0x238>
 8000c84:	6838      	ldr	r0, [r7, #0]
 8000c86:	f005 fb85 	bl	8006394 <atoi>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <comandexecute+0x250>
						variable[indexforcommandswitch] = atoi(rxvaldata);
 8000c90:	6838      	ldr	r0, [r7, #0]
 8000c92:	f005 fb7f 	bl	8006394 <atoi>
 8000c96:	4601      	mov	r1, r0
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <comandexecute+0x2f4>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <comandexecute+0x304>)
 8000ca2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000ca6:	e0e2      	b.n	8000e6e <comandexecute+0x416>
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cac:	2219      	movs	r2, #25
 8000cae:	4929      	ldr	r1, [pc, #164]	; (8000d54 <comandexecute+0x2fc>)
 8000cb0:	4829      	ldr	r0, [pc, #164]	; (8000d58 <comandexecute+0x300>)
 8000cb2:	f004 fc84 	bl	80055be <HAL_UART_Transmit>
				break;
 8000cb6:	e0da      	b.n	8000e6e <comandexecute+0x416>
			}
			case CURRENT0:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cbc:	2219      	movs	r2, #25
 8000cbe:	4925      	ldr	r1, [pc, #148]	; (8000d54 <comandexecute+0x2fc>)
 8000cc0:	4825      	ldr	r0, [pc, #148]	; (8000d58 <comandexecute+0x300>)
 8000cc2:	f004 fc7c 	bl	80055be <HAL_UART_Transmit>
				break;
 8000cc6:	e0d2      	b.n	8000e6e <comandexecute+0x416>
			}
			case CURRENT1:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ccc:	2219      	movs	r2, #25
 8000cce:	4921      	ldr	r1, [pc, #132]	; (8000d54 <comandexecute+0x2fc>)
 8000cd0:	4821      	ldr	r0, [pc, #132]	; (8000d58 <comandexecute+0x300>)
 8000cd2:	f004 fc74 	bl	80055be <HAL_UART_Transmit>
				break;
 8000cd6:	e0ca      	b.n	8000e6e <comandexecute+0x416>
			}
			case CURRENT2:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cdc:	2219      	movs	r2, #25
 8000cde:	491d      	ldr	r1, [pc, #116]	; (8000d54 <comandexecute+0x2fc>)
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <comandexecute+0x300>)
 8000ce2:	f004 fc6c 	bl	80055be <HAL_UART_Transmit>
				break;
 8000ce6:	e0c2      	b.n	8000e6e <comandexecute+0x416>
			}
			case CURRENT3:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cec:	2219      	movs	r2, #25
 8000cee:	4919      	ldr	r1, [pc, #100]	; (8000d54 <comandexecute+0x2fc>)
 8000cf0:	4819      	ldr	r0, [pc, #100]	; (8000d58 <comandexecute+0x300>)
 8000cf2:	f004 fc64 	bl	80055be <HAL_UART_Transmit>
				break;
 8000cf6:	e0ba      	b.n	8000e6e <comandexecute+0x416>
			}
			case CURRENT4:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfc:	2219      	movs	r2, #25
 8000cfe:	4915      	ldr	r1, [pc, #84]	; (8000d54 <comandexecute+0x2fc>)
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <comandexecute+0x300>)
 8000d02:	f004 fc5c 	bl	80055be <HAL_UART_Transmit>
				break;
 8000d06:	e0b2      	b.n	8000e6e <comandexecute+0x416>
			}
			case TEMP0:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d0c:	2219      	movs	r2, #25
 8000d0e:	4911      	ldr	r1, [pc, #68]	; (8000d54 <comandexecute+0x2fc>)
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <comandexecute+0x300>)
 8000d12:	f004 fc54 	bl	80055be <HAL_UART_Transmit>
				break;
 8000d16:	e0aa      	b.n	8000e6e <comandexecute+0x416>
			}
			case TEMP1:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d1c:	2219      	movs	r2, #25
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <comandexecute+0x2fc>)
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <comandexecute+0x300>)
 8000d22:	f004 fc4c 	bl	80055be <HAL_UART_Transmit>
				break;
 8000d26:	e0a2      	b.n	8000e6e <comandexecute+0x416>
			}
			case TEMP2:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2c:	2219      	movs	r2, #25
 8000d2e:	4909      	ldr	r1, [pc, #36]	; (8000d54 <comandexecute+0x2fc>)
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <comandexecute+0x300>)
 8000d32:	f004 fc44 	bl	80055be <HAL_UART_Transmit>
				break;
 8000d36:	e09a      	b.n	8000e6e <comandexecute+0x416>
			}
			case VOLTAGE0:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3c:	2219      	movs	r2, #25
 8000d3e:	4905      	ldr	r1, [pc, #20]	; (8000d54 <comandexecute+0x2fc>)
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <comandexecute+0x300>)
 8000d42:	f004 fc3c 	bl	80055be <HAL_UART_Transmit>
				break;
 8000d46:	e092      	b.n	8000e6e <comandexecute+0x416>
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	200002f0 	.word	0x200002f0
 8000d50:	200002f2 	.word	0x200002f2
 8000d54:	20000088 	.word	0x20000088
 8000d58:	20000684 	.word	0x20000684
 8000d5c:	2000051c 	.word	0x2000051c
 8000d60:	20000064 	.word	0x20000064
			}
			case VOLTAGE1:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d68:	2219      	movs	r2, #25
 8000d6a:	4943      	ldr	r1, [pc, #268]	; (8000e78 <comandexecute+0x420>)
 8000d6c:	4843      	ldr	r0, [pc, #268]	; (8000e7c <comandexecute+0x424>)
 8000d6e:	f004 fc26 	bl	80055be <HAL_UART_Transmit>
				break;
 8000d72:	e07c      	b.n	8000e6e <comandexecute+0x416>
			}
			case ATTEN:
			{
				if(variable[FAULT] == 1)
 8000d74:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <comandexecute+0x428>)
 8000d76:	88db      	ldrh	r3, [r3, #6]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d107      	bne.n	8000d8c <comandexecute+0x334>
				{
					HAL_UART_Transmit(&huart1, commanddeniedbfault, sizeof(commanddeniedbfault), 0xFFFF);
 8000d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d80:	2222      	movs	r2, #34	; 0x22
 8000d82:	4940      	ldr	r1, [pc, #256]	; (8000e84 <comandexecute+0x42c>)
 8000d84:	483d      	ldr	r0, [pc, #244]	; (8000e7c <comandexecute+0x424>)
 8000d86:	f004 fc1a 	bl	80055be <HAL_UART_Transmit>
					else
					{
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
					}
				}
				break;
 8000d8a:	e070      	b.n	8000e6e <comandexecute+0x416>
					if((atoi(rxvaldata) >= 0) && (atoi(rxvaldata) <= 30))
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f005 fb01 	bl	8006394 <atoi>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db11      	blt.n	8000dbc <comandexecute+0x364>
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f005 fafb 	bl	8006394 <atoi>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b1e      	cmp	r3, #30
 8000da2:	dc0b      	bgt.n	8000dbc <comandexecute+0x364>
						variable[indexforcommandswitch] = atoi(rxvaldata);
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f005 faf5 	bl	8006394 <atoi>
 8000daa:	4601      	mov	r1, r0
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <comandexecute+0x430>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	b289      	uxth	r1, r1
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <comandexecute+0x428>)
 8000db6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000dba:	e058      	b.n	8000e6e <comandexecute+0x416>
						HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc0:	2219      	movs	r2, #25
 8000dc2:	492d      	ldr	r1, [pc, #180]	; (8000e78 <comandexecute+0x420>)
 8000dc4:	482d      	ldr	r0, [pc, #180]	; (8000e7c <comandexecute+0x424>)
 8000dc6:	f004 fbfa 	bl	80055be <HAL_UART_Transmit>
				break;
 8000dca:	e050      	b.n	8000e6e <comandexecute+0x416>
			}
			case FORWARD0:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd0:	2219      	movs	r2, #25
 8000dd2:	4929      	ldr	r1, [pc, #164]	; (8000e78 <comandexecute+0x420>)
 8000dd4:	4829      	ldr	r0, [pc, #164]	; (8000e7c <comandexecute+0x424>)
 8000dd6:	f004 fbf2 	bl	80055be <HAL_UART_Transmit>
				break;
 8000dda:	e048      	b.n	8000e6e <comandexecute+0x416>
			}
			case FORWARD1:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de0:	2219      	movs	r2, #25
 8000de2:	4925      	ldr	r1, [pc, #148]	; (8000e78 <comandexecute+0x420>)
 8000de4:	4825      	ldr	r0, [pc, #148]	; (8000e7c <comandexecute+0x424>)
 8000de6:	f004 fbea 	bl	80055be <HAL_UART_Transmit>
				break;
 8000dea:	e040      	b.n	8000e6e <comandexecute+0x416>
			}
			case REFLECT0:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df0:	2219      	movs	r2, #25
 8000df2:	4921      	ldr	r1, [pc, #132]	; (8000e78 <comandexecute+0x420>)
 8000df4:	4821      	ldr	r0, [pc, #132]	; (8000e7c <comandexecute+0x424>)
 8000df6:	f004 fbe2 	bl	80055be <HAL_UART_Transmit>
				break;
 8000dfa:	e038      	b.n	8000e6e <comandexecute+0x416>
			}
			case REFLECT1:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e00:	2219      	movs	r2, #25
 8000e02:	491d      	ldr	r1, [pc, #116]	; (8000e78 <comandexecute+0x420>)
 8000e04:	481d      	ldr	r0, [pc, #116]	; (8000e7c <comandexecute+0x424>)
 8000e06:	f004 fbda 	bl	80055be <HAL_UART_Transmit>
				break;
 8000e0a:	e030      	b.n	8000e6e <comandexecute+0x416>
			}
			case INPUT0:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e10:	2219      	movs	r2, #25
 8000e12:	4919      	ldr	r1, [pc, #100]	; (8000e78 <comandexecute+0x420>)
 8000e14:	4819      	ldr	r0, [pc, #100]	; (8000e7c <comandexecute+0x424>)
 8000e16:	f004 fbd2 	bl	80055be <HAL_UART_Transmit>
				break;
 8000e1a:	e028      	b.n	8000e6e <comandexecute+0x416>
			}
			case INPUT1:
			{
				HAL_UART_Transmit(&huart1, checkagain, sizeof(checkagain), 0xFFFF);
 8000e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e20:	2219      	movs	r2, #25
 8000e22:	4915      	ldr	r1, [pc, #84]	; (8000e78 <comandexecute+0x420>)
 8000e24:	4815      	ldr	r0, [pc, #84]	; (8000e7c <comandexecute+0x424>)
 8000e26:	f004 fbca 	bl	80055be <HAL_UART_Transmit>
				break;
 8000e2a:	e020      	b.n	8000e6e <comandexecute+0x416>
			}
			case SETALC:
			{
				if(variable[FAULT] == 1)
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <comandexecute+0x428>)
 8000e2e:	88db      	ldrh	r3, [r3, #6]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d107      	bne.n	8000e44 <comandexecute+0x3ec>
				{
					HAL_UART_Transmit(&huart1, commanddeniedbfault, sizeof(commanddeniedbfault), 0xFFFF);
 8000e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e38:	2222      	movs	r2, #34	; 0x22
 8000e3a:	4912      	ldr	r1, [pc, #72]	; (8000e84 <comandexecute+0x42c>)
 8000e3c:	480f      	ldr	r0, [pc, #60]	; (8000e7c <comandexecute+0x424>)
 8000e3e:	f004 fbbe 	bl	80055be <HAL_UART_Transmit>
				}
				else
				{
					variable[indexforcommandswitch] = atoi(rxvaldata);
				}
				break;
 8000e42:	e014      	b.n	8000e6e <comandexecute+0x416>
					variable[indexforcommandswitch] = atoi(rxvaldata);
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f005 faa5 	bl	8006394 <atoi>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <comandexecute+0x430>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	b289      	uxth	r1, r1
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <comandexecute+0x428>)
 8000e56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8000e5a:	bf00      	nop
 8000e5c:	e007      	b.n	8000e6e <comandexecute+0x416>
			}
		}
	}
	else
	{
		HAL_UART_Transmit(&huart1, nomatch, sizeof(nomatch), 0xFFFF);
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	2209      	movs	r2, #9
 8000e64:	4909      	ldr	r1, [pc, #36]	; (8000e8c <comandexecute+0x434>)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <comandexecute+0x424>)
 8000e68:	f004 fba9 	bl	80055be <HAL_UART_Transmit>
	}
}
 8000e6c:	e7ff      	b.n	8000e6e <comandexecute+0x416>
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000088 	.word	0x20000088
 8000e7c:	20000684 	.word	0x20000684
 8000e80:	2000051c 	.word	0x2000051c
 8000e84:	20000064 	.word	0x20000064
 8000e88:	200002f0 	.word	0x200002f0
 8000e8c:	200000a4 	.word	0x200000a4

08000e90 <commandstate>:
/* command for check state, ex) ? command */
void commandstate(uint8_t* rxdata)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	uint8_t printbuffer[SJKIM_SIZE];
	for(int i = 0; i < CLIST; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e01a      	b.n	8000ed4 <commandstate+0x44>
	{
		if(strcmpi(rxdata, commandlist[i]) == 0)
 8000e9e:	4ab6      	ldr	r2, [pc, #728]	; (8001178 <commandstate+0x2e8>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f005 fac9 	bl	8006440 <strcasecmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d109      	bne.n	8000ec8 <commandstate+0x38>
		{
			indexforcommandswitch = i;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4bb0      	ldr	r3, [pc, #704]	; (800117c <commandstate+0x2ec>)
 8000eba:	801a      	strh	r2, [r3, #0]
			matchforcommandswitch = 1;
 8000ebc:	4bb0      	ldr	r3, [pc, #704]	; (8001180 <commandstate+0x2f0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	801a      	strh	r2, [r3, #0]
			i = CLIST;
 8000ec2:	2319      	movs	r3, #25
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e002      	b.n	8000ece <commandstate+0x3e>
		}
		else
		{
			matchforcommandswitch = 0;
 8000ec8:	4bad      	ldr	r3, [pc, #692]	; (8001180 <commandstate+0x2f0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < CLIST; i++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b18      	cmp	r3, #24
 8000ed8:	dde1      	ble.n	8000e9e <commandstate+0xe>
		}
	}
	if(matchforcommandswitch == 1)
 8000eda:	4ba9      	ldr	r3, [pc, #676]	; (8001180 <commandstate+0x2f0>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	f040 8296 	bne.w	8001410 <commandstate+0x580>
	{
		switch(indexforcommandswitch)
 8000ee4:	4ba5      	ldr	r3, [pc, #660]	; (800117c <commandstate+0x2ec>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	3b07      	subs	r3, #7
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f200 8274 	bhi.w	80013d8 <commandstate+0x548>
 8000ef0:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <commandstate+0x68>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f39 	.word	0x08000f39
 8000efc:	08000f81 	.word	0x08000f81
 8000f00:	08000fc9 	.word	0x08000fc9
 8000f04:	08001011 	.word	0x08001011
 8000f08:	08001059 	.word	0x08001059
 8000f0c:	080010a1 	.word	0x080010a1
 8000f10:	080010e9 	.word	0x080010e9
 8000f14:	08001131 	.word	0x08001131
 8000f18:	08001199 	.word	0x08001199
 8000f1c:	080011e1 	.word	0x080011e1
 8000f20:	08001229 	.word	0x08001229
 8000f24:	08001271 	.word	0x08001271
 8000f28:	080012b9 	.word	0x080012b9
 8000f2c:	08001301 	.word	0x08001301
 8000f30:	08001349 	.word	0x08001349
 8000f34:	08001391 	.word	0x08001391
		{
		case CURRENT0:
		{
			variable[indexforcommandswitch] = adc3[0];
 8000f38:	4b90      	ldr	r3, [pc, #576]	; (800117c <commandstate+0x2ec>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b91      	ldr	r3, [pc, #580]	; (8001184 <commandstate+0x2f4>)
 8000f40:	8819      	ldrh	r1, [r3, #0]
 8000f42:	4b91      	ldr	r3, [pc, #580]	; (8001188 <commandstate+0x2f8>)
 8000f44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8000f48:	4b8c      	ldr	r3, [pc, #560]	; (800117c <commandstate+0x2ec>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b8e      	ldr	r3, [pc, #568]	; (8001188 <commandstate+0x2f8>)
 8000f50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	498c      	ldr	r1, [pc, #560]	; (800118c <commandstate+0x2fc>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 fa4f 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f942 	bl	80001f0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f78:	4885      	ldr	r0, [pc, #532]	; (8001190 <commandstate+0x300>)
 8000f7a:	f004 fb20 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 8000f7e:	e248      	b.n	8001412 <commandstate+0x582>
		case CURRENT1:
		{
			variable[indexforcommandswitch] = adc3[1];
 8000f80:	4b7e      	ldr	r3, [pc, #504]	; (800117c <commandstate+0x2ec>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b7f      	ldr	r3, [pc, #508]	; (8001184 <commandstate+0x2f4>)
 8000f88:	8859      	ldrh	r1, [r3, #2]
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <commandstate+0x2f8>)
 8000f8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8000f90:	4b7a      	ldr	r3, [pc, #488]	; (800117c <commandstate+0x2ec>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <commandstate+0x2f8>)
 8000f98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	497a      	ldr	r1, [pc, #488]	; (800118c <commandstate+0x2fc>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fa2b 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f91e 	bl	80001f0 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f107 0108 	add.w	r1, r7, #8
 8000fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc0:	4873      	ldr	r0, [pc, #460]	; (8001190 <commandstate+0x300>)
 8000fc2:	f004 fafc 	bl	80055be <HAL_UART_Transmit>

		}
			break;
 8000fc6:	e224      	b.n	8001412 <commandstate+0x582>
		case CURRENT2:
		{
			variable[indexforcommandswitch] = adc3[2];
 8000fc8:	4b6c      	ldr	r3, [pc, #432]	; (800117c <commandstate+0x2ec>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <commandstate+0x2f4>)
 8000fd0:	8899      	ldrh	r1, [r3, #4]
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	; (8001188 <commandstate+0x2f8>)
 8000fd4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <commandstate+0x2ec>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <commandstate+0x2f8>)
 8000fe0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4968      	ldr	r1, [pc, #416]	; (800118c <commandstate+0x2fc>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 fa07 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f8fa 	bl	80001f0 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f107 0108 	add.w	r1, r7, #8
 8001004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001008:	4861      	ldr	r0, [pc, #388]	; (8001190 <commandstate+0x300>)
 800100a:	f004 fad8 	bl	80055be <HAL_UART_Transmit>

		}
			break;
 800100e:	e200      	b.n	8001412 <commandstate+0x582>
		case CURRENT3:
		{
			variable[indexforcommandswitch] = adc3[3];
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <commandstate+0x2ec>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <commandstate+0x2f4>)
 8001018:	88d9      	ldrh	r1, [r3, #6]
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <commandstate+0x2f8>)
 800101c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001020:	4b56      	ldr	r3, [pc, #344]	; (800117c <commandstate+0x2ec>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <commandstate+0x2f8>)
 8001028:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800102c:	461a      	mov	r2, r3
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4956      	ldr	r1, [pc, #344]	; (800118c <commandstate+0x2fc>)
 8001034:	4618      	mov	r0, r3
 8001036:	f005 f9e3 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8d6 	bl	80001f0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	f107 0108 	add.w	r1, r7, #8
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	484f      	ldr	r0, [pc, #316]	; (8001190 <commandstate+0x300>)
 8001052:	f004 fab4 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 8001056:	e1dc      	b.n	8001412 <commandstate+0x582>
		case CURRENT4:
		{
			variable[indexforcommandswitch] = adc3[4];
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <commandstate+0x2ec>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <commandstate+0x2f4>)
 8001060:	8919      	ldrh	r1, [r3, #8]
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <commandstate+0x2f8>)
 8001064:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <commandstate+0x2ec>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <commandstate+0x2f8>)
 8001070:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001074:	461a      	mov	r2, r3
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4944      	ldr	r1, [pc, #272]	; (800118c <commandstate+0x2fc>)
 800107c:	4618      	mov	r0, r3
 800107e:	f005 f9bf 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8b2 	bl	80001f0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f107 0108 	add.w	r1, r7, #8
 8001094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001098:	483d      	ldr	r0, [pc, #244]	; (8001190 <commandstate+0x300>)
 800109a:	f004 fa90 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 800109e:	e1b8      	b.n	8001412 <commandstate+0x582>
		case TEMP0:
		{
			variable[indexforcommandswitch] = adc3[5];
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <commandstate+0x2ec>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <commandstate+0x2f4>)
 80010a8:	8959      	ldrh	r1, [r3, #10]
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <commandstate+0x2f8>)
 80010ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <commandstate+0x2ec>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <commandstate+0x2f8>)
 80010b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010bc:	461a      	mov	r2, r3
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4932      	ldr	r1, [pc, #200]	; (800118c <commandstate+0x2fc>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 f99b 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f88e 	bl	80001f0 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f107 0108 	add.w	r1, r7, #8
 80010dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e0:	482b      	ldr	r0, [pc, #172]	; (8001190 <commandstate+0x300>)
 80010e2:	f004 fa6c 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 80010e6:	e194      	b.n	8001412 <commandstate+0x582>
		case TEMP1:
		{
			variable[indexforcommandswitch] = adc3[6];
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <commandstate+0x2ec>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <commandstate+0x2f4>)
 80010f0:	8999      	ldrh	r1, [r3, #12]
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <commandstate+0x2f8>)
 80010f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <commandstate+0x2ec>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <commandstate+0x2f8>)
 8001100:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001104:	461a      	mov	r2, r3
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4920      	ldr	r1, [pc, #128]	; (800118c <commandstate+0x2fc>)
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f977 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f86a 	bl	80001f0 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	f107 0108 	add.w	r1, r7, #8
 8001124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <commandstate+0x300>)
 800112a:	f004 fa48 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 800112e:	e170      	b.n	8001412 <commandstate+0x582>
		case TEMP2:
		{
			variable[indexforcommandswitch] = adc1[0];
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <commandstate+0x2ec>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <commandstate+0x304>)
 8001138:	8819      	ldrh	r1, [r3, #0]
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <commandstate+0x2f8>)
 800113c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <commandstate+0x2ec>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <commandstate+0x2f8>)
 8001148:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800114c:	461a      	mov	r2, r3
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <commandstate+0x2fc>)
 8001154:	4618      	mov	r0, r3
 8001156:	f005 f953 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f846 	bl	80001f0 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	f107 0108 	add.w	r1, r7, #8
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <commandstate+0x300>)
 8001172:	f004 fa24 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 8001176:	e14c      	b.n	8001412 <commandstate+0x582>
 8001178:	20000000 	.word	0x20000000
 800117c:	200002f0 	.word	0x200002f0
 8001180:	200002f2 	.word	0x200002f2
 8001184:	20000560 	.word	0x20000560
 8001188:	2000051c 	.word	0x2000051c
 800118c:	08006edc 	.word	0x08006edc
 8001190:	20000684 	.word	0x20000684
 8001194:	20000534 	.word	0x20000534
		case VOLTAGE0:
		{
			variable[indexforcommandswitch] = adc1[1];
 8001198:	4ba0      	ldr	r3, [pc, #640]	; (800141c <commandstate+0x58c>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4ba0      	ldr	r3, [pc, #640]	; (8001420 <commandstate+0x590>)
 80011a0:	8859      	ldrh	r1, [r3, #2]
 80011a2:	4ba0      	ldr	r3, [pc, #640]	; (8001424 <commandstate+0x594>)
 80011a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80011a8:	4b9c      	ldr	r3, [pc, #624]	; (800141c <commandstate+0x58c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b9d      	ldr	r3, [pc, #628]	; (8001424 <commandstate+0x594>)
 80011b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011b4:	461a      	mov	r2, r3
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	499b      	ldr	r1, [pc, #620]	; (8001428 <commandstate+0x598>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 f91f 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f812 	bl	80001f0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f107 0108 	add.w	r1, r7, #8
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	4894      	ldr	r0, [pc, #592]	; (800142c <commandstate+0x59c>)
 80011da:	f004 f9f0 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 80011de:	e118      	b.n	8001412 <commandstate+0x582>
		case VOLTAGE1:
		{
			variable[indexforcommandswitch] = adc1[2];
 80011e0:	4b8e      	ldr	r3, [pc, #568]	; (800141c <commandstate+0x58c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b8e      	ldr	r3, [pc, #568]	; (8001420 <commandstate+0x590>)
 80011e8:	8899      	ldrh	r1, [r3, #4]
 80011ea:	4b8e      	ldr	r3, [pc, #568]	; (8001424 <commandstate+0x594>)
 80011ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80011f0:	4b8a      	ldr	r3, [pc, #552]	; (800141c <commandstate+0x58c>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <commandstate+0x594>)
 80011f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011fc:	461a      	mov	r2, r3
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4989      	ldr	r1, [pc, #548]	; (8001428 <commandstate+0x598>)
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f8fb 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffee 	bl	80001f0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f107 0108 	add.w	r1, r7, #8
 800121c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001220:	4882      	ldr	r0, [pc, #520]	; (800142c <commandstate+0x59c>)
 8001222:	f004 f9cc 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 8001226:	e0f4      	b.n	8001412 <commandstate+0x582>
		case FORWARD0:
		{
			variable[indexforcommandswitch] = adc1[3];
 8001228:	4b7c      	ldr	r3, [pc, #496]	; (800141c <commandstate+0x58c>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b7c      	ldr	r3, [pc, #496]	; (8001420 <commandstate+0x590>)
 8001230:	88d9      	ldrh	r1, [r3, #6]
 8001232:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <commandstate+0x594>)
 8001234:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001238:	4b78      	ldr	r3, [pc, #480]	; (800141c <commandstate+0x58c>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b79      	ldr	r3, [pc, #484]	; (8001424 <commandstate+0x594>)
 8001240:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001244:	461a      	mov	r2, r3
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4977      	ldr	r1, [pc, #476]	; (8001428 <commandstate+0x598>)
 800124c:	4618      	mov	r0, r3
 800124e:	f005 f8d7 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ffca 	bl	80001f0 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f107 0108 	add.w	r1, r7, #8
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	4870      	ldr	r0, [pc, #448]	; (800142c <commandstate+0x59c>)
 800126a:	f004 f9a8 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 800126e:	e0d0      	b.n	8001412 <commandstate+0x582>
		case FORWARD1:
		{
			variable[indexforcommandswitch] = adc1[4];
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <commandstate+0x58c>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <commandstate+0x590>)
 8001278:	8919      	ldrh	r1, [r3, #8]
 800127a:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <commandstate+0x594>)
 800127c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001280:	4b66      	ldr	r3, [pc, #408]	; (800141c <commandstate+0x58c>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <commandstate+0x594>)
 8001288:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800128c:	461a      	mov	r2, r3
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4965      	ldr	r1, [pc, #404]	; (8001428 <commandstate+0x598>)
 8001294:	4618      	mov	r0, r3
 8001296:	f005 f8b3 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ffa6 	bl	80001f0 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b0:	485e      	ldr	r0, [pc, #376]	; (800142c <commandstate+0x59c>)
 80012b2:	f004 f984 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 80012b6:	e0ac      	b.n	8001412 <commandstate+0x582>
		case REFLECT0:
		{
			variable[indexforcommandswitch] = adc1[5];
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <commandstate+0x58c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <commandstate+0x590>)
 80012c0:	8959      	ldrh	r1, [r3, #10]
 80012c2:	4b58      	ldr	r3, [pc, #352]	; (8001424 <commandstate+0x594>)
 80012c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80012c8:	4b54      	ldr	r3, [pc, #336]	; (800141c <commandstate+0x58c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <commandstate+0x594>)
 80012d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012d4:	461a      	mov	r2, r3
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4953      	ldr	r1, [pc, #332]	; (8001428 <commandstate+0x598>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 f88f 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff82 	bl	80001f0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f107 0108 	add.w	r1, r7, #8
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	484c      	ldr	r0, [pc, #304]	; (800142c <commandstate+0x59c>)
 80012fa:	f004 f960 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 80012fe:	e088      	b.n	8001412 <commandstate+0x582>
		case REFLECT1:
		{
			variable[indexforcommandswitch] = adc1[6];
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <commandstate+0x58c>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <commandstate+0x590>)
 8001308:	8999      	ldrh	r1, [r3, #12]
 800130a:	4b46      	ldr	r3, [pc, #280]	; (8001424 <commandstate+0x594>)
 800130c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <commandstate+0x58c>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b43      	ldr	r3, [pc, #268]	; (8001424 <commandstate+0x594>)
 8001318:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800131c:	461a      	mov	r2, r3
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4941      	ldr	r1, [pc, #260]	; (8001428 <commandstate+0x598>)
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f86b 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff5e 	bl	80001f0 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	f107 0108 	add.w	r1, r7, #8
 800133c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <commandstate+0x59c>)
 8001342:	f004 f93c 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 8001346:	e064      	b.n	8001412 <commandstate+0x582>
		case INPUT0:
		{
			variable[indexforcommandswitch] = adc1[7];
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <commandstate+0x58c>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <commandstate+0x590>)
 8001350:	89d9      	ldrh	r1, [r3, #14]
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <commandstate+0x594>)
 8001354:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <commandstate+0x58c>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <commandstate+0x594>)
 8001360:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001364:	461a      	mov	r2, r3
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	492f      	ldr	r1, [pc, #188]	; (8001428 <commandstate+0x598>)
 800136c:	4618      	mov	r0, r3
 800136e:	f005 f847 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff3a 	bl	80001f0 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	f107 0108 	add.w	r1, r7, #8
 8001384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001388:	4828      	ldr	r0, [pc, #160]	; (800142c <commandstate+0x59c>)
 800138a:	f004 f918 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 800138e:	e040      	b.n	8001412 <commandstate+0x582>
		case INPUT1:
		{
			variable[indexforcommandswitch] = adc1[8];
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <commandstate+0x58c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <commandstate+0x590>)
 8001398:	8a19      	ldrh	r1, [r3, #16]
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <commandstate+0x594>)
 800139c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <commandstate+0x58c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <commandstate+0x594>)
 80013a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013ac:	461a      	mov	r2, r3
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	491d      	ldr	r1, [pc, #116]	; (8001428 <commandstate+0x598>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f823 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff16 	bl	80001f0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f107 0108 	add.w	r1, r7, #8
 80013cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d0:	4816      	ldr	r0, [pc, #88]	; (800142c <commandstate+0x59c>)
 80013d2:	f004 f8f4 	bl	80055be <HAL_UART_Transmit>
		}
			break;
 80013d6:	e01c      	b.n	8001412 <commandstate+0x582>
		default:
			sprintf(printbuffer, "%d", variable[indexforcommandswitch]);
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <commandstate+0x58c>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <commandstate+0x594>)
 80013e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <commandstate+0x598>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 f807 	bl	8006400 <siprintf>
			HAL_UART_Transmit(&huart1, printbuffer, strlen(printbuffer), 0xFFFF);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fefa 	bl	80001f0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f107 0108 	add.w	r1, r7, #8
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	4808      	ldr	r0, [pc, #32]	; (800142c <commandstate+0x59c>)
 800140a:	f004 f8d8 	bl	80055be <HAL_UART_Transmit>
			break;
 800140e:	e000      	b.n	8001412 <commandstate+0x582>
		}
	}
 8001410:	bf00      	nop
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200002f0 	.word	0x200002f0
 8001420:	20000534 	.word	0x20000534
 8001424:	2000051c 	.word	0x2000051c
 8001428:	08006edc 	.word	0x08006edc
 800142c:	20000684 	.word	0x20000684

08001430 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_DAC_Init+0x4c>)
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <MX_DAC_Init+0x50>)
 8001442:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_DAC_Init+0x4c>)
 8001446:	f001 fd34 	bl	8002eb2 <HAL_DAC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001450:	f000 fc94 	bl	8001d7c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_DAC_Init+0x4c>)
 8001464:	f001 fd47 	bl	8002ef6 <HAL_DAC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800146e:	f000 fc85 	bl	8001d7c <Error_Handler>
  }

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000454 	.word	0x20000454
 8001480:	40007400 	.word	0x40007400

08001484 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_DAC_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d127      	bne.n	80014f6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_DAC_MspInit+0x80>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_DAC_MspInit+0x80>)
 80014b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_DAC_MspInit+0x80>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_DAC_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_DAC_MspInit+0x80>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_DAC_MspInit+0x80>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014de:	2310      	movs	r3, #16
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e2:	2303      	movs	r3, #3
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_DAC_MspInit+0x84>)
 80014f2:	f002 fd4b 	bl	8003f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40007400 	.word	0x40007400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000

0800150c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_DMA_Init+0x4c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <MX_DMA_Init+0x4c>)
 800151c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <MX_DMA_Init+0x4c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2038      	movs	r0, #56	; 0x38
 8001534:	f001 fc87 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001538:	2038      	movs	r0, #56	; 0x38
 800153a:	f001 fca0 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	203c      	movs	r0, #60	; 0x3c
 8001544:	f001 fc7f 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001548:	203c      	movs	r0, #60	; 0x3c
 800154a:	f001 fc98 	bl	8002e7e <HAL_NVIC_EnableIRQ>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_ETH_Init+0x78>)
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <MX_ETH_Init+0x7c>)
 8001564:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_ETH_Init+0x78>)
 8001568:	2201      	movs	r2, #1
 800156a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_ETH_Init+0x78>)
 800156e:	2201      	movs	r2, #1
 8001570:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_ETH_Init+0x78>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_ETH_Init+0x78>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_ETH_Init+0x78>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	3302      	adds	r3, #2
 800158a:	22e1      	movs	r2, #225	; 0xe1
 800158c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_ETH_Init+0x78>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	3303      	adds	r3, #3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_ETH_Init+0x78>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	3304      	adds	r3, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_ETH_Init+0x78>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	3305      	adds	r3, #5
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_ETH_Init+0x78>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_ETH_Init+0x78>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_ETH_Init+0x78>)
 80015ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015be:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_ETH_Init+0x78>)
 80015c2:	f002 f875 	bl	80036b0 <HAL_ETH_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80015cc:	f000 fbd6 	bl	8001d7c <Error_Handler>
  }

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000468 	.word	0x20000468
 80015d8:	40028000 	.word	0x40028000

080015dc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_ETH_MspInit+0x138>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	f040 8085 	bne.w	800170a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a43      	ldr	r2, [pc, #268]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	623b      	str	r3, [r7, #32]
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162a:	6313      	str	r3, [r2, #48]	; 0x30
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a35      	ldr	r2, [pc, #212]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b33      	ldr	r3, [pc, #204]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a2e      	ldr	r2, [pc, #184]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_ETH_MspInit+0x13c>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016a8:	2332      	movs	r3, #50	; 0x32
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016b8:	230b      	movs	r3, #11
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	4816      	ldr	r0, [pc, #88]	; (800171c <HAL_ETH_MspInit+0x140>)
 80016c4:	f002 fc62 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80016c8:	2386      	movs	r3, #134	; 0x86
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016d8:	230b      	movs	r3, #11
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <HAL_ETH_MspInit+0x144>)
 80016e4:	f002 fc52 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80016e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016fa:	230b      	movs	r3, #11
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <HAL_ETH_MspInit+0x148>)
 8001706:	f002 fc41 	bl	8003f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800170a:	bf00      	nop
 800170c:	3738      	adds	r7, #56	; 0x38
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40028000 	.word	0x40028000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020800 	.word	0x40020800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400

08001728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <MX_GPIO_Init+0x118>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a3e      	ldr	r2, [pc, #248]	; (8001840 <MX_GPIO_Init+0x118>)
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <MX_GPIO_Init+0x118>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <MX_GPIO_Init+0x118>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a37      	ldr	r2, [pc, #220]	; (8001840 <MX_GPIO_Init+0x118>)
 8001764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <MX_GPIO_Init+0x118>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b31      	ldr	r3, [pc, #196]	; (8001840 <MX_GPIO_Init+0x118>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a30      	ldr	r2, [pc, #192]	; (8001840 <MX_GPIO_Init+0x118>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <MX_GPIO_Init+0x118>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <MX_GPIO_Init+0x118>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <MX_GPIO_Init+0x118>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_GPIO_Init+0x118>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <MX_GPIO_Init+0x118>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a22      	ldr	r2, [pc, #136]	; (8001840 <MX_GPIO_Init+0x118>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_GPIO_Init+0x118>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_GPIO_Init+0x118>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <MX_GPIO_Init+0x118>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_GPIO_Init+0x118>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tempalarm_Pin;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_GPIO_Init+0x11c>)
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Tempalarm_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4813      	ldr	r0, [pc, #76]	; (8001848 <MX_GPIO_Init+0x120>)
 80017fa:	f002 fbc7 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Interlock_Pin;
 80017fe:	2302      	movs	r3, #2
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_GPIO_Init+0x124>)
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Interlock_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_GPIO_Init+0x120>)
 8001812:	f002 fbbb 	bl	8003f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2006      	movs	r0, #6
 800181c:	f001 fb13 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001820:	2006      	movs	r0, #6
 8001822:	f001 fb2c 	bl	8002e7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2007      	movs	r0, #7
 800182c:	f001 fb0b 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001830:	2007      	movs	r0, #7
 8001832:	f001 fb24 	bl	8002e7e <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	10310000 	.word	0x10310000
 8001848:	40021000 	.word	0x40021000
 800184c:	10210000 	.word	0x10210000

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001854:	f000 fd84 	bl	8002360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001858:	f000 f844 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185c:	f7ff ff64 	bl	8001728 <MX_GPIO_Init>
  MX_DMA_Init();
 8001860:	f7ff fe54 	bl	800150c <MX_DMA_Init>
  MX_ADC1_Init();
 8001864:	f7fe fe9c 	bl	80005a0 <MX_ADC1_Init>
  MX_ETH_Init();
 8001868:	f7ff fe78 	bl	800155c <MX_ETH_Init>
  MX_TIM2_Init();
 800186c:	f000 fbda 	bl	8002024 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001870:	f000 fcd2 	bl	8002218 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8001874:	f7fe ff3e 	bl	80006f4 <MX_ADC3_Init>
  MX_DAC_Init();
 8001878:	f7ff fdda 	bl	8001430 <MX_DAC_Init>
  MX_SPI1_Init();
 800187c:	f000 fa86 	bl	8001d8c <MX_SPI1_Init>
  MX_TIM7_Init();
 8001880:	f000 fc1e 	bl	80020c0 <MX_TIM7_Init>
  MX_TIM13_Init();
 8001884:	f000 fc52 	bl	800212c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <main+0x70>)
 800188a:	f003 fa4a 	bl	8004d22 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <main+0x74>)
 8001890:	f003 fa47 	bl	8004d22 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc1, 7);
 8001894:	2207      	movs	r2, #7
 8001896:	490c      	ldr	r1, [pc, #48]	; (80018c8 <main+0x78>)
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <main+0x7c>)
 800189a:	f000 fe39 	bl	8002510 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, adc3, 6);
 800189e:	2206      	movs	r2, #6
 80018a0:	490b      	ldr	r1, [pc, #44]	; (80018d0 <main+0x80>)
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <main+0x84>)
 80018a4:	f000 fe34 	bl	8002510 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <main+0x88>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <main+0x8c>)
 80018b0:	4413      	add	r3, r2
 80018b2:	2201      	movs	r2, #1
 80018b4:	4619      	mov	r1, r3
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <main+0x90>)
 80018b8:	f003 ff1a 	bl	80056f0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <main+0x6c>
 80018be:	bf00      	nop
 80018c0:	20000604 	.word	0x20000604
 80018c4:	200005c4 	.word	0x200005c4
 80018c8:	20000534 	.word	0x20000534
 80018cc:	20000364 	.word	0x20000364
 80018d0:	20000560 	.word	0x20000560
 80018d4:	200003ac 	.word	0x200003ac
 80018d8:	200002f6 	.word	0x200002f6
 80018dc:	20000520 	.word	0x20000520
 80018e0:	20000684 	.word	0x20000684

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2230      	movs	r2, #48	; 0x30
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 fd7c 	bl	80063f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <SystemClock_Config+0xcc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <SystemClock_Config+0xcc>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <SystemClock_Config+0xcc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <SystemClock_Config+0xd0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <SystemClock_Config+0xd0>)
 800192e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <SystemClock_Config+0xd0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001948:	2310      	movs	r3, #16
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194c:	2302      	movs	r3, #2
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001950:	2300      	movs	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001954:	2308      	movs	r3, #8
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001958:	23a8      	movs	r3, #168	; 0xa8
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195c:	2302      	movs	r3, #2
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001960:	2304      	movs	r3, #4
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fce9 	bl	8004340 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001974:	f000 fa02 	bl	8001d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001984:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2105      	movs	r1, #5
 8001996:	4618      	mov	r0, r3
 8001998:	f002 ff42 	bl	8004820 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019a2:	f000 f9eb 	bl	8001d7c <Error_Handler>
  }
}
 80019a6:	bf00      	nop
 80019a8:	3750      	adds	r7, #80	; 0x50
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000

080019b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim13.Instance)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d15f      	bne.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0xd4>
	    {
			timer13++;
 80019cc:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019d6:	801a      	strh	r2, [r3, #0]
			int blankwhere = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
			uint16_t length = strlen((const char*)rxdata);
 80019dc:	482f      	ldr	r0, [pc, #188]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019de:	f7fe fc07 	bl	80001f0 <strlen>
 80019e2:	4603      	mov	r3, r0
 80019e4:	81fb      	strh	r3, [r7, #14]
			uint16_t blankexistpara = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	837b      	strh	r3, [r7, #26]
			/*
			 * search blank
			 * */
			for(int i = 0; i < length; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e00e      	b.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x56>
			{
				if(rxdata[i] == ' ')
 80019f0:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d105      	bne.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x50>
				{
					blankexistpara = 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	837b      	strh	r3, [r7, #26]
					blankwhere = i;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	61fb      	str	r3, [r7, #28]
					i = length;
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	617b      	str	r3, [r7, #20]
			for(int i = 0; i < length; i++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbec      	blt.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x38>
				}
			}
			/* check and transfer command */
			if(blankexistpara == 1)
 8001a16:	8b7b      	ldrh	r3, [r7, #26]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d123      	bne.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0xac>
			{
				blankexistpara = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	837b      	strh	r3, [r7, #26]
				rxdata[blankwhere] = '\0';
 8001a20:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
				for(int i = blankwhere; i < length; i++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e010      	b.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x9a>
				{
					rxvaldata[i - blankwhere] = rxdata[i + 1];
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	6939      	ldr	r1, [r7, #16]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	1acb      	subs	r3, r1, r3
 8001a3a:	4918      	ldr	r1, [pc, #96]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a3c:	5c89      	ldrb	r1, [r1, r2]
 8001a3e:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a40:	54d1      	strb	r1, [r2, r3]
					rxdata[i + 1] = '\0';
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	54d1      	strb	r1, [r2, r3]
				for(int i = blankwhere; i < length; i++)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dbea      	blt.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0x78>
				}
				comandexecute(rxdata, rxvaldata);
 8001a5a:	4911      	ldr	r1, [pc, #68]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a5c:	480f      	ldr	r0, [pc, #60]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a5e:	f7fe fffb 	bl	8000a58 <comandexecute>
 8001a62:	e00d      	b.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0xc8>
			}
			/* ? command transfer */
			else if(rxdata[length - 1] == '?')
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a6e:	d107      	bne.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0xc8>
			{
				rxdata[length - 1] = '\0';
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a76:	2100      	movs	r1, #0
 8001a78:	54d1      	strb	r1, [r2, r3]
				commandstate(rxdata);
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a7c:	f7ff fa08 	bl	8000e90 <commandstate>
			}
			modecommand = 0;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim13);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a88:	f003 f96f 	bl	8004d6a <HAL_TIM_Base_Stop_IT>
	    }
}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200005c4 	.word	0x200005c4
 8001a98:	200004b2 	.word	0x200004b2
 8001a9c:	20000520 	.word	0x20000520
 8001aa0:	20000544 	.word	0x20000544
 8001aa4:	200002f4 	.word	0x200002f4

08001aa8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
	exti++;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001abc:	801a      	strh	r2, [r3, #0]

	switch(GPIO_Pin)
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d002      	beq.n	8001aca <HAL_GPIO_EXTI_Callback+0x22>
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d010      	beq.n	8001aea <HAL_GPIO_EXTI_Callback+0x42>
			}
			break;
		}
		default:
		{
			break;
 8001ac8:	e01f      	b.n	8001b0a <HAL_GPIO_EXTI_Callback+0x62>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_Pin) == GPIO_PIN_SET)
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4812      	ldr	r0, [pc, #72]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ad0:	f002 fc06 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d103      	bne.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x3a>
				variable[TEMPALARM] = 1;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	801a      	strh	r2, [r3, #0]
			break;
 8001ae0:	e013      	b.n	8001b0a <HAL_GPIO_EXTI_Callback+0x62>
				variable[TEMPALARM] = 0;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
			break;
 8001ae8:	e00f      	b.n	8001b0a <HAL_GPIO_EXTI_Callback+0x62>
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_Pin))
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4619      	mov	r1, r3
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x70>)
 8001af0:	f002 fbf6 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_EXTI_Callback+0x5a>
				variable[INTERLOCK] = 1;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x74>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	805a      	strh	r2, [r3, #2]
			break;
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_EXTI_Callback+0x60>
				variable[INTERLOCK] = 0;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	805a      	strh	r2, [r3, #2]
			break;
 8001b08:	bf00      	nop
		}
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000051a 	.word	0x2000051a
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	2000051c 	.word	0x2000051c

08001b20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 8108 	bne.w	8001d46 <HAL_UART_RxCpltCallback+0x226>
	{
		switch(rxdata[front])
 8001b36:	4b87      	ldr	r3, [pc, #540]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b86      	ldr	r3, [pc, #536]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001b3e:	5c9b      	ldrb	r3, [r3, r2]
 8001b40:	2b3a      	cmp	r3, #58	; 0x3a
 8001b42:	d036      	beq.n	8001bb2 <HAL_UART_RxCpltCallback+0x92>
 8001b44:	2b7f      	cmp	r3, #127	; 0x7f
 8001b46:	f000 8092 	beq.w	8001c6e <HAL_UART_RxCpltCallback+0x14e>
 8001b4a:	2b0d      	cmp	r3, #13
 8001b4c:	f040 80d3 	bne.w	8001cf6 <HAL_UART_RxCpltCallback+0x1d6>
		{
			/* 엔터 */
			case '\r':
				HAL_UART_Transmit(&huart1, enter, sizeof(enter), 0xFFFF);
 8001b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b54:	2203      	movs	r2, #3
 8001b56:	4981      	ldr	r1, [pc, #516]	; (8001d5c <HAL_UART_RxCpltCallback+0x23c>)
 8001b58:	487d      	ldr	r0, [pc, #500]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001b5a:	f003 fd30 	bl	80055be <HAL_UART_Transmit>
				if(modecommand != 0)
 8001b5e:	4b80      	ldr	r3, [pc, #512]	; (8001d60 <HAL_UART_RxCpltCallback+0x240>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_UART_RxCpltCallback+0x58>
				{
					rxdata[front] = '\0';
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]
					HAL_TIM_Base_Start_IT(&htim13);
 8001b72:	487c      	ldr	r0, [pc, #496]	; (8001d64 <HAL_UART_RxCpltCallback+0x244>)
 8001b74:	f003 f8d5 	bl	8004d22 <HAL_TIM_Base_Start_IT>
				}
				front = ((front + 1) % (SJKIM_SIZE-1));
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_UART_RxCpltCallback+0x248>)
 8001b80:	fb83 2301 	smull	r2, r3, r3, r1
 8001b84:	10da      	asrs	r2, r3, #3
 8001b86:	17cb      	asrs	r3, r1, #31
 8001b88:	1ad2      	subs	r2, r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	1aca      	subs	r2, r1, r3
 8001b96:	b292      	uxth	r2, r2
 8001b98:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001b9a:	801a      	strh	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4869      	ldr	r0, [pc, #420]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001bac:	f003 fda0 	bl	80056f0 <HAL_UART_Receive_IT>
				break;
 8001bb0:	e0ca      	b.n	8001d48 <HAL_UART_RxCpltCallback+0x228>
			/* 입력모드 :입력시 modecommand->1 */
			case ':':
				if(modecommand == 0)
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_UART_RxCpltCallback+0x240>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d131      	bne.n	8001c1e <HAL_UART_RxCpltCallback+0xfe>
				{
					front = 0;
 8001bba:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
					modecommand = 1;
 8001bc0:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_UART_RxCpltCallback+0x240>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	801a      	strh	r2, [r3, #0]
					for(int i = 0; i < sizeof(rxdata); i++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e00c      	b.n	8001be6 <HAL_UART_RxCpltCallback+0xc6>
					{
						rxdata[i] = '\0';
 8001bcc:	4a62      	ldr	r2, [pc, #392]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
						rxvaldata[i] = '\0';
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_UART_RxCpltCallback+0x24c>)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < sizeof(rxdata); i++)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b13      	cmp	r3, #19
 8001bea:	d9ef      	bls.n	8001bcc <HAL_UART_RxCpltCallback+0xac>
					}
					HAL_UART_Transmit(&huart1, enter, sizeof(enter), 0xFFFF);
 8001bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	495a      	ldr	r1, [pc, #360]	; (8001d5c <HAL_UART_RxCpltCallback+0x23c>)
 8001bf4:	4856      	ldr	r0, [pc, #344]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001bf6:	f003 fce2 	bl	80055be <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, txbuffer, sizeof(txbuffer), 0xFFFF);
 8001bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfe:	223b      	movs	r2, #59	; 0x3b
 8001c00:	495b      	ldr	r1, [pc, #364]	; (8001d70 <HAL_UART_RxCpltCallback+0x250>)
 8001c02:	4853      	ldr	r0, [pc, #332]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001c04:	f003 fcdb 	bl	80055be <HAL_UART_Transmit>
					HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b52      	ldr	r3, [pc, #328]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001c10:	4413      	add	r3, r2
 8001c12:	2201      	movs	r2, #1
 8001c14:	4619      	mov	r1, r3
 8001c16:	484e      	ldr	r0, [pc, #312]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001c18:	f003 fd6a 	bl	80056f0 <HAL_UART_Receive_IT>
				else {
					HAL_UART_Transmit(&huart1, &rxdata[front], 1, 0xFFFF);
					front = ((front + 1) % (SJKIM_SIZE-1));
					HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
				}
				break;
 8001c1c:	e094      	b.n	8001d48 <HAL_UART_RxCpltCallback+0x228>
					HAL_UART_Transmit(&huart1, &rxdata[front], 1, 0xFFFF);
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001c26:	18d1      	adds	r1, r2, r3
 8001c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4848      	ldr	r0, [pc, #288]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001c30:	f003 fcc5 	bl	80055be <HAL_UART_Transmit>
					front = ((front + 1) % (SJKIM_SIZE-1));
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	1c59      	adds	r1, r3, #1
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <HAL_UART_RxCpltCallback+0x248>)
 8001c3c:	fb83 2301 	smull	r2, r3, r3, r1
 8001c40:	10da      	asrs	r2, r3, #3
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	1ad2      	subs	r2, r2, r3
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	1aca      	subs	r2, r1, r3
 8001c52:	b292      	uxth	r2, r2
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c56:	801a      	strh	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001c60:	4413      	add	r3, r2
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	483a      	ldr	r0, [pc, #232]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001c68:	f003 fd42 	bl	80056f0 <HAL_UART_Receive_IT>
				break;
 8001c6c:	e06c      	b.n	8001d48 <HAL_UART_RxCpltCallback+0x228>
			/* 백 스페이스 */
			case '\177':
				rxdata[front] = '\0';
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]
				if(front != 0) {
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d012      	beq.n	8001ca8 <HAL_UART_RxCpltCallback+0x188>
					front = ((front - 1) % (SJKIM_SIZE-1));
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_UART_RxCpltCallback+0x248>)
 8001c8a:	fb83 2301 	smull	r2, r3, r3, r1
 8001c8e:	10da      	asrs	r2, r3, #3
 8001c90:	17cb      	asrs	r3, r1, #31
 8001c92:	1ad2      	subs	r2, r2, r3
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	1aca      	subs	r2, r1, r3
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	e006      	b.n	8001cb6 <HAL_UART_RxCpltCallback+0x196>
				}
				else if(front == 0){
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x196>
					front= SJKIM_SIZE-1;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001cb2:	2213      	movs	r2, #19
 8001cb4:	801a      	strh	r2, [r3, #0]
				}
				HAL_UART_Transmit(&huart1, backspace, 1, 0xFFFF);
 8001cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cba:	2201      	movs	r2, #1
 8001cbc:	492d      	ldr	r1, [pc, #180]	; (8001d74 <HAL_UART_RxCpltCallback+0x254>)
 8001cbe:	4824      	ldr	r0, [pc, #144]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001cc0:	f003 fc7d 	bl	80055be <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, blank, 1, 0xFFFF);
 8001cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc8:	2201      	movs	r2, #1
 8001cca:	492b      	ldr	r1, [pc, #172]	; (8001d78 <HAL_UART_RxCpltCallback+0x258>)
 8001ccc:	4820      	ldr	r0, [pc, #128]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001cce:	f003 fc76 	bl	80055be <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, backspace, 1, 0xFFFF);
 8001cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4926      	ldr	r1, [pc, #152]	; (8001d74 <HAL_UART_RxCpltCallback+0x254>)
 8001cda:	481d      	ldr	r0, [pc, #116]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001cdc:	f003 fc6f 	bl	80055be <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	2201      	movs	r2, #1
 8001cec:	4619      	mov	r1, r3
 8001cee:	4818      	ldr	r0, [pc, #96]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001cf0:	f003 fcfe 	bl	80056f0 <HAL_UART_Receive_IT>
				break;
 8001cf4:	e028      	b.n	8001d48 <HAL_UART_RxCpltCallback+0x228>
			default:
				HAL_UART_Transmit(&huart1, &rxdata[front], 1, 0xFFFF);
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001cfe:	18d1      	adds	r1, r2, r3
 8001d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d04:	2201      	movs	r2, #1
 8001d06:	4812      	ldr	r0, [pc, #72]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001d08:	f003 fc59 	bl	80055be <HAL_UART_Transmit>
				/* modecommand on일시 처리 */
				front = ((front + 1) % (SJKIM_SIZE-1));
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	1c59      	adds	r1, r3, #1
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_UART_RxCpltCallback+0x248>)
 8001d14:	fb83 2301 	smull	r2, r3, r3, r1
 8001d18:	10da      	asrs	r2, r3, #3
 8001d1a:	17cb      	asrs	r3, r1, #31
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	1aca      	subs	r2, r1, r3
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001d2e:	801a      	strh	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &rxdata[front], 1);
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_UART_RxCpltCallback+0x234>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_UART_RxCpltCallback+0x238>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <HAL_UART_RxCpltCallback+0x230>)
 8001d40:	f003 fcd6 	bl	80056f0 <HAL_UART_Receive_IT>
			break;
 8001d44:	e000      	b.n	8001d48 <HAL_UART_RxCpltCallback+0x228>
		}
	}
 8001d46:	bf00      	nop
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000684 	.word	0x20000684
 8001d54:	200002f6 	.word	0x200002f6
 8001d58:	20000520 	.word	0x20000520
 8001d5c:	200000f4 	.word	0x200000f4
 8001d60:	200002f4 	.word	0x200002f4
 8001d64:	200005c4 	.word	0x200005c4
 8001d68:	6bca1af3 	.word	0x6bca1af3
 8001d6c:	20000544 	.word	0x20000544
 8001d70:	200000b0 	.word	0x200000b0
 8001d74:	200000ec 	.word	0x200000ec
 8001d78:	200000f0 	.word	0x200000f0

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001d92:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <MX_SPI1_Init+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dd8:	220a      	movs	r2, #10
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <MX_SPI1_Init+0x64>)
 8001dde:	f002 ff11 	bl	8004c04 <HAL_SPI_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001de8:	f7ff ffc8 	bl	8001d7c <Error_Handler>
  }

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000056c 	.word	0x2000056c
 8001df4:	40013000 	.word	0x40013000

08001df8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_SPI_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_SPI_MspInit+0x88>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_SPI_MspInit+0x88>)
 8001e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_SPI_MspInit+0x88>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_SPI_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_SPI_MspInit+0x88>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_SPI_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e52:	2338      	movs	r3, #56	; 0x38
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e62:	2305      	movs	r3, #5
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_SPI_MspInit+0x8c>)
 8001e6e:	f002 f88d 	bl	8003f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40013000 	.word	0x40013000
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020400 	.word	0x40020400

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2c:	f000 fa6a 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f002 f9e9 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f002 f9e2 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM2_IRQHandler+0x10>)
 8001f56:	f002 ff33 	bl	8004dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000604 	.word	0x20000604

08001f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <USART1_IRQHandler+0x10>)
 8001f6a:	f003 fc17 	bl	800579c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000684 	.word	0x20000684

08001f78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA2_Stream0_IRQHandler+0x10>)
 8001f7e:	f001 f92f 	bl	80031e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000304 	.word	0x20000304

08001f8c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <DMA2_Stream4_IRQHandler+0x10>)
 8001f92:	f001 f925 	bl	80031e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200003f4 	.word	0x200003f4

08001fa0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x50>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <_sbrk+0x16>
		heap_end = &end;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <_sbrk+0x50>)
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <_sbrk+0x54>)
 8001fb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <_sbrk+0x50>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <_sbrk+0x50>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	466a      	mov	r2, sp
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d907      	bls.n	8001fda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fca:	f004 f9e7 	bl	800639c <__errno>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fd8:	e006      	b.n	8001fe8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <_sbrk+0x50>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <_sbrk+0x50>)
 8001fe4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200002f8 	.word	0x200002f8
 8001ff4:	200006d0 	.word	0x200006d0

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <SystemInit+0x28>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <SystemInit+0x28>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SystemInit+0x28>)
 800200e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002012:	609a      	str	r2, [r3, #8]
#endif
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	463b      	mov	r3, r7
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_TIM2_Init+0x98>)
 8002042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_TIM2_Init+0x98>)
 800204a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800204e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_TIM2_Init+0x98>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_TIM2_Init+0x98>)
 8002058:	f242 720f 	movw	r2, #9999	; 0x270f
 800205c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_TIM2_Init+0x98>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <MX_TIM2_Init+0x98>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206a:	4814      	ldr	r0, [pc, #80]	; (80020bc <MX_TIM2_Init+0x98>)
 800206c:	f002 fe2e 	bl	8004ccc <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002076:	f7ff fe81 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4619      	mov	r1, r3
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <MX_TIM2_Init+0x98>)
 8002088:	f002 ffa2 	bl	8004fd0 <HAL_TIM_ConfigClockSource>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002092:	f7ff fe73 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <MX_TIM2_Init+0x98>)
 80020a4:	f003 f9ae 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ae:	f7ff fe65 	bl	8001d7c <Error_Handler>
  }

}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000604 	.word	0x20000604

080020c0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c6:	463b      	mov	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MX_TIM7_Init+0x64>)
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <MX_TIM7_Init+0x68>)
 80020d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MX_TIM7_Init+0x64>)
 80020d6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80020da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_TIM7_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <MX_TIM7_Init+0x64>)
 80020e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80020e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_TIM7_Init+0x64>)
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <MX_TIM7_Init+0x64>)
 80020f2:	f002 fdeb 	bl	8004ccc <HAL_TIM_Base_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80020fc:	f7ff fe3e 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002108:	463b      	mov	r3, r7
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_TIM7_Init+0x64>)
 800210e:	f003 f979 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002118:	f7ff fe30 	bl	8001d7c <Error_Handler>
  }

}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000644 	.word	0x20000644
 8002128:	40001400 	.word	0x40001400

0800212c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_TIM13_Init+0x40>)
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <MX_TIM13_Init+0x44>)
 8002134:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <MX_TIM13_Init+0x40>)
 8002138:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800213c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_TIM13_Init+0x40>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_TIM13_Init+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_TIM13_Init+0x40>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_TIM13_Init+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_TIM13_Init+0x40>)
 8002158:	f002 fdb8 	bl	8004ccc <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002162:	f7ff fe0b 	bl	8001d7c <Error_Handler>
  }

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200005c4 	.word	0x200005c4
 8002170:	40001c00 	.word	0x40001c00

08002174 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d116      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201c      	movs	r0, #28
 80021a8:	f000 fe4d 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f000 fe66 	bl	8002e7e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80021b2:	e026      	b.n	8002202 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_TIM_Base_MspInit+0x9c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10e      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
}
 80021da:	e012      	b.n	8002202 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_TIM_Base_MspInit+0xa0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10d      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_TIM_Base_MspInit+0x98>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40001400 	.word	0x40001400
 8002214:	40001c00 	.word	0x40001c00

08002218 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <MX_USART1_UART_Init+0x50>)
 8002220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 8002224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USART1_UART_Init+0x4c>)
 8002250:	f003 f968 	bl	8005524 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800225a:	f7ff fd8f 	bl	8001d7c <Error_Handler>
  }

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000684 	.word	0x20000684
 8002268:	40011000 	.word	0x40011000

0800226c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_UART_MspInit+0x94>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d134      	bne.n	80022f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_UART_MspInit+0x98>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_UART_MspInit+0x98>)
 8002298:	f043 0310 	orr.w	r3, r3, #16
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_UART_MspInit+0x98>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_UART_MspInit+0x98>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_UART_MspInit+0x98>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_UART_MspInit+0x98>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d8:	2307      	movs	r3, #7
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <HAL_UART_MspInit+0x9c>)
 80022e4:	f001 fe52 	bl	8003f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	2025      	movs	r0, #37	; 0x25
 80022ee:	f000 fdaa 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f2:	2025      	movs	r0, #37	; 0x25
 80022f4:	f000 fdc3 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40011000 	.word	0x40011000
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002344 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002312:	e003      	b.n	800231c <LoopCopyDataInit>

08002314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800231a:	3104      	adds	r1, #4

0800231c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002324:	d3f6      	bcc.n	8002314 <CopyDataInit>
  ldr  r2, =_sbss
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002328:	e002      	b.n	8002330 <LoopFillZerobss>

0800232a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800232a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800232c:	f842 3b04 	str.w	r3, [r2], #4

08002330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002334:	d3f9      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002336:	f7ff fe5f 	bl	8001ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f004 f835 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7ff fa87 	bl	8001850 <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002344:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002348:	08007050 	.word	0x08007050
  ldr  r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002350:	200002d4 	.word	0x200002d4
  ldr  r2, =_sbss
 8002354:	200002d4 	.word	0x200002d4
  ldr  r3, = _ebss
 8002358:	200006cc 	.word	0x200006cc

0800235c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>
	...

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 fd51 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f808 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fd78 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x54>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_InitTick+0x58>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fd69 	bl	8002e9a <HAL_SYSTICK_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d80a      	bhi.n	80023ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e0:	f000 fd31 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_InitTick+0x5c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200000f8 	.word	0x200000f8
 80023fc:	20000100 	.word	0x20000100
 8002400:	200000fc 	.word	0x200000fc

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000100 	.word	0x20000100
 8002428:	200006c4 	.word	0x200006c4

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200006c4 	.word	0x200006c4

08002444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ffee 	bl	800242c <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245c:	d005      	beq.n	800246a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_Delay+0x40>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246a:	bf00      	nop
 800246c:	f7ff ffde 	bl	800242c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f7      	bhi.n	800246c <HAL_Delay+0x28>
  {
  }
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000100 	.word	0x20000100

08002488 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e033      	b.n	8002506 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe f9be 	bl	8000828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ce:	f023 0302 	bic.w	r3, r3, #2
 80024d2:	f043 0202 	orr.w	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa5a 	bl	8002994 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
 80024f6:	e001      	b.n	80024fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_Start_DMA+0x1e>
 800252a:	2302      	movs	r3, #2
 800252c:	e0cc      	b.n	80026c8 <HAL_ADC_Start_DMA+0x1b8>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d018      	beq.n	8002576 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_ADC_Start_DMA+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a5e      	ldr	r2, [pc, #376]	; (80026d4 <HAL_ADC_Start_DMA+0x1c4>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0c9a      	lsrs	r2, r3, #18
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002568:	e002      	b.n	8002570 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3b01      	subs	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	f040 80a0 	bne.w	80026c6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f023 0206 	bic.w	r2, r3, #6
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
 80025d2:	e002      	b.n	80025da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <HAL_ADC_Start_DMA+0x1c8>)
 80025e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_ADC_Start_DMA+0x1cc>)
 80025ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	4a3b      	ldr	r2, [pc, #236]	; (80026e0 <HAL_ADC_Start_DMA+0x1d0>)
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_ADC_Start_DMA+0x1d4>)
 80025fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002606:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002616:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002626:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	334c      	adds	r3, #76	; 0x4c
 8002632:	4619      	mov	r1, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f000 fd58 	bl	80030ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12a      	bne.n	800269e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <HAL_ADC_Start_DMA+0x1d8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d015      	beq.n	800267e <HAL_ADC_Start_DMA+0x16e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a25      	ldr	r2, [pc, #148]	; (80026ec <HAL_ADC_Start_DMA+0x1dc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d105      	bne.n	8002668 <HAL_ADC_Start_DMA+0x158>
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_ADC_Start_DMA+0x1c8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_ADC_Start_DMA+0x1e0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d129      	bne.n	80026c6 <HAL_ADC_Start_DMA+0x1b6>
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_ADC_Start_DMA+0x1c8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2b0f      	cmp	r3, #15
 800267c:	d823      	bhi.n	80026c6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11c      	bne.n	80026c6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e013      	b.n	80026c6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_ADC_Start_DMA+0x1d8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10e      	bne.n	80026c6 <HAL_ADC_Start_DMA+0x1b6>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200000f8 	.word	0x200000f8
 80026d4:	431bde83 	.word	0x431bde83
 80026d8:	40012300 	.word	0x40012300
 80026dc:	08002b8d 	.word	0x08002b8d
 80026e0:	08002c47 	.word	0x08002c47
 80026e4:	08002c63 	.word	0x08002c63
 80026e8:	40012000 	.word	0x40012000
 80026ec:	40012100 	.word	0x40012100
 80026f0:	40012200 	.word	0x40012200

080026f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1c>
 8002748:	2302      	movs	r3, #2
 800274a:	e113      	b.n	8002974 <HAL_ADC_ConfigChannel+0x244>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d925      	bls.n	80027a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68d9      	ldr	r1, [r3, #12]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	3b1e      	subs	r3, #30
 8002772:	2207      	movs	r2, #7
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43da      	mvns	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	400a      	ands	r2, r1
 8002780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4618      	mov	r0, r3
 8002794:	4603      	mov	r3, r0
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4403      	add	r3, r0
 800279a:	3b1e      	subs	r3, #30
 800279c:	409a      	lsls	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	e022      	b.n	80027ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	2207      	movs	r2, #7
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	400a      	ands	r2, r1
 80027ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4403      	add	r3, r0
 80027e4:	409a      	lsls	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d824      	bhi.n	8002840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b05      	subs	r3, #5
 8002808:	221f      	movs	r2, #31
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	4618      	mov	r0, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b05      	subs	r3, #5
 8002832:	fa00 f203 	lsl.w	r2, r0, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
 800283e:	e04c      	b.n	80028da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d824      	bhi.n	8002892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	3b23      	subs	r3, #35	; 0x23
 800285a:	221f      	movs	r2, #31
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43da      	mvns	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	400a      	ands	r2, r1
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b23      	subs	r3, #35	; 0x23
 8002884:	fa00 f203 	lsl.w	r2, r0, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
 8002890:	e023      	b.n	80028da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b41      	subs	r3, #65	; 0x41
 80028a4:	221f      	movs	r2, #31
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	400a      	ands	r2, r1
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b41      	subs	r3, #65	; 0x41
 80028ce:	fa00 f203 	lsl.w	r2, r0, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_ADC_ConfigChannel+0x250>)
 80028dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a28      	ldr	r2, [pc, #160]	; (8002984 <HAL_ADC_ConfigChannel+0x254>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10f      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d8>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d10b      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_ADC_ConfigChannel+0x254>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12b      	bne.n	800296a <HAL_ADC_ConfigChannel+0x23a>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_ADC_ConfigChannel+0x258>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x1f4>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b11      	cmp	r3, #17
 8002922:	d122      	bne.n	800296a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_ADC_ConfigChannel+0x258>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d111      	bne.n	800296a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_ADC_ConfigChannel+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_ADC_ConfigChannel+0x260>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	0c9a      	lsrs	r2, r3, #18
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800295c:	e002      	b.n	8002964 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3b01      	subs	r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f9      	bne.n	800295e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40012300 	.word	0x40012300
 8002984:	40012000 	.word	0x40012000
 8002988:	10000012 	.word	0x10000012
 800298c:	200000f8 	.word	0x200000f8
 8002990:	431bde83 	.word	0x431bde83

08002994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299c:	4b79      	ldr	r3, [pc, #484]	; (8002b84 <ADC_Init+0x1f0>)
 800299e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <ADC_Init+0x1f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e00f      	b.n	8002a92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0202 	bic.w	r2, r2, #2
 8002aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7e1b      	ldrb	r3, [r3, #24]
 8002aac:	005a      	lsls	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ace:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	3b01      	subs	r3, #1
 8002aec:	035a      	lsls	r2, r3, #13
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e007      	b.n	8002b08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	051a      	lsls	r2, r3, #20
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4a:	025a      	lsls	r2, r3, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	029a      	lsls	r2, r3, #10
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012300 	.word	0x40012300
 8002b88:	0f000001 	.word	0x0f000001

08002b8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d13c      	bne.n	8002c20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d12b      	bne.n	8002c18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d127      	bne.n	8002c18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d119      	bne.n	8002c18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0220 	bic.w	r2, r2, #32
 8002bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fd6b 	bl	80026f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c1e:	e00e      	b.n	8002c3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fd75 	bl	800271c <HAL_ADC_ErrorCallback>
}
 8002c32:	e004      	b.n	8002c3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff fd57 	bl	8002708 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f043 0204 	orr.w	r2, r3, #4
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fd4a 	bl	800271c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff29 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff3e 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff31 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e014      	b.n	8002eee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe fad5 	bl	8001484 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b087      	sub	sp, #28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	795b      	ldrb	r3, [r3, #5]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_DAC_ConfigChannel+0x20>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e036      	b.n	8002f84 <HAL_DAC_ConfigChannel+0x8e>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002f2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6819      	ldr	r1, [r3, #0]
 8002f64:	22c0      	movs	r2, #192	; 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	400a      	ands	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff fa46 	bl	800242c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e099      	b.n	80030e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fcc:	e00f      	b.n	8002fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fce:	f7ff fa2d 	bl	800242c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d908      	bls.n	8002fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e078      	b.n	80030e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e8      	bne.n	8002fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_DMA_Init+0x158>)
 8003008:	4013      	ands	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b04      	cmp	r3, #4
 8003046:	d107      	bne.n	8003058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	4313      	orrs	r3, r2
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0307 	bic.w	r3, r3, #7
 800306e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2b04      	cmp	r3, #4
 8003080:	d117      	bne.n	80030b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa91 	bl	80035bc <DMA_CheckFifoParam>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ae:	2301      	movs	r3, #1
 80030b0:	e016      	b.n	80030e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa48 	bl	8003550 <DMA_CalcBaseAndBitshift>
 80030c0:	4603      	mov	r3, r0
 80030c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	223f      	movs	r2, #63	; 0x3f
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	f010803f 	.word	0xf010803f

080030ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_DMA_Start_IT+0x26>
 800310e:	2302      	movs	r3, #2
 8003110:	e040      	b.n	8003194 <HAL_DMA_Start_IT+0xa8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d12f      	bne.n	8003186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f9da 	bl	80034f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	223f      	movs	r2, #63	; 0x3f
 8003146:	409a      	lsls	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0216 	orr.w	r2, r2, #22
 800315a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0208 	orr.w	r2, r2, #8
 8003172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e005      	b.n	8003192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d004      	beq.n	80031ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00c      	b.n	80031d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2205      	movs	r2, #5
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031ec:	4b92      	ldr	r3, [pc, #584]	; (8003438 <HAL_DMA_IRQHandler+0x258>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a92      	ldr	r2, [pc, #584]	; (800343c <HAL_DMA_IRQHandler+0x25c>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01a      	beq.n	800324c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	2208      	movs	r2, #8
 800323a:	409a      	lsls	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2201      	movs	r2, #1
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d012      	beq.n	8003282 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2201      	movs	r2, #1
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0202 	orr.w	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2204      	movs	r2, #4
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	2204      	movs	r2, #4
 80032a6:	409a      	lsls	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	2210      	movs	r2, #16
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d043      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d03c      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2210      	movs	r2, #16
 80032dc:	409a      	lsls	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d024      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	e01f      	b.n	8003350 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01b      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e016      	b.n	8003350 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0208 	bic.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2220      	movs	r2, #32
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 808e 	beq.w	800347e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8086 	beq.w	800347e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003376:	2220      	movs	r2, #32
 8003378:	409a      	lsls	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b05      	cmp	r3, #5
 8003388:	d136      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0216 	bic.w	r2, r2, #22
 8003398:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_DMA_IRQHandler+0x1da>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d07d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
        }
        return;
 80033f6:	e078      	b.n	80034ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01c      	beq.n	8003440 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d108      	bne.n	8003426 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	2b00      	cmp	r3, #0
 800341a:	d030      	beq.n	800347e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
 8003424:	e02b      	b.n	800347e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d027      	beq.n	800347e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e022      	b.n	800347e <HAL_DMA_IRQHandler+0x29e>
 8003438:	200000f8 	.word	0x200000f8
 800343c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0210 	bic.w	r2, r2, #16
 800345c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	2b00      	cmp	r3, #0
 8003484:	d032      	beq.n	80034ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d022      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2205      	movs	r2, #5
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d307      	bcc.n	80034c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f2      	bne.n	80034aa <HAL_DMA_IRQHandler+0x2ca>
 80034c4:	e000      	b.n	80034c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e000      	b.n	80034ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80034ea:	bf00      	nop
    }
  }
}
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop

080034f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003510:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d108      	bne.n	8003534 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003532:	e007      	b.n	8003544 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3b10      	subs	r3, #16
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800356a:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <DMA_CalcBaseAndBitshift+0x68>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d909      	bls.n	8003592 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	; 0x58
 8003590:	e007      	b.n	80035a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	aaaaaaab 	.word	0xaaaaaaab
 80035b8:	08006ef8 	.word	0x08006ef8

080035bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11f      	bne.n	8003616 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d855      	bhi.n	8003688 <DMA_CheckFifoParam+0xcc>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <DMA_CheckFifoParam+0x28>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003607 	.word	0x08003607
 80035ec:	080035f5 	.word	0x080035f5
 80035f0:	08003689 	.word	0x08003689
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d045      	beq.n	800368c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003604:	e042      	b.n	800368c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800360e:	d13f      	bne.n	8003690 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003614:	e03c      	b.n	8003690 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	d121      	bne.n	8003664 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d836      	bhi.n	8003694 <DMA_CheckFifoParam+0xd8>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <DMA_CheckFifoParam+0x70>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	0800363d 	.word	0x0800363d
 8003630:	08003643 	.word	0x08003643
 8003634:	0800363d 	.word	0x0800363d
 8003638:	08003655 	.word	0x08003655
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e02f      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d024      	beq.n	8003698 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003652:	e021      	b.n	8003698 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800365c:	d11e      	bne.n	800369c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003662:	e01b      	b.n	800369c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d902      	bls.n	8003670 <DMA_CheckFifoParam+0xb4>
 800366a:	2b03      	cmp	r3, #3
 800366c:	d003      	beq.n	8003676 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800366e:	e018      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e015      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      break;
 8003686:	e00b      	b.n	80036a0 <DMA_CheckFifoParam+0xe4>
      break;
 8003688:	bf00      	nop
 800368a:	e00a      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;
 800368c:	bf00      	nop
 800368e:	e008      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;
 8003690:	bf00      	nop
 8003692:	e006      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;
 8003694:	bf00      	nop
 8003696:	e004      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;
 80036a0:	bf00      	nop
    }
  } 
  
  return status; 
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80036c0:	4baa      	ldr	r3, [pc, #680]	; (800396c <HAL_ETH_Init+0x2bc>)
 80036c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e185      	b.n	80039e2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd ff76 	bl	80015dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	4b9e      	ldr	r3, [pc, #632]	; (8003970 <HAL_ETH_Init+0x2c0>)
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	4a9d      	ldr	r2, [pc, #628]	; (8003970 <HAL_ETH_Init+0x2c0>)
 80036fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003700:	4b9b      	ldr	r3, [pc, #620]	; (8003970 <HAL_ETH_Init+0x2c0>)
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800370c:	4b99      	ldr	r3, [pc, #612]	; (8003974 <HAL_ETH_Init+0x2c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a98      	ldr	r2, [pc, #608]	; (8003974 <HAL_ETH_Init+0x2c4>)
 8003712:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003716:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003718:	4b96      	ldr	r3, [pc, #600]	; (8003974 <HAL_ETH_Init+0x2c4>)
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4994      	ldr	r1, [pc, #592]	; (8003974 <HAL_ETH_Init+0x2c4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800373e:	f7fe fe75 	bl	800242c <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003744:	e011      	b.n	800376a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003746:	f7fe fe71 	bl	800242c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003754:	d909      	bls.n	800376a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2203      	movs	r2, #3
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e13b      	b.n	80039e2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e4      	bne.n	8003746 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f023 031c 	bic.w	r3, r3, #28
 800378a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800378c:	f001 fa06 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8003790:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	4a78      	ldr	r2, [pc, #480]	; (8003978 <HAL_ETH_Init+0x2c8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d908      	bls.n	80037ac <HAL_ETH_Init+0xfc>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4a77      	ldr	r2, [pc, #476]	; (800397c <HAL_ETH_Init+0x2cc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d804      	bhi.n	80037ac <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e027      	b.n	80037fc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4a73      	ldr	r2, [pc, #460]	; (800397c <HAL_ETH_Init+0x2cc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d908      	bls.n	80037c6 <HAL_ETH_Init+0x116>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_ETH_Init+0x2d0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d804      	bhi.n	80037c6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f043 030c 	orr.w	r3, r3, #12
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	e01a      	b.n	80037fc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4a6d      	ldr	r2, [pc, #436]	; (8003980 <HAL_ETH_Init+0x2d0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d903      	bls.n	80037d6 <HAL_ETH_Init+0x126>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4a6c      	ldr	r2, [pc, #432]	; (8003984 <HAL_ETH_Init+0x2d4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d911      	bls.n	80037fa <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4a6a      	ldr	r2, [pc, #424]	; (8003984 <HAL_ETH_Init+0x2d4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d908      	bls.n	80037f0 <HAL_ETH_Init+0x140>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4a69      	ldr	r2, [pc, #420]	; (8003988 <HAL_ETH_Init+0x2d8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d804      	bhi.n	80037f0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e005      	b.n	80037fc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f043 0310 	orr.w	r3, r3, #16
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	e000      	b.n	80037fc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80037fa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003804:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003808:	2100      	movs	r1, #0
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f956 	bl	8003abc <HAL_ETH_WritePHYRegister>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800381a:	6939      	ldr	r1, [r7, #16]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f9b3 	bl	8003b88 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0d9      	b.n	80039e2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800382e:	20ff      	movs	r0, #255	; 0xff
 8003830:	f7fe fe08 	bl	8002444 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a7 	beq.w	800398c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800383e:	f7fe fdf5 	bl	800242c <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003844:	f107 030c 	add.w	r3, r7, #12
 8003848:	461a      	mov	r2, r3
 800384a:	2101      	movs	r1, #1
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f8cd 	bl	80039ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003852:	f7fe fdeb 	bl	800242c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d90f      	bls.n	8003884 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003868:	6939      	ldr	r1, [r7, #16]
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f98c 	bl	8003b88 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0ae      	b.n	80039e2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0da      	beq.n	8003844 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800388e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003892:	2100      	movs	r1, #0
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f911 	bl	8003abc <HAL_ETH_WritePHYRegister>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80038a4:	6939      	ldr	r1, [r7, #16]
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f96e 	bl	8003b88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80038b4:	2301      	movs	r3, #1
 80038b6:	e094      	b.n	80039e2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b8:	f7fe fdb8 	bl	800242c <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	461a      	mov	r2, r3
 80038c4:	2101      	movs	r1, #1
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f890 	bl	80039ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80038cc:	f7fe fdae 	bl	800242c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d90f      	bls.n	80038fe <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80038e2:	6939      	ldr	r1, [r7, #16]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f94f 	bl	8003b88 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e071      	b.n	80039e2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0da      	beq.n	80038be <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	461a      	mov	r2, r3
 800390e:	211f      	movs	r1, #31
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f86b 	bl	80039ec <HAL_ETH_ReadPHYRegister>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003920:	6939      	ldr	r1, [r7, #16]
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f930 	bl	8003b88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003930:	2301      	movs	r3, #1
 8003932:	e056      	b.n	80039e2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	e002      	b.n	800394e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	e037      	b.n	80039d0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	e032      	b.n	80039d0 <HAL_ETH_Init+0x320>
 800396a:	bf00      	nop
 800396c:	03938700 	.word	0x03938700
 8003970:	40023800 	.word	0x40023800
 8003974:	40013800 	.word	0x40013800
 8003978:	01312cff 	.word	0x01312cff
 800397c:	02160ebf 	.word	0x02160ebf
 8003980:	039386ff 	.word	0x039386ff
 8003984:	05f5e0ff 	.word	0x05f5e0ff
 8003988:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800399c:	4313      	orrs	r3, r2
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	2100      	movs	r1, #0
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f889 	bl	8003abc <HAL_ETH_WritePHYRegister>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80039b4:	6939      	ldr	r1, [r7, #16]
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8e6 	bl	8003b88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e00c      	b.n	80039e2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80039c8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80039cc:	f7fe fd3a 	bl	8002444 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80039d0:	6939      	ldr	r1, [r7, #16]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8d8 	bl	8003b88 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	460b      	mov	r3, r1
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b82      	cmp	r3, #130	; 0x82
 8003a0c:	d101      	bne.n	8003a12 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e050      	b.n	8003ab4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2282      	movs	r2, #130	; 0x82
 8003a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 031c 	and.w	r3, r3, #28
 8003a28:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8a1b      	ldrh	r3, [r3, #16]
 8003a2e:	02db      	lsls	r3, r3, #11
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	019b      	lsls	r3, r3, #6
 8003a3c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f023 0302 	bic.w	r3, r3, #2
 8003a4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5e:	f7fe fce5 	bl	800242c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a64:	e015      	b.n	8003a92 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003a66:	f7fe fce1 	bl	800242c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d309      	bcc.n	8003a8a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e014      	b.n	8003ab4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e4      	bne.n	8003a66 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b42      	cmp	r3, #66	; 0x42
 8003adc:	d101      	bne.n	8003ae2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e04e      	b.n	8003b80 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2242      	movs	r2, #66	; 0x42
 8003ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 031c 	and.w	r3, r3, #28
 8003af8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8a1b      	ldrh	r3, [r3, #16]
 8003afe:	02db      	lsls	r3, r3, #11
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b38:	f7fe fc78 	bl	800242c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b3e:	e015      	b.n	8003b6c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003b40:	f7fe fc74 	bl	800242c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4e:	d309      	bcc.n	8003b64 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00d      	b.n	8003b80 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e4      	bne.n	8003b40 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b0b0      	sub	sp, #192	; 0xc0
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ba4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd4:	e001      	b.n	8003bda <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bde:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003be4:	2300      	movs	r3, #0
 8003be6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c60:	4bac      	ldr	r3, [pc, #688]	; (8003f14 <ETH_MACDMAConfig+0x38c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003c6c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003c70:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003c74:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003c7a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003c7e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003c82:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003c88:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003c8c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003c90:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003c94:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003c98:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003c9c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003c9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cb0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f7fe fbc1 	bl	8002444 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ccc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003cd0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003cd4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003cda:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003ce0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003ce6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003cf8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003cfa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7fe fb9c 	bl	8002444 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d14:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d1e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d28:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d38:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d46:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003d4c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003d52:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003d58:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003d5e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003d64:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003d66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d78:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fe fb5d 	bl	8002444 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d92:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003d94:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003d98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f7fe fb48 	bl	8002444 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dbc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003dd0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003de2:	2304      	movs	r3, #4
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dfc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e06:	2300      	movs	r3, #0
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e12:	3318      	adds	r3, #24
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e1e:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <ETH_MACDMAConfig+0x390>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e26:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003e28:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e2a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003e2c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003e2e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003e30:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003e32:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003e34:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003e36:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003e38:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003e3a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003e3e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003e42:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003e46:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7fe fae6 	bl	8002444 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e80:	3318      	adds	r3, #24
 8003e82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e86:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e8c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003e90:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003e94:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003e98:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003e9e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003ea2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f7fe fabf 	bl	8002444 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ed2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10f      	bne.n	8003efc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee4:	331c      	adds	r3, #28
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef8:	331c      	adds	r3, #28
 8003efa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	461a      	mov	r2, r3
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f809 	bl	8003f1c <ETH_MACAddressConfig>
}
 8003f0a:	bf00      	nop
 8003f0c:	37c0      	adds	r7, #192	; 0xc0
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	ff20810f 	.word	0xff20810f
 8003f18:	f8de3f23 	.word	0xf8de3f23

08003f1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3305      	adds	r3, #5
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	3204      	adds	r2, #4
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <ETH_MACAddressConfig+0x68>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3303      	adds	r3, #3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	061a      	lsls	r2, r3, #24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3302      	adds	r3, #2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	4313      	orrs	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <ETH_MACAddressConfig+0x6c>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	461a      	mov	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6013      	str	r3, [r2, #0]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40028040 	.word	0x40028040
 8003f88:	40028044 	.word	0x40028044

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e177      	b.n	8004298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa8:	2201      	movs	r2, #1
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 8166 	bne.w	8004292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_GPIO_Init+0x5a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d007      	beq.n	8003fe6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fda:	2b11      	cmp	r3, #17
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b12      	cmp	r3, #18
 8003fe4:	d130      	bne.n	8004048 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800401c:	2201      	movs	r2, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 0201 	and.w	r2, r3, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0xfc>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b12      	cmp	r3, #18
 8004086:	d123      	bne.n	80040d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	08da      	lsrs	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3208      	adds	r2, #8
 8004090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80c0 	beq.w	8004292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_GPIO_Init+0x320>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	4a64      	ldr	r2, [pc, #400]	; (80042ac <HAL_GPIO_Init+0x320>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004120:	6453      	str	r3, [r2, #68]	; 0x44
 8004122:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_GPIO_Init+0x320>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412e:	4a60      	ldr	r2, [pc, #384]	; (80042b0 <HAL_GPIO_Init+0x324>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a57      	ldr	r2, [pc, #348]	; (80042b4 <HAL_GPIO_Init+0x328>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d037      	beq.n	80041ca <HAL_GPIO_Init+0x23e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a56      	ldr	r2, [pc, #344]	; (80042b8 <HAL_GPIO_Init+0x32c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d031      	beq.n	80041c6 <HAL_GPIO_Init+0x23a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a55      	ldr	r2, [pc, #340]	; (80042bc <HAL_GPIO_Init+0x330>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02b      	beq.n	80041c2 <HAL_GPIO_Init+0x236>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a54      	ldr	r2, [pc, #336]	; (80042c0 <HAL_GPIO_Init+0x334>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d025      	beq.n	80041be <HAL_GPIO_Init+0x232>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <HAL_GPIO_Init+0x338>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01f      	beq.n	80041ba <HAL_GPIO_Init+0x22e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_GPIO_Init+0x33c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d019      	beq.n	80041b6 <HAL_GPIO_Init+0x22a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a51      	ldr	r2, [pc, #324]	; (80042cc <HAL_GPIO_Init+0x340>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_GPIO_Init+0x226>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a50      	ldr	r2, [pc, #320]	; (80042d0 <HAL_GPIO_Init+0x344>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00d      	beq.n	80041ae <HAL_GPIO_Init+0x222>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4f      	ldr	r2, [pc, #316]	; (80042d4 <HAL_GPIO_Init+0x348>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <HAL_GPIO_Init+0x21e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4e      	ldr	r2, [pc, #312]	; (80042d8 <HAL_GPIO_Init+0x34c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <HAL_GPIO_Init+0x21a>
 80041a2:	2309      	movs	r3, #9
 80041a4:	e012      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041a6:	230a      	movs	r3, #10
 80041a8:	e010      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041aa:	2308      	movs	r3, #8
 80041ac:	e00e      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041ae:	2307      	movs	r3, #7
 80041b0:	e00c      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041b2:	2306      	movs	r3, #6
 80041b4:	e00a      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041b6:	2305      	movs	r3, #5
 80041b8:	e008      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041ba:	2304      	movs	r3, #4
 80041bc:	e006      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041be:	2303      	movs	r3, #3
 80041c0:	e004      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e002      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_GPIO_Init+0x240>
 80041ca:	2300      	movs	r3, #0
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	f002 0203 	and.w	r2, r2, #3
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	4093      	lsls	r3, r2
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041dc:	4934      	ldr	r1, [pc, #208]	; (80042b0 <HAL_GPIO_Init+0x324>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	3302      	adds	r3, #2
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ea:	4b3c      	ldr	r3, [pc, #240]	; (80042dc <HAL_GPIO_Init+0x350>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800420e:	4a33      	ldr	r2, [pc, #204]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004214:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <HAL_GPIO_Init+0x350>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_GPIO_Init+0x350>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800428c:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_GPIO_Init+0x350>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3301      	adds	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b0f      	cmp	r3, #15
 800429c:	f67f ae84 	bls.w	8003fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042a0:	bf00      	nop
 80042a2:	3724      	adds	r7, #36	; 0x24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40020000 	.word	0x40020000
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020c00 	.word	0x40020c00
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40021400 	.word	0x40021400
 80042cc:	40021800 	.word	0x40021800
 80042d0:	40021c00 	.word	0x40021c00
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40022400 	.word	0x40022400
 80042dc:	40013c00 	.word	0x40013c00

080042e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e001      	b.n	8004302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004326:	4a05      	ldr	r2, [pc, #20]	; (800433c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fd fbba 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40013c00 	.word	0x40013c00

08004340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e25b      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d075      	beq.n	800444a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435e:	4ba3      	ldr	r3, [pc, #652]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b04      	cmp	r3, #4
 8004368:	d00c      	beq.n	8004384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436a:	4ba0      	ldr	r3, [pc, #640]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004372:	2b08      	cmp	r3, #8
 8004374:	d112      	bne.n	800439c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004382:	d10b      	bne.n	800439c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	4b99      	ldr	r3, [pc, #612]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05b      	beq.n	8004448 <HAL_RCC_OscConfig+0x108>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d157      	bne.n	8004448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e236      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d106      	bne.n	80043b4 <HAL_RCC_OscConfig+0x74>
 80043a6:	4b91      	ldr	r3, [pc, #580]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a90      	ldr	r2, [pc, #576]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e01d      	b.n	80043f0 <HAL_RCC_OscConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x98>
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a8a      	ldr	r2, [pc, #552]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a87      	ldr	r2, [pc, #540]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0xb0>
 80043d8:	4b84      	ldr	r3, [pc, #528]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a83      	ldr	r2, [pc, #524]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe f818 	bl	800242c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe f814 	bl	800242c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1fb      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xc0>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe f804 	bl	800242c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004428:	f7fe f800 	bl	800242c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1e7      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	4b6c      	ldr	r3, [pc, #432]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0xe8>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d063      	beq.n	800451e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b62      	ldr	r3, [pc, #392]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446a:	2b08      	cmp	r3, #8
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b5f      	ldr	r3, [pc, #380]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4b5c      	ldr	r3, [pc, #368]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x152>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1bb      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4952      	ldr	r1, [pc, #328]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e03a      	b.n	800451e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b0:	4b4f      	ldr	r3, [pc, #316]	; (80045f0 <HAL_RCC_OscConfig+0x2b0>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd ffb9 	bl	800242c <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044be:	f7fd ffb5 	bl	800242c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e19c      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	4b46      	ldr	r3, [pc, #280]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b43      	ldr	r3, [pc, #268]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4940      	ldr	r1, [pc, #256]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
 80044f0:	e015      	b.n	800451e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_OscConfig+0x2b0>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd ff98 	bl	800242c <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004500:	f7fd ff94 	bl	800242c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e17b      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d030      	beq.n	800458c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <HAL_RCC_OscConfig+0x2b4>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd ff78 	bl	800242c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004540:	f7fd ff74 	bl	800242c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e15b      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x200>
 800455e:	e015      	b.n	800458c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCC_OscConfig+0x2b4>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004566:	f7fd ff61 	bl	800242c <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456e:	f7fd ff5d 	bl	800242c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e144      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a0 	beq.w	80046da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_OscConfig+0x2b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d121      	bne.n	800461a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_RCC_OscConfig+0x2b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <HAL_RCC_OscConfig+0x2b8>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7fd ff23 	bl	800242c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e011      	b.n	800460e <HAL_RCC_OscConfig+0x2ce>
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	42470000 	.word	0x42470000
 80045f4:	42470e80 	.word	0x42470e80
 80045f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fc:	f7fd ff16 	bl	800242c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0fd      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <HAL_RCC_OscConfig+0x4d4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d106      	bne.n	8004630 <HAL_RCC_OscConfig+0x2f0>
 8004622:	4b7d      	ldr	r3, [pc, #500]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	4a7c      	ldr	r2, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	; 0x70
 800462e:	e01c      	b.n	800466a <HAL_RCC_OscConfig+0x32a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d10c      	bne.n	8004652 <HAL_RCC_OscConfig+0x312>
 8004638:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a76      	ldr	r2, [pc, #472]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 800463e:	f043 0304 	orr.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4a73      	ldr	r2, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	; 0x70
 8004650:	e00b      	b.n	800466a <HAL_RCC_OscConfig+0x32a>
 8004652:	4b71      	ldr	r3, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a70      	ldr	r2, [pc, #448]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a6d      	ldr	r2, [pc, #436]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd fedb 	bl	800242c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fd fed7 	bl	800242c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0bc      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ee      	beq.n	800467a <HAL_RCC_OscConfig+0x33a>
 800469c:	e014      	b.n	80046c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469e:	f7fd fec5 	bl	800242c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fd fec1 	bl	800242c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0a6      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b52      	ldr	r3, [pc, #328]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a51      	ldr	r2, [pc, #324]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8092 	beq.w	8004808 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e4:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d05c      	beq.n	80047aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d141      	bne.n	800477c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b48      	ldr	r3, [pc, #288]	; (800481c <HAL_RCC_OscConfig+0x4dc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fd fe95 	bl	800242c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004706:	f7fd fe91 	bl	800242c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e078      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004718:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	019b      	lsls	r3, r3, #6
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	3b01      	subs	r3, #1
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	4933      	ldr	r1, [pc, #204]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474e:	4b33      	ldr	r3, [pc, #204]	; (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fd fe6a 	bl	800242c <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475c:	f7fd fe66 	bl	800242c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e04d      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x41c>
 800477a:	e045      	b.n	8004808 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477c:	4b27      	ldr	r3, [pc, #156]	; (800481c <HAL_RCC_OscConfig+0x4dc>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fd fe53 	bl	800242c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478a:	f7fd fe4f 	bl	800242c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e036      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479c:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x44a>
 80047a8:	e02e      	b.n	8004808 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e029      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <HAL_RCC_OscConfig+0x4d8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11c      	bne.n	8004804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d115      	bne.n	8004804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10d      	bne.n	8004804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40007000 	.word	0x40007000
 8004818:	40023800 	.word	0x40023800
 800481c:	42470060 	.word	0x42470060

08004820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0cc      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d90c      	bls.n	800485c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0b8      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a58      	ldr	r2, [pc, #352]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800487e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800488c:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a52      	ldr	r2, [pc, #328]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	494d      	ldr	r1, [pc, #308]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d044      	beq.n	8004940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d119      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e07f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d003      	beq.n	80048de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e06f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e067      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fe:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 0203 	bic.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4934      	ldr	r1, [pc, #208]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004910:	f7fd fd8c 	bl	800242c <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	e00a      	b.n	800492e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004918:	f7fd fd88 	bl	800242c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e04f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 020c 	and.w	r2, r3, #12
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	429a      	cmp	r2, r3
 800493e:	d1eb      	bne.n	8004918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d20c      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e032      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4916      	ldr	r1, [pc, #88]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	490e      	ldr	r1, [pc, #56]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a6:	f000 f821 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 80049aa:	4601      	mov	r1, r0
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 80049b8:	5cd3      	ldrb	r3, [r2, r3]
 80049ba:	fa21 f303 	lsr.w	r3, r1, r3
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fd fcec 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023c00 	.word	0x40023c00
 80049dc:	40023800 	.word	0x40023800
 80049e0:	08006ee0 	.word	0x08006ee0
 80049e4:	200000f8 	.word	0x200000f8
 80049e8:	200000fc 	.word	0x200000fc

080049ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	2300      	movs	r3, #0
 80049fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a02:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x32>
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d008      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x38>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 80b4 	bne.w	8004b80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b5e      	ldr	r3, [pc, #376]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a1a:	60bb      	str	r3, [r7, #8]
       break;
 8004a1c:	e0b3      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1e:	4b5e      	ldr	r3, [pc, #376]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a20:	60bb      	str	r3, [r7, #8]
      break;
 8004a22:	e0b0      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a24:	4b5a      	ldr	r3, [pc, #360]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2e:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d04a      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3a:	4b55      	ldr	r3, [pc, #340]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	f04f 0400 	mov.w	r4, #0
 8004a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	ea03 0501 	and.w	r5, r3, r1
 8004a50:	ea04 0602 	and.w	r6, r4, r2
 8004a54:	4629      	mov	r1, r5
 8004a56:	4632      	mov	r2, r6
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	f04f 0400 	mov.w	r4, #0
 8004a60:	0154      	lsls	r4, r2, #5
 8004a62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a66:	014b      	lsls	r3, r1, #5
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	1b49      	subs	r1, r1, r5
 8004a6e:	eb62 0206 	sbc.w	r2, r2, r6
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	0194      	lsls	r4, r2, #6
 8004a7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a80:	018b      	lsls	r3, r1, #6
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	eb64 0402 	sbc.w	r4, r4, r2
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	00e2      	lsls	r2, r4, #3
 8004a92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a96:	00d9      	lsls	r1, r3, #3
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4614      	mov	r4, r2
 8004a9c:	195b      	adds	r3, r3, r5
 8004a9e:	eb44 0406 	adc.w	r4, r4, r6
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	0262      	lsls	r2, r4, #9
 8004aac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ab0:	0259      	lsls	r1, r3, #9
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	4621      	mov	r1, r4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f04f 0400 	mov.w	r4, #0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	f7fb fbec 	bl	80002a0 <__aeabi_uldivmod>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e049      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad0:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	f04f 0400 	mov.w	r4, #0
 8004ada:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	ea03 0501 	and.w	r5, r3, r1
 8004ae6:	ea04 0602 	and.w	r6, r4, r2
 8004aea:	4629      	mov	r1, r5
 8004aec:	4632      	mov	r2, r6
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	f04f 0400 	mov.w	r4, #0
 8004af6:	0154      	lsls	r4, r2, #5
 8004af8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004afc:	014b      	lsls	r3, r1, #5
 8004afe:	4619      	mov	r1, r3
 8004b00:	4622      	mov	r2, r4
 8004b02:	1b49      	subs	r1, r1, r5
 8004b04:	eb62 0206 	sbc.w	r2, r2, r6
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	0194      	lsls	r4, r2, #6
 8004b12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b16:	018b      	lsls	r3, r1, #6
 8004b18:	1a5b      	subs	r3, r3, r1
 8004b1a:	eb64 0402 	sbc.w	r4, r4, r2
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	00e2      	lsls	r2, r4, #3
 8004b28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b2c:	00d9      	lsls	r1, r3, #3
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	195b      	adds	r3, r3, r5
 8004b34:	eb44 0406 	adc.w	r4, r4, r6
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	02a2      	lsls	r2, r4, #10
 8004b42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b46:	0299      	lsls	r1, r3, #10
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	4621      	mov	r1, r4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	461a      	mov	r2, r3
 8004b58:	4623      	mov	r3, r4
 8004b5a:	f7fb fba1 	bl	80002a0 <__aeabi_uldivmod>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	460c      	mov	r4, r1
 8004b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	60bb      	str	r3, [r7, #8]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b82:	60bb      	str	r3, [r7, #8]
      break;
 8004b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b86:	68bb      	ldr	r3, [r7, #8]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	007a1200 	.word	0x007a1200

08004b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	200000f8 	.word	0x200000f8

08004bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb8:	f7ff fff0 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bbc:	4601      	mov	r1, r0
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	0a9b      	lsrs	r3, r3, #10
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	08006ef0 	.word	0x08006ef0

08004bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004be0:	f7ff ffdc 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004be4:	4601      	mov	r1, r0
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	0b5b      	lsrs	r3, r3, #13
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4a03      	ldr	r2, [pc, #12]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	08006ef0 	.word	0x08006ef0

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e056      	b.n	8004cc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fd f8e1 	bl	8001df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	ea42 0103 	orr.w	r1, r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	f003 0104 	and.w	r1, r3, #4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e01d      	b.n	8004d1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fa3e 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 fa40 	bl	8005190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b06      	cmp	r3, #6
 8004d4a:	d007      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <HAL_TIM_Base_Stop_IT+0x48>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	f240 4344 	movw	r3, #1092	; 0x444
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <HAL_TIM_Base_Stop_IT+0x48>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0202 	mvn.w	r2, #2
 8004dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9a5 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f997 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f9a8 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d122      	bne.n	8004e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0204 	mvn.w	r2, #4
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f97b 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f96d 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f97e 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0208 	mvn.w	r2, #8
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f951 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f943 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f954 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0210 	mvn.w	r2, #16
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2208      	movs	r2, #8
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f927 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f919 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f92a 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0201 	mvn.w	r2, #1
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc fd3a 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4e:	2b80      	cmp	r3, #128	; 0x80
 8004f50:	d10e      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d107      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fad0 	bl	8005510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d10e      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d107      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8ef 	bl	800517a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d107      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0220 	mvn.w	r2, #32
 8004fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa9a 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIM_ConfigClockSource+0x18>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e0a6      	b.n	8005136 <HAL_TIM_ConfigClockSource+0x166>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d067      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x120>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d80b      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x6c>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d073      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d802      	bhi.n	8005032 <HAL_TIM_ConfigClockSource+0x62>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d06f      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005030:	e078      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005032:	2b20      	cmp	r3, #32
 8005034:	d06c      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d06a      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800503a:	e073      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d00d      	beq.n	800505c <HAL_TIM_ConfigClockSource+0x8c>
 8005040:	2b70      	cmp	r3, #112	; 0x70
 8005042:	d804      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x7e>
 8005044:	2b50      	cmp	r3, #80	; 0x50
 8005046:	d033      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0xe0>
 8005048:	2b60      	cmp	r3, #96	; 0x60
 800504a:	d041      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800504c:	e06a      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d066      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x152>
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005058:	d017      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800505a:	e063      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f000 f9aa 	bl	80053c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800507e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	609a      	str	r2, [r3, #8]
      break;
 8005088:	e04c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f000 f993 	bl	80053c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ac:	609a      	str	r2, [r3, #8]
      break;
 80050ae:	e039      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	461a      	mov	r2, r3
 80050be:	f000 f907 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2150      	movs	r1, #80	; 0x50
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f960 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 80050ce:	e029      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	461a      	mov	r2, r3
 80050de:	f000 f926 	bl	800532e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2160      	movs	r1, #96	; 0x60
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f950 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 80050ee:	e019      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f000 f8e7 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2140      	movs	r1, #64	; 0x40
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f940 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 800510e:	e009      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 f937 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 8005120:	e000      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a40      	ldr	r2, [pc, #256]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d00f      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <TIM_Base_SetConfig+0x118>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <TIM_Base_SetConfig+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <TIM_Base_SetConfig+0x120>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d027      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <TIM_Base_SetConfig+0x118>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d023      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <TIM_Base_SetConfig+0x11c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01f      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <TIM_Base_SetConfig+0x120>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d017      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <TIM_Base_SetConfig+0x128>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a27      	ldr	r2, [pc, #156]	; (80052bc <TIM_Base_SetConfig+0x12c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <TIM_Base_SetConfig+0x130>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <TIM_Base_SetConfig+0x134>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <TIM_Base_SetConfig+0x138>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <TIM_Base_SetConfig+0x13c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0xf8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0c      	ldr	r2, [pc, #48]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d103      	bne.n	8005290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	615a      	str	r2, [r3, #20]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800
 80052c4:	40001800 	.word	0x40001800
 80052c8:	40001c00 	.word	0x40001c00
 80052cc:	40002000 	.word	0x40002000

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 030a 	bic.w	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f023 0210 	bic.w	r2, r3, #16
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f043 0307 	orr.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e05a      	b.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005468:	d01d      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40010400 	.word	0x40010400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40001800 	.word	0x40001800

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e03f      	b.n	80055b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fe8e 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	; 0x24
 8005554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fb97 	bl	8005c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b20      	cmp	r3, #32
 80055dc:	f040 8083 	bne.w	80056e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_UART_Transmit+0x2e>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e07b      	b.n	80056e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Transmit+0x40>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e074      	b.n	80056e8 <HAL_UART_Transmit+0x12a>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	; 0x21
 8005610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005614:	f7fc ff0a 	bl	800242c <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800562e:	e042      	b.n	80056b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005646:	d122      	bne.n	800568e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2200      	movs	r2, #0
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f9b6 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e042      	b.n	80056e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005674:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3302      	adds	r3, #2
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	e017      	b.n	80056b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3301      	adds	r3, #1
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	e013      	b.n	80056b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f993 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e01f      	b.n	80056e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	60ba      	str	r2, [r7, #8]
 80056ae:	781a      	ldrb	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1b7      	bne.n	8005630 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2200      	movs	r2, #0
 80056c8:	2140      	movs	r1, #64	; 0x40
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f97a 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e006      	b.n	80056e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b20      	cmp	r3, #32
 8005708:	d140      	bne.n	800578c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Receive_IT+0x26>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e039      	b.n	800578e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UART_Receive_IT+0x38>
 8005724:	2302      	movs	r3, #2
 8005726:	e032      	b.n	800578e <HAL_UART_Receive_IT+0x9e>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2222      	movs	r2, #34	; 0x22
 800574c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005766:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0220 	orr.w	r2, r2, #32
 8005786:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_UART_IRQHandler+0x52>
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9d6 	bl	8005b98 <UART_Receive_IT>
      return;
 80057ec:	e0d1      	b.n	8005992 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80b0 	beq.w	8005956 <HAL_UART_IRQHandler+0x1ba>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <HAL_UART_IRQHandler+0x70>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80a5 	beq.w	8005956 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_UART_IRQHandler+0x90>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	f043 0201 	orr.w	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_UART_IRQHandler+0xb0>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	f043 0202 	orr.w	r2, r3, #2
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_UART_IRQHandler+0xd0>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005864:	f043 0204 	orr.w	r2, r3, #4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <HAL_UART_IRQHandler+0xfa>
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <HAL_UART_IRQHandler+0xee>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d078      	beq.n	8005990 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <HAL_UART_IRQHandler+0x11c>
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f970 	bl	8005b98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <HAL_UART_IRQHandler+0x144>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d031      	beq.n	8005944 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8b9 	bl	8005a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d123      	bne.n	800593c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005902:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <HAL_UART_IRQHandler+0x1fc>)
 8005912:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	4618      	mov	r0, r3
 800591a:	f7fd fc3f 	bl	800319c <HAL_DMA_Abort_IT>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d016      	beq.n	8005952 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800592e:	4610      	mov	r0, r2
 8005930:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005932:	e00e      	b.n	8005952 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f83b 	bl	80059b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593a:	e00a      	b.n	8005952 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f837 	bl	80059b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005942:	e006      	b.n	8005952 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f833 	bl	80059b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005950:	e01e      	b.n	8005990 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005952:	bf00      	nop
    return;
 8005954:	e01c      	b.n	8005990 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_UART_IRQHandler+0x1d6>
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8a6 	bl	8005abc <UART_Transmit_IT>
    return;
 8005970:	e00f      	b.n	8005992 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_UART_IRQHandler+0x1f6>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8ee 	bl	8005b68 <UART_EndTransmit_IT>
    return;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005990:	bf00      	nop
  }
}
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	08005a95 	.word	0x08005a95

0800599c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	e02c      	b.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059dc:	d028      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059e4:	f7fc fd22 	bl	800242c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d21d      	bcs.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e00f      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d0c3      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff ff7e 	bl	80059b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b21      	cmp	r3, #33	; 0x21
 8005ace:	d144      	bne.n	8005b5a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d11a      	bne.n	8005b10 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]
 8005b02:	e00e      	b.n	8005b22 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]
 8005b0e:	e008      	b.n	8005b22 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6211      	str	r1, [r2, #32]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e000      	b.n	8005b5c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ff07 	bl	800599c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b22      	cmp	r3, #34	; 0x22
 8005baa:	d171      	bne.n	8005c90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb4:	d123      	bne.n	8005bfe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10e      	bne.n	8005be2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
 8005be0:	e029      	b.n	8005c36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8005bfc:	e01b      	b.n	8005c36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6858      	ldr	r0, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	1c59      	adds	r1, r3, #1
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6291      	str	r1, [r2, #40]	; 0x28
 8005c16:	b2c2      	uxtb	r2, r0
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e00c      	b.n	8005c36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	1c58      	adds	r0, r3, #1
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	6288      	str	r0, [r1, #40]	; 0x28
 8005c2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4619      	mov	r1, r3
 8005c44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d120      	bne.n	8005c8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0220 	bic.w	r2, r2, #32
 8005c58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb ff4c 	bl	8001b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e002      	b.n	8005c92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cde:	f023 030c 	bic.w	r3, r3, #12
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0a:	f040 818b 	bne.w	8006024 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4ac1      	ldr	r2, [pc, #772]	; (8006018 <UART_SetConfig+0x37c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d005      	beq.n	8005d24 <UART_SetConfig+0x88>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4abf      	ldr	r2, [pc, #764]	; (800601c <UART_SetConfig+0x380>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f040 80bd 	bne.w	8005e9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d24:	f7fe ff5a 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 8005d28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	461d      	mov	r5, r3
 8005d2e:	f04f 0600 	mov.w	r6, #0
 8005d32:	46a8      	mov	r8, r5
 8005d34:	46b1      	mov	r9, r6
 8005d36:	eb18 0308 	adds.w	r3, r8, r8
 8005d3a:	eb49 0409 	adc.w	r4, r9, r9
 8005d3e:	4698      	mov	r8, r3
 8005d40:	46a1      	mov	r9, r4
 8005d42:	eb18 0805 	adds.w	r8, r8, r5
 8005d46:	eb49 0906 	adc.w	r9, r9, r6
 8005d4a:	f04f 0100 	mov.w	r1, #0
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d5e:	4688      	mov	r8, r1
 8005d60:	4691      	mov	r9, r2
 8005d62:	eb18 0005 	adds.w	r0, r8, r5
 8005d66:	eb49 0106 	adc.w	r1, r9, r6
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	461d      	mov	r5, r3
 8005d70:	f04f 0600 	mov.w	r6, #0
 8005d74:	196b      	adds	r3, r5, r5
 8005d76:	eb46 0406 	adc.w	r4, r6, r6
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	f7fa fa8f 	bl	80002a0 <__aeabi_uldivmod>
 8005d82:	4603      	mov	r3, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	461a      	mov	r2, r3
 8005d88:	4ba5      	ldr	r3, [pc, #660]	; (8006020 <UART_SetConfig+0x384>)
 8005d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	461d      	mov	r5, r3
 8005d98:	f04f 0600 	mov.w	r6, #0
 8005d9c:	46a9      	mov	r9, r5
 8005d9e:	46b2      	mov	sl, r6
 8005da0:	eb19 0309 	adds.w	r3, r9, r9
 8005da4:	eb4a 040a 	adc.w	r4, sl, sl
 8005da8:	4699      	mov	r9, r3
 8005daa:	46a2      	mov	sl, r4
 8005dac:	eb19 0905 	adds.w	r9, r9, r5
 8005db0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dc8:	4689      	mov	r9, r1
 8005dca:	4692      	mov	sl, r2
 8005dcc:	eb19 0005 	adds.w	r0, r9, r5
 8005dd0:	eb4a 0106 	adc.w	r1, sl, r6
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	461d      	mov	r5, r3
 8005dda:	f04f 0600 	mov.w	r6, #0
 8005dde:	196b      	adds	r3, r5, r5
 8005de0:	eb46 0406 	adc.w	r4, r6, r6
 8005de4:	461a      	mov	r2, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	f7fa fa5a 	bl	80002a0 <__aeabi_uldivmod>
 8005dec:	4603      	mov	r3, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	461a      	mov	r2, r3
 8005df2:	4b8b      	ldr	r3, [pc, #556]	; (8006020 <UART_SetConfig+0x384>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	; 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a86      	ldr	r2, [pc, #536]	; (8006020 <UART_SetConfig+0x384>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e14:	4498      	add	r8, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	461d      	mov	r5, r3
 8005e1a:	f04f 0600 	mov.w	r6, #0
 8005e1e:	46a9      	mov	r9, r5
 8005e20:	46b2      	mov	sl, r6
 8005e22:	eb19 0309 	adds.w	r3, r9, r9
 8005e26:	eb4a 040a 	adc.w	r4, sl, sl
 8005e2a:	4699      	mov	r9, r3
 8005e2c:	46a2      	mov	sl, r4
 8005e2e:	eb19 0905 	adds.w	r9, r9, r5
 8005e32:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e4a:	4689      	mov	r9, r1
 8005e4c:	4692      	mov	sl, r2
 8005e4e:	eb19 0005 	adds.w	r0, r9, r5
 8005e52:	eb4a 0106 	adc.w	r1, sl, r6
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	f04f 0600 	mov.w	r6, #0
 8005e60:	196b      	adds	r3, r5, r5
 8005e62:	eb46 0406 	adc.w	r4, r6, r6
 8005e66:	461a      	mov	r2, r3
 8005e68:	4623      	mov	r3, r4
 8005e6a:	f7fa fa19 	bl	80002a0 <__aeabi_uldivmod>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	460c      	mov	r4, r1
 8005e72:	461a      	mov	r2, r3
 8005e74:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <UART_SetConfig+0x384>)
 8005e76:	fba3 1302 	umull	r1, r3, r3, r2
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	2164      	movs	r1, #100	; 0x64
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	3332      	adds	r3, #50	; 0x32
 8005e88:	4a65      	ldr	r2, [pc, #404]	; (8006020 <UART_SetConfig+0x384>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	f003 0207 	and.w	r2, r3, #7
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4442      	add	r2, r8
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	e26f      	b.n	800637e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fe fe89 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8005ea2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	461d      	mov	r5, r3
 8005ea8:	f04f 0600 	mov.w	r6, #0
 8005eac:	46a8      	mov	r8, r5
 8005eae:	46b1      	mov	r9, r6
 8005eb0:	eb18 0308 	adds.w	r3, r8, r8
 8005eb4:	eb49 0409 	adc.w	r4, r9, r9
 8005eb8:	4698      	mov	r8, r3
 8005eba:	46a1      	mov	r9, r4
 8005ebc:	eb18 0805 	adds.w	r8, r8, r5
 8005ec0:	eb49 0906 	adc.w	r9, r9, r6
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ed0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ed4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ed8:	4688      	mov	r8, r1
 8005eda:	4691      	mov	r9, r2
 8005edc:	eb18 0005 	adds.w	r0, r8, r5
 8005ee0:	eb49 0106 	adc.w	r1, r9, r6
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	461d      	mov	r5, r3
 8005eea:	f04f 0600 	mov.w	r6, #0
 8005eee:	196b      	adds	r3, r5, r5
 8005ef0:	eb46 0406 	adc.w	r4, r6, r6
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	f7fa f9d2 	bl	80002a0 <__aeabi_uldivmod>
 8005efc:	4603      	mov	r3, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	461a      	mov	r2, r3
 8005f02:	4b47      	ldr	r3, [pc, #284]	; (8006020 <UART_SetConfig+0x384>)
 8005f04:	fba3 2302 	umull	r2, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	461d      	mov	r5, r3
 8005f12:	f04f 0600 	mov.w	r6, #0
 8005f16:	46a9      	mov	r9, r5
 8005f18:	46b2      	mov	sl, r6
 8005f1a:	eb19 0309 	adds.w	r3, r9, r9
 8005f1e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f22:	4699      	mov	r9, r3
 8005f24:	46a2      	mov	sl, r4
 8005f26:	eb19 0905 	adds.w	r9, r9, r5
 8005f2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f2e:	f04f 0100 	mov.w	r1, #0
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f42:	4689      	mov	r9, r1
 8005f44:	4692      	mov	sl, r2
 8005f46:	eb19 0005 	adds.w	r0, r9, r5
 8005f4a:	eb4a 0106 	adc.w	r1, sl, r6
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	461d      	mov	r5, r3
 8005f54:	f04f 0600 	mov.w	r6, #0
 8005f58:	196b      	adds	r3, r5, r5
 8005f5a:	eb46 0406 	adc.w	r4, r6, r6
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4623      	mov	r3, r4
 8005f62:	f7fa f99d 	bl	80002a0 <__aeabi_uldivmod>
 8005f66:	4603      	mov	r3, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <UART_SetConfig+0x384>)
 8005f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2164      	movs	r1, #100	; 0x64
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	3332      	adds	r3, #50	; 0x32
 8005f80:	4a27      	ldr	r2, [pc, #156]	; (8006020 <UART_SetConfig+0x384>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f8e:	4498      	add	r8, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	461d      	mov	r5, r3
 8005f94:	f04f 0600 	mov.w	r6, #0
 8005f98:	46a9      	mov	r9, r5
 8005f9a:	46b2      	mov	sl, r6
 8005f9c:	eb19 0309 	adds.w	r3, r9, r9
 8005fa0:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa4:	4699      	mov	r9, r3
 8005fa6:	46a2      	mov	sl, r4
 8005fa8:	eb19 0905 	adds.w	r9, r9, r5
 8005fac:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	4692      	mov	sl, r2
 8005fc8:	eb19 0005 	adds.w	r0, r9, r5
 8005fcc:	eb4a 0106 	adc.w	r1, sl, r6
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	461d      	mov	r5, r3
 8005fd6:	f04f 0600 	mov.w	r6, #0
 8005fda:	196b      	adds	r3, r5, r5
 8005fdc:	eb46 0406 	adc.w	r4, r6, r6
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	f7fa f95c 	bl	80002a0 <__aeabi_uldivmod>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <UART_SetConfig+0x384>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a07      	ldr	r2, [pc, #28]	; (8006020 <UART_SetConfig+0x384>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 0207 	and.w	r2, r3, #7
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4442      	add	r2, r8
 8006014:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006016:	e1b2      	b.n	800637e <UART_SetConfig+0x6e2>
 8006018:	40011000 	.word	0x40011000
 800601c:	40011400 	.word	0x40011400
 8006020:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4ad7      	ldr	r2, [pc, #860]	; (8006388 <UART_SetConfig+0x6ec>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d005      	beq.n	800603a <UART_SetConfig+0x39e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4ad6      	ldr	r2, [pc, #856]	; (800638c <UART_SetConfig+0x6f0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	f040 80d1 	bne.w	80061dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800603a:	f7fe fdcf 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 800603e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	469a      	mov	sl, r3
 8006044:	f04f 0b00 	mov.w	fp, #0
 8006048:	46d0      	mov	r8, sl
 800604a:	46d9      	mov	r9, fp
 800604c:	eb18 0308 	adds.w	r3, r8, r8
 8006050:	eb49 0409 	adc.w	r4, r9, r9
 8006054:	4698      	mov	r8, r3
 8006056:	46a1      	mov	r9, r4
 8006058:	eb18 080a 	adds.w	r8, r8, sl
 800605c:	eb49 090b 	adc.w	r9, r9, fp
 8006060:	f04f 0100 	mov.w	r1, #0
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800606c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006070:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006074:	4688      	mov	r8, r1
 8006076:	4691      	mov	r9, r2
 8006078:	eb1a 0508 	adds.w	r5, sl, r8
 800607c:	eb4b 0609 	adc.w	r6, fp, r9
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4619      	mov	r1, r3
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	f04f 0400 	mov.w	r4, #0
 8006092:	0094      	lsls	r4, r2, #2
 8006094:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006098:	008b      	lsls	r3, r1, #2
 800609a:	461a      	mov	r2, r3
 800609c:	4623      	mov	r3, r4
 800609e:	4628      	mov	r0, r5
 80060a0:	4631      	mov	r1, r6
 80060a2:	f7fa f8fd 	bl	80002a0 <__aeabi_uldivmod>
 80060a6:	4603      	mov	r3, r0
 80060a8:	460c      	mov	r4, r1
 80060aa:	461a      	mov	r2, r3
 80060ac:	4bb8      	ldr	r3, [pc, #736]	; (8006390 <UART_SetConfig+0x6f4>)
 80060ae:	fba3 2302 	umull	r2, r3, r3, r2
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	469b      	mov	fp, r3
 80060bc:	f04f 0c00 	mov.w	ip, #0
 80060c0:	46d9      	mov	r9, fp
 80060c2:	46e2      	mov	sl, ip
 80060c4:	eb19 0309 	adds.w	r3, r9, r9
 80060c8:	eb4a 040a 	adc.w	r4, sl, sl
 80060cc:	4699      	mov	r9, r3
 80060ce:	46a2      	mov	sl, r4
 80060d0:	eb19 090b 	adds.w	r9, r9, fp
 80060d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060ec:	4689      	mov	r9, r1
 80060ee:	4692      	mov	sl, r2
 80060f0:	eb1b 0509 	adds.w	r5, fp, r9
 80060f4:	eb4c 060a 	adc.w	r6, ip, sl
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4619      	mov	r1, r3
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	f04f 0400 	mov.w	r4, #0
 800610a:	0094      	lsls	r4, r2, #2
 800610c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006110:	008b      	lsls	r3, r1, #2
 8006112:	461a      	mov	r2, r3
 8006114:	4623      	mov	r3, r4
 8006116:	4628      	mov	r0, r5
 8006118:	4631      	mov	r1, r6
 800611a:	f7fa f8c1 	bl	80002a0 <__aeabi_uldivmod>
 800611e:	4603      	mov	r3, r0
 8006120:	460c      	mov	r4, r1
 8006122:	461a      	mov	r2, r3
 8006124:	4b9a      	ldr	r3, [pc, #616]	; (8006390 <UART_SetConfig+0x6f4>)
 8006126:	fba3 1302 	umull	r1, r3, r3, r2
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	2164      	movs	r1, #100	; 0x64
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	3332      	adds	r3, #50	; 0x32
 8006138:	4a95      	ldr	r2, [pc, #596]	; (8006390 <UART_SetConfig+0x6f4>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006144:	4498      	add	r8, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	469b      	mov	fp, r3
 800614a:	f04f 0c00 	mov.w	ip, #0
 800614e:	46d9      	mov	r9, fp
 8006150:	46e2      	mov	sl, ip
 8006152:	eb19 0309 	adds.w	r3, r9, r9
 8006156:	eb4a 040a 	adc.w	r4, sl, sl
 800615a:	4699      	mov	r9, r3
 800615c:	46a2      	mov	sl, r4
 800615e:	eb19 090b 	adds.w	r9, r9, fp
 8006162:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006172:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006176:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800617a:	4689      	mov	r9, r1
 800617c:	4692      	mov	sl, r2
 800617e:	eb1b 0509 	adds.w	r5, fp, r9
 8006182:	eb4c 060a 	adc.w	r6, ip, sl
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4619      	mov	r1, r3
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	f04f 0400 	mov.w	r4, #0
 8006198:	0094      	lsls	r4, r2, #2
 800619a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800619e:	008b      	lsls	r3, r1, #2
 80061a0:	461a      	mov	r2, r3
 80061a2:	4623      	mov	r3, r4
 80061a4:	4628      	mov	r0, r5
 80061a6:	4631      	mov	r1, r6
 80061a8:	f7fa f87a 	bl	80002a0 <__aeabi_uldivmod>
 80061ac:	4603      	mov	r3, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b77      	ldr	r3, [pc, #476]	; (8006390 <UART_SetConfig+0x6f4>)
 80061b4:	fba3 1302 	umull	r1, r3, r3, r2
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	2164      	movs	r1, #100	; 0x64
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	3332      	adds	r3, #50	; 0x32
 80061c6:	4a72      	ldr	r2, [pc, #456]	; (8006390 <UART_SetConfig+0x6f4>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4442      	add	r2, r8
 80061d8:	609a      	str	r2, [r3, #8]
 80061da:	e0d0      	b.n	800637e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061dc:	f7fe fcea 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 80061e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	469a      	mov	sl, r3
 80061e6:	f04f 0b00 	mov.w	fp, #0
 80061ea:	46d0      	mov	r8, sl
 80061ec:	46d9      	mov	r9, fp
 80061ee:	eb18 0308 	adds.w	r3, r8, r8
 80061f2:	eb49 0409 	adc.w	r4, r9, r9
 80061f6:	4698      	mov	r8, r3
 80061f8:	46a1      	mov	r9, r4
 80061fa:	eb18 080a 	adds.w	r8, r8, sl
 80061fe:	eb49 090b 	adc.w	r9, r9, fp
 8006202:	f04f 0100 	mov.w	r1, #0
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800620e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006212:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006216:	4688      	mov	r8, r1
 8006218:	4691      	mov	r9, r2
 800621a:	eb1a 0508 	adds.w	r5, sl, r8
 800621e:	eb4b 0609 	adc.w	r6, fp, r9
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4619      	mov	r1, r3
 8006228:	f04f 0200 	mov.w	r2, #0
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	f04f 0400 	mov.w	r4, #0
 8006234:	0094      	lsls	r4, r2, #2
 8006236:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800623a:	008b      	lsls	r3, r1, #2
 800623c:	461a      	mov	r2, r3
 800623e:	4623      	mov	r3, r4
 8006240:	4628      	mov	r0, r5
 8006242:	4631      	mov	r1, r6
 8006244:	f7fa f82c 	bl	80002a0 <__aeabi_uldivmod>
 8006248:	4603      	mov	r3, r0
 800624a:	460c      	mov	r4, r1
 800624c:	461a      	mov	r2, r3
 800624e:	4b50      	ldr	r3, [pc, #320]	; (8006390 <UART_SetConfig+0x6f4>)
 8006250:	fba3 2302 	umull	r2, r3, r3, r2
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	469b      	mov	fp, r3
 800625e:	f04f 0c00 	mov.w	ip, #0
 8006262:	46d9      	mov	r9, fp
 8006264:	46e2      	mov	sl, ip
 8006266:	eb19 0309 	adds.w	r3, r9, r9
 800626a:	eb4a 040a 	adc.w	r4, sl, sl
 800626e:	4699      	mov	r9, r3
 8006270:	46a2      	mov	sl, r4
 8006272:	eb19 090b 	adds.w	r9, r9, fp
 8006276:	eb4a 0a0c 	adc.w	sl, sl, ip
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800628a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800628e:	4689      	mov	r9, r1
 8006290:	4692      	mov	sl, r2
 8006292:	eb1b 0509 	adds.w	r5, fp, r9
 8006296:	eb4c 060a 	adc.w	r6, ip, sl
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	f04f 0400 	mov.w	r4, #0
 80062ac:	0094      	lsls	r4, r2, #2
 80062ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4623      	mov	r3, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	4631      	mov	r1, r6
 80062bc:	f7f9 fff0 	bl	80002a0 <__aeabi_uldivmod>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b32      	ldr	r3, [pc, #200]	; (8006390 <UART_SetConfig+0x6f4>)
 80062c8:	fba3 1302 	umull	r1, r3, r3, r2
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	2164      	movs	r1, #100	; 0x64
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	3332      	adds	r3, #50	; 0x32
 80062da:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <UART_SetConfig+0x6f4>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e6:	4498      	add	r8, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	469b      	mov	fp, r3
 80062ec:	f04f 0c00 	mov.w	ip, #0
 80062f0:	46d9      	mov	r9, fp
 80062f2:	46e2      	mov	sl, ip
 80062f4:	eb19 0309 	adds.w	r3, r9, r9
 80062f8:	eb4a 040a 	adc.w	r4, sl, sl
 80062fc:	4699      	mov	r9, r3
 80062fe:	46a2      	mov	sl, r4
 8006300:	eb19 090b 	adds.w	r9, r9, fp
 8006304:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006314:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006318:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800631c:	4689      	mov	r9, r1
 800631e:	4692      	mov	sl, r2
 8006320:	eb1b 0509 	adds.w	r5, fp, r9
 8006324:	eb4c 060a 	adc.w	r6, ip, sl
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4619      	mov	r1, r3
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	f04f 0400 	mov.w	r4, #0
 800633a:	0094      	lsls	r4, r2, #2
 800633c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006340:	008b      	lsls	r3, r1, #2
 8006342:	461a      	mov	r2, r3
 8006344:	4623      	mov	r3, r4
 8006346:	4628      	mov	r0, r5
 8006348:	4631      	mov	r1, r6
 800634a:	f7f9 ffa9 	bl	80002a0 <__aeabi_uldivmod>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	461a      	mov	r2, r3
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <UART_SetConfig+0x6f4>)
 8006356:	fba3 1302 	umull	r1, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2164      	movs	r1, #100	; 0x64
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	3332      	adds	r3, #50	; 0x32
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <UART_SetConfig+0x6f4>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4442      	add	r2, r8
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	e7ff      	b.n	800637e <UART_SetConfig+0x6e2>
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	40011000 	.word	0x40011000
 800638c:	40011400 	.word	0x40011400
 8006390:	51eb851f 	.word	0x51eb851f

08006394 <atoi>:
 8006394:	220a      	movs	r2, #10
 8006396:	2100      	movs	r1, #0
 8006398:	f000 b8ec 	b.w	8006574 <strtol>

0800639c <__errno>:
 800639c:	4b01      	ldr	r3, [pc, #4]	; (80063a4 <__errno+0x8>)
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000104 	.word	0x20000104

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4e0d      	ldr	r6, [pc, #52]	; (80063e0 <__libc_init_array+0x38>)
 80063ac:	4c0d      	ldr	r4, [pc, #52]	; (80063e4 <__libc_init_array+0x3c>)
 80063ae:	1ba4      	subs	r4, r4, r6
 80063b0:	10a4      	asrs	r4, r4, #2
 80063b2:	2500      	movs	r5, #0
 80063b4:	42a5      	cmp	r5, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	4e0b      	ldr	r6, [pc, #44]	; (80063e8 <__libc_init_array+0x40>)
 80063ba:	4c0c      	ldr	r4, [pc, #48]	; (80063ec <__libc_init_array+0x44>)
 80063bc:	f000 fd08 	bl	8006dd0 <_init>
 80063c0:	1ba4      	subs	r4, r4, r6
 80063c2:	10a4      	asrs	r4, r4, #2
 80063c4:	2500      	movs	r5, #0
 80063c6:	42a5      	cmp	r5, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063d0:	4798      	blx	r3
 80063d2:	3501      	adds	r5, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063da:	4798      	blx	r3
 80063dc:	3501      	adds	r5, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	08007048 	.word	0x08007048
 80063e4:	08007048 	.word	0x08007048
 80063e8:	08007048 	.word	0x08007048
 80063ec:	0800704c 	.word	0x0800704c

080063f0 <memset>:
 80063f0:	4402      	add	r2, r0
 80063f2:	4603      	mov	r3, r0
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d100      	bne.n	80063fa <memset+0xa>
 80063f8:	4770      	bx	lr
 80063fa:	f803 1b01 	strb.w	r1, [r3], #1
 80063fe:	e7f9      	b.n	80063f4 <memset+0x4>

08006400 <siprintf>:
 8006400:	b40e      	push	{r1, r2, r3}
 8006402:	b500      	push	{lr}
 8006404:	b09c      	sub	sp, #112	; 0x70
 8006406:	ab1d      	add	r3, sp, #116	; 0x74
 8006408:	9002      	str	r0, [sp, #8]
 800640a:	9006      	str	r0, [sp, #24]
 800640c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006410:	4809      	ldr	r0, [pc, #36]	; (8006438 <siprintf+0x38>)
 8006412:	9107      	str	r1, [sp, #28]
 8006414:	9104      	str	r1, [sp, #16]
 8006416:	4909      	ldr	r1, [pc, #36]	; (800643c <siprintf+0x3c>)
 8006418:	f853 2b04 	ldr.w	r2, [r3], #4
 800641c:	9105      	str	r1, [sp, #20]
 800641e:	6800      	ldr	r0, [r0, #0]
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	a902      	add	r1, sp, #8
 8006424:	f000 f93a 	bl	800669c <_svfiprintf_r>
 8006428:	9b02      	ldr	r3, [sp, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	b01c      	add	sp, #112	; 0x70
 8006430:	f85d eb04 	ldr.w	lr, [sp], #4
 8006434:	b003      	add	sp, #12
 8006436:	4770      	bx	lr
 8006438:	20000104 	.word	0x20000104
 800643c:	ffff0208 	.word	0xffff0208

08006440 <strcasecmp>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	f816 4b01 	ldrb.w	r4, [r6], #1
 800644a:	f000 f8ad 	bl	80065a8 <__locale_ctype_ptr>
 800644e:	4420      	add	r0, r4
 8006450:	f817 5b01 	ldrb.w	r5, [r7], #1
 8006454:	7843      	ldrb	r3, [r0, #1]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	2b01      	cmp	r3, #1
 800645c:	bf08      	it	eq
 800645e:	3420      	addeq	r4, #32
 8006460:	f000 f8a2 	bl	80065a8 <__locale_ctype_ptr>
 8006464:	4428      	add	r0, r5
 8006466:	7842      	ldrb	r2, [r0, #1]
 8006468:	f002 0203 	and.w	r2, r2, #3
 800646c:	2a01      	cmp	r2, #1
 800646e:	bf08      	it	eq
 8006470:	3520      	addeq	r5, #32
 8006472:	1b60      	subs	r0, r4, r5
 8006474:	d101      	bne.n	800647a <strcasecmp+0x3a>
 8006476:	2d00      	cmp	r5, #0
 8006478:	d1e5      	bne.n	8006446 <strcasecmp+0x6>
 800647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800647c <_strtol_l.isra.0>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	4680      	mov	r8, r0
 8006482:	4689      	mov	r9, r1
 8006484:	4692      	mov	sl, r2
 8006486:	461e      	mov	r6, r3
 8006488:	460f      	mov	r7, r1
 800648a:	463d      	mov	r5, r7
 800648c:	9808      	ldr	r0, [sp, #32]
 800648e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006492:	f000 f885 	bl	80065a0 <__locale_ctype_ptr_l>
 8006496:	4420      	add	r0, r4
 8006498:	7843      	ldrb	r3, [r0, #1]
 800649a:	f013 0308 	ands.w	r3, r3, #8
 800649e:	d132      	bne.n	8006506 <_strtol_l.isra.0+0x8a>
 80064a0:	2c2d      	cmp	r4, #45	; 0x2d
 80064a2:	d132      	bne.n	800650a <_strtol_l.isra.0+0x8e>
 80064a4:	787c      	ldrb	r4, [r7, #1]
 80064a6:	1cbd      	adds	r5, r7, #2
 80064a8:	2201      	movs	r2, #1
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	d05d      	beq.n	800656a <_strtol_l.isra.0+0xee>
 80064ae:	2e10      	cmp	r6, #16
 80064b0:	d109      	bne.n	80064c6 <_strtol_l.isra.0+0x4a>
 80064b2:	2c30      	cmp	r4, #48	; 0x30
 80064b4:	d107      	bne.n	80064c6 <_strtol_l.isra.0+0x4a>
 80064b6:	782b      	ldrb	r3, [r5, #0]
 80064b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064bc:	2b58      	cmp	r3, #88	; 0x58
 80064be:	d14f      	bne.n	8006560 <_strtol_l.isra.0+0xe4>
 80064c0:	786c      	ldrb	r4, [r5, #1]
 80064c2:	2610      	movs	r6, #16
 80064c4:	3502      	adds	r5, #2
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	bf14      	ite	ne
 80064ca:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80064ce:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80064d2:	2700      	movs	r7, #0
 80064d4:	fbb1 fcf6 	udiv	ip, r1, r6
 80064d8:	4638      	mov	r0, r7
 80064da:	fb06 1e1c 	mls	lr, r6, ip, r1
 80064de:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d817      	bhi.n	8006516 <_strtol_l.isra.0+0x9a>
 80064e6:	461c      	mov	r4, r3
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	dd23      	ble.n	8006534 <_strtol_l.isra.0+0xb8>
 80064ec:	1c7b      	adds	r3, r7, #1
 80064ee:	d007      	beq.n	8006500 <_strtol_l.isra.0+0x84>
 80064f0:	4584      	cmp	ip, r0
 80064f2:	d31c      	bcc.n	800652e <_strtol_l.isra.0+0xb2>
 80064f4:	d101      	bne.n	80064fa <_strtol_l.isra.0+0x7e>
 80064f6:	45a6      	cmp	lr, r4
 80064f8:	db19      	blt.n	800652e <_strtol_l.isra.0+0xb2>
 80064fa:	fb00 4006 	mla	r0, r0, r6, r4
 80064fe:	2701      	movs	r7, #1
 8006500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006504:	e7eb      	b.n	80064de <_strtol_l.isra.0+0x62>
 8006506:	462f      	mov	r7, r5
 8006508:	e7bf      	b.n	800648a <_strtol_l.isra.0+0xe>
 800650a:	2c2b      	cmp	r4, #43	; 0x2b
 800650c:	bf04      	itt	eq
 800650e:	1cbd      	addeq	r5, r7, #2
 8006510:	787c      	ldrbeq	r4, [r7, #1]
 8006512:	461a      	mov	r2, r3
 8006514:	e7c9      	b.n	80064aa <_strtol_l.isra.0+0x2e>
 8006516:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800651a:	2b19      	cmp	r3, #25
 800651c:	d801      	bhi.n	8006522 <_strtol_l.isra.0+0xa6>
 800651e:	3c37      	subs	r4, #55	; 0x37
 8006520:	e7e2      	b.n	80064e8 <_strtol_l.isra.0+0x6c>
 8006522:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006526:	2b19      	cmp	r3, #25
 8006528:	d804      	bhi.n	8006534 <_strtol_l.isra.0+0xb8>
 800652a:	3c57      	subs	r4, #87	; 0x57
 800652c:	e7dc      	b.n	80064e8 <_strtol_l.isra.0+0x6c>
 800652e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006532:	e7e5      	b.n	8006500 <_strtol_l.isra.0+0x84>
 8006534:	1c7b      	adds	r3, r7, #1
 8006536:	d108      	bne.n	800654a <_strtol_l.isra.0+0xce>
 8006538:	2322      	movs	r3, #34	; 0x22
 800653a:	f8c8 3000 	str.w	r3, [r8]
 800653e:	4608      	mov	r0, r1
 8006540:	f1ba 0f00 	cmp.w	sl, #0
 8006544:	d107      	bne.n	8006556 <_strtol_l.isra.0+0xda>
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	b102      	cbz	r2, 800654e <_strtol_l.isra.0+0xd2>
 800654c:	4240      	negs	r0, r0
 800654e:	f1ba 0f00 	cmp.w	sl, #0
 8006552:	d0f8      	beq.n	8006546 <_strtol_l.isra.0+0xca>
 8006554:	b10f      	cbz	r7, 800655a <_strtol_l.isra.0+0xde>
 8006556:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800655a:	f8ca 9000 	str.w	r9, [sl]
 800655e:	e7f2      	b.n	8006546 <_strtol_l.isra.0+0xca>
 8006560:	2430      	movs	r4, #48	; 0x30
 8006562:	2e00      	cmp	r6, #0
 8006564:	d1af      	bne.n	80064c6 <_strtol_l.isra.0+0x4a>
 8006566:	2608      	movs	r6, #8
 8006568:	e7ad      	b.n	80064c6 <_strtol_l.isra.0+0x4a>
 800656a:	2c30      	cmp	r4, #48	; 0x30
 800656c:	d0a3      	beq.n	80064b6 <_strtol_l.isra.0+0x3a>
 800656e:	260a      	movs	r6, #10
 8006570:	e7a9      	b.n	80064c6 <_strtol_l.isra.0+0x4a>
	...

08006574 <strtol>:
 8006574:	4b08      	ldr	r3, [pc, #32]	; (8006598 <strtol+0x24>)
 8006576:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006578:	681c      	ldr	r4, [r3, #0]
 800657a:	4d08      	ldr	r5, [pc, #32]	; (800659c <strtol+0x28>)
 800657c:	6a23      	ldr	r3, [r4, #32]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf08      	it	eq
 8006582:	462b      	moveq	r3, r5
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4613      	mov	r3, r2
 8006588:	460a      	mov	r2, r1
 800658a:	4601      	mov	r1, r0
 800658c:	4620      	mov	r0, r4
 800658e:	f7ff ff75 	bl	800647c <_strtol_l.isra.0>
 8006592:	b003      	add	sp, #12
 8006594:	bd30      	pop	{r4, r5, pc}
 8006596:	bf00      	nop
 8006598:	20000104 	.word	0x20000104
 800659c:	20000168 	.word	0x20000168

080065a0 <__locale_ctype_ptr_l>:
 80065a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80065a4:	4770      	bx	lr
	...

080065a8 <__locale_ctype_ptr>:
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <__locale_ctype_ptr+0x14>)
 80065aa:	4a05      	ldr	r2, [pc, #20]	; (80065c0 <__locale_ctype_ptr+0x18>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf08      	it	eq
 80065b4:	4613      	moveq	r3, r2
 80065b6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80065ba:	4770      	bx	lr
 80065bc:	20000104 	.word	0x20000104
 80065c0:	20000168 	.word	0x20000168

080065c4 <__ascii_mbtowc>:
 80065c4:	b082      	sub	sp, #8
 80065c6:	b901      	cbnz	r1, 80065ca <__ascii_mbtowc+0x6>
 80065c8:	a901      	add	r1, sp, #4
 80065ca:	b142      	cbz	r2, 80065de <__ascii_mbtowc+0x1a>
 80065cc:	b14b      	cbz	r3, 80065e2 <__ascii_mbtowc+0x1e>
 80065ce:	7813      	ldrb	r3, [r2, #0]
 80065d0:	600b      	str	r3, [r1, #0]
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	1c10      	adds	r0, r2, #0
 80065d6:	bf18      	it	ne
 80065d8:	2001      	movne	r0, #1
 80065da:	b002      	add	sp, #8
 80065dc:	4770      	bx	lr
 80065de:	4610      	mov	r0, r2
 80065e0:	e7fb      	b.n	80065da <__ascii_mbtowc+0x16>
 80065e2:	f06f 0001 	mvn.w	r0, #1
 80065e6:	e7f8      	b.n	80065da <__ascii_mbtowc+0x16>

080065e8 <__ssputs_r>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	688e      	ldr	r6, [r1, #8]
 80065ee:	429e      	cmp	r6, r3
 80065f0:	4682      	mov	sl, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4690      	mov	r8, r2
 80065f6:	4699      	mov	r9, r3
 80065f8:	d837      	bhi.n	800666a <__ssputs_r+0x82>
 80065fa:	898a      	ldrh	r2, [r1, #12]
 80065fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006600:	d031      	beq.n	8006666 <__ssputs_r+0x7e>
 8006602:	6825      	ldr	r5, [r4, #0]
 8006604:	6909      	ldr	r1, [r1, #16]
 8006606:	1a6f      	subs	r7, r5, r1
 8006608:	6965      	ldr	r5, [r4, #20]
 800660a:	2302      	movs	r3, #2
 800660c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006610:	fb95 f5f3 	sdiv	r5, r5, r3
 8006614:	f109 0301 	add.w	r3, r9, #1
 8006618:	443b      	add	r3, r7
 800661a:	429d      	cmp	r5, r3
 800661c:	bf38      	it	cc
 800661e:	461d      	movcc	r5, r3
 8006620:	0553      	lsls	r3, r2, #21
 8006622:	d530      	bpl.n	8006686 <__ssputs_r+0x9e>
 8006624:	4629      	mov	r1, r5
 8006626:	f000 fb39 	bl	8006c9c <_malloc_r>
 800662a:	4606      	mov	r6, r0
 800662c:	b950      	cbnz	r0, 8006644 <__ssputs_r+0x5c>
 800662e:	230c      	movs	r3, #12
 8006630:	f8ca 3000 	str.w	r3, [sl]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	463a      	mov	r2, r7
 8006646:	6921      	ldr	r1, [r4, #16]
 8006648:	f000 fab5 	bl	8006bb6 <memcpy>
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	6126      	str	r6, [r4, #16]
 800665a:	6165      	str	r5, [r4, #20]
 800665c:	443e      	add	r6, r7
 800665e:	1bed      	subs	r5, r5, r7
 8006660:	6026      	str	r6, [r4, #0]
 8006662:	60a5      	str	r5, [r4, #8]
 8006664:	464e      	mov	r6, r9
 8006666:	454e      	cmp	r6, r9
 8006668:	d900      	bls.n	800666c <__ssputs_r+0x84>
 800666a:	464e      	mov	r6, r9
 800666c:	4632      	mov	r2, r6
 800666e:	4641      	mov	r1, r8
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	f000 faab 	bl	8006bcc <memmove>
 8006676:	68a3      	ldr	r3, [r4, #8]
 8006678:	1b9b      	subs	r3, r3, r6
 800667a:	60a3      	str	r3, [r4, #8]
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	441e      	add	r6, r3
 8006680:	6026      	str	r6, [r4, #0]
 8006682:	2000      	movs	r0, #0
 8006684:	e7dc      	b.n	8006640 <__ssputs_r+0x58>
 8006686:	462a      	mov	r2, r5
 8006688:	f000 fb62 	bl	8006d50 <_realloc_r>
 800668c:	4606      	mov	r6, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	d1e2      	bne.n	8006658 <__ssputs_r+0x70>
 8006692:	6921      	ldr	r1, [r4, #16]
 8006694:	4650      	mov	r0, sl
 8006696:	f000 fab3 	bl	8006c00 <_free_r>
 800669a:	e7c8      	b.n	800662e <__ssputs_r+0x46>

0800669c <_svfiprintf_r>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	461d      	mov	r5, r3
 80066a2:	898b      	ldrh	r3, [r1, #12]
 80066a4:	061f      	lsls	r7, r3, #24
 80066a6:	b09d      	sub	sp, #116	; 0x74
 80066a8:	4680      	mov	r8, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4616      	mov	r6, r2
 80066ae:	d50f      	bpl.n	80066d0 <_svfiprintf_r+0x34>
 80066b0:	690b      	ldr	r3, [r1, #16]
 80066b2:	b96b      	cbnz	r3, 80066d0 <_svfiprintf_r+0x34>
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	f000 faf1 	bl	8006c9c <_malloc_r>
 80066ba:	6020      	str	r0, [r4, #0]
 80066bc:	6120      	str	r0, [r4, #16]
 80066be:	b928      	cbnz	r0, 80066cc <_svfiprintf_r+0x30>
 80066c0:	230c      	movs	r3, #12
 80066c2:	f8c8 3000 	str.w	r3, [r8]
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ca:	e0c8      	b.n	800685e <_svfiprintf_r+0x1c2>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	6163      	str	r3, [r4, #20]
 80066d0:	2300      	movs	r3, #0
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
 80066d4:	2320      	movs	r3, #32
 80066d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066da:	2330      	movs	r3, #48	; 0x30
 80066dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066e0:	9503      	str	r5, [sp, #12]
 80066e2:	f04f 0b01 	mov.w	fp, #1
 80066e6:	4637      	mov	r7, r6
 80066e8:	463d      	mov	r5, r7
 80066ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066ee:	b10b      	cbz	r3, 80066f4 <_svfiprintf_r+0x58>
 80066f0:	2b25      	cmp	r3, #37	; 0x25
 80066f2:	d13e      	bne.n	8006772 <_svfiprintf_r+0xd6>
 80066f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80066f8:	d00b      	beq.n	8006712 <_svfiprintf_r+0x76>
 80066fa:	4653      	mov	r3, sl
 80066fc:	4632      	mov	r2, r6
 80066fe:	4621      	mov	r1, r4
 8006700:	4640      	mov	r0, r8
 8006702:	f7ff ff71 	bl	80065e8 <__ssputs_r>
 8006706:	3001      	adds	r0, #1
 8006708:	f000 80a4 	beq.w	8006854 <_svfiprintf_r+0x1b8>
 800670c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670e:	4453      	add	r3, sl
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
 8006712:	783b      	ldrb	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 809d 	beq.w	8006854 <_svfiprintf_r+0x1b8>
 800671a:	2300      	movs	r3, #0
 800671c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	9307      	str	r3, [sp, #28]
 8006728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800672c:	931a      	str	r3, [sp, #104]	; 0x68
 800672e:	462f      	mov	r7, r5
 8006730:	2205      	movs	r2, #5
 8006732:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006736:	4850      	ldr	r0, [pc, #320]	; (8006878 <_svfiprintf_r+0x1dc>)
 8006738:	f7f9 fd62 	bl	8000200 <memchr>
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	b9d0      	cbnz	r0, 8006776 <_svfiprintf_r+0xda>
 8006740:	06d9      	lsls	r1, r3, #27
 8006742:	bf44      	itt	mi
 8006744:	2220      	movmi	r2, #32
 8006746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800674a:	071a      	lsls	r2, r3, #28
 800674c:	bf44      	itt	mi
 800674e:	222b      	movmi	r2, #43	; 0x2b
 8006750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006754:	782a      	ldrb	r2, [r5, #0]
 8006756:	2a2a      	cmp	r2, #42	; 0x2a
 8006758:	d015      	beq.n	8006786 <_svfiprintf_r+0xea>
 800675a:	9a07      	ldr	r2, [sp, #28]
 800675c:	462f      	mov	r7, r5
 800675e:	2000      	movs	r0, #0
 8006760:	250a      	movs	r5, #10
 8006762:	4639      	mov	r1, r7
 8006764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006768:	3b30      	subs	r3, #48	; 0x30
 800676a:	2b09      	cmp	r3, #9
 800676c:	d94d      	bls.n	800680a <_svfiprintf_r+0x16e>
 800676e:	b1b8      	cbz	r0, 80067a0 <_svfiprintf_r+0x104>
 8006770:	e00f      	b.n	8006792 <_svfiprintf_r+0xf6>
 8006772:	462f      	mov	r7, r5
 8006774:	e7b8      	b.n	80066e8 <_svfiprintf_r+0x4c>
 8006776:	4a40      	ldr	r2, [pc, #256]	; (8006878 <_svfiprintf_r+0x1dc>)
 8006778:	1a80      	subs	r0, r0, r2
 800677a:	fa0b f000 	lsl.w	r0, fp, r0
 800677e:	4318      	orrs	r0, r3
 8006780:	9004      	str	r0, [sp, #16]
 8006782:	463d      	mov	r5, r7
 8006784:	e7d3      	b.n	800672e <_svfiprintf_r+0x92>
 8006786:	9a03      	ldr	r2, [sp, #12]
 8006788:	1d11      	adds	r1, r2, #4
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	9103      	str	r1, [sp, #12]
 800678e:	2a00      	cmp	r2, #0
 8006790:	db01      	blt.n	8006796 <_svfiprintf_r+0xfa>
 8006792:	9207      	str	r2, [sp, #28]
 8006794:	e004      	b.n	80067a0 <_svfiprintf_r+0x104>
 8006796:	4252      	negs	r2, r2
 8006798:	f043 0302 	orr.w	r3, r3, #2
 800679c:	9207      	str	r2, [sp, #28]
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	783b      	ldrb	r3, [r7, #0]
 80067a2:	2b2e      	cmp	r3, #46	; 0x2e
 80067a4:	d10c      	bne.n	80067c0 <_svfiprintf_r+0x124>
 80067a6:	787b      	ldrb	r3, [r7, #1]
 80067a8:	2b2a      	cmp	r3, #42	; 0x2a
 80067aa:	d133      	bne.n	8006814 <_svfiprintf_r+0x178>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	9203      	str	r2, [sp, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfb8      	it	lt
 80067b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067bc:	3702      	adds	r7, #2
 80067be:	9305      	str	r3, [sp, #20]
 80067c0:	4d2e      	ldr	r5, [pc, #184]	; (800687c <_svfiprintf_r+0x1e0>)
 80067c2:	7839      	ldrb	r1, [r7, #0]
 80067c4:	2203      	movs	r2, #3
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7f9 fd1a 	bl	8000200 <memchr>
 80067cc:	b138      	cbz	r0, 80067de <_svfiprintf_r+0x142>
 80067ce:	2340      	movs	r3, #64	; 0x40
 80067d0:	1b40      	subs	r0, r0, r5
 80067d2:	fa03 f000 	lsl.w	r0, r3, r0
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	4303      	orrs	r3, r0
 80067da:	3701      	adds	r7, #1
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	7839      	ldrb	r1, [r7, #0]
 80067e0:	4827      	ldr	r0, [pc, #156]	; (8006880 <_svfiprintf_r+0x1e4>)
 80067e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e6:	2206      	movs	r2, #6
 80067e8:	1c7e      	adds	r6, r7, #1
 80067ea:	f7f9 fd09 	bl	8000200 <memchr>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d038      	beq.n	8006864 <_svfiprintf_r+0x1c8>
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <_svfiprintf_r+0x1e8>)
 80067f4:	bb13      	cbnz	r3, 800683c <_svfiprintf_r+0x1a0>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	3308      	adds	r3, #8
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	444b      	add	r3, r9
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e76d      	b.n	80066e6 <_svfiprintf_r+0x4a>
 800680a:	fb05 3202 	mla	r2, r5, r2, r3
 800680e:	2001      	movs	r0, #1
 8006810:	460f      	mov	r7, r1
 8006812:	e7a6      	b.n	8006762 <_svfiprintf_r+0xc6>
 8006814:	2300      	movs	r3, #0
 8006816:	3701      	adds	r7, #1
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	4619      	mov	r1, r3
 800681c:	250a      	movs	r5, #10
 800681e:	4638      	mov	r0, r7
 8006820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006824:	3a30      	subs	r2, #48	; 0x30
 8006826:	2a09      	cmp	r2, #9
 8006828:	d903      	bls.n	8006832 <_svfiprintf_r+0x196>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0c8      	beq.n	80067c0 <_svfiprintf_r+0x124>
 800682e:	9105      	str	r1, [sp, #20]
 8006830:	e7c6      	b.n	80067c0 <_svfiprintf_r+0x124>
 8006832:	fb05 2101 	mla	r1, r5, r1, r2
 8006836:	2301      	movs	r3, #1
 8006838:	4607      	mov	r7, r0
 800683a:	e7f0      	b.n	800681e <_svfiprintf_r+0x182>
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	4622      	mov	r2, r4
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <_svfiprintf_r+0x1ec>)
 8006844:	a904      	add	r1, sp, #16
 8006846:	4640      	mov	r0, r8
 8006848:	f3af 8000 	nop.w
 800684c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006850:	4681      	mov	r9, r0
 8006852:	d1d6      	bne.n	8006802 <_svfiprintf_r+0x166>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	065b      	lsls	r3, r3, #25
 8006858:	f53f af35 	bmi.w	80066c6 <_svfiprintf_r+0x2a>
 800685c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800685e:	b01d      	add	sp, #116	; 0x74
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	ab03      	add	r3, sp, #12
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	4622      	mov	r2, r4
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <_svfiprintf_r+0x1ec>)
 800686c:	a904      	add	r1, sp, #16
 800686e:	4640      	mov	r0, r8
 8006870:	f000 f882 	bl	8006978 <_printf_i>
 8006874:	e7ea      	b.n	800684c <_svfiprintf_r+0x1b0>
 8006876:	bf00      	nop
 8006878:	08006f0a 	.word	0x08006f0a
 800687c:	08006f10 	.word	0x08006f10
 8006880:	08006f14 	.word	0x08006f14
 8006884:	00000000 	.word	0x00000000
 8006888:	080065e9 	.word	0x080065e9

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4691      	mov	r9, r2
 8006892:	461f      	mov	r7, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800689c:	4293      	cmp	r3, r2
 800689e:	bfb8      	it	lt
 80068a0:	4613      	movlt	r3, r2
 80068a2:	f8c9 3000 	str.w	r3, [r9]
 80068a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	b112      	cbz	r2, 80068b6 <_printf_common+0x2a>
 80068b0:	3301      	adds	r3, #1
 80068b2:	f8c9 3000 	str.w	r3, [r9]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	0699      	lsls	r1, r3, #26
 80068ba:	bf42      	ittt	mi
 80068bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068c0:	3302      	addmi	r3, #2
 80068c2:	f8c9 3000 	strmi.w	r3, [r9]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	f015 0506 	ands.w	r5, r5, #6
 80068cc:	d107      	bne.n	80068de <_printf_common+0x52>
 80068ce:	f104 0a19 	add.w	sl, r4, #25
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	f8d9 2000 	ldr.w	r2, [r9]
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	42ab      	cmp	r3, r5
 80068dc:	dc28      	bgt.n	8006930 <_printf_common+0xa4>
 80068de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	3300      	adds	r3, #0
 80068e6:	bf18      	it	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	0692      	lsls	r2, r2, #26
 80068ec:	d42d      	bmi.n	800694a <_printf_common+0xbe>
 80068ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f2:	4639      	mov	r1, r7
 80068f4:	4630      	mov	r0, r6
 80068f6:	47c0      	blx	r8
 80068f8:	3001      	adds	r0, #1
 80068fa:	d020      	beq.n	800693e <_printf_common+0xb2>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	68e5      	ldr	r5, [r4, #12]
 8006900:	f8d9 2000 	ldr.w	r2, [r9]
 8006904:	f003 0306 	and.w	r3, r3, #6
 8006908:	2b04      	cmp	r3, #4
 800690a:	bf08      	it	eq
 800690c:	1aad      	subeq	r5, r5, r2
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	6922      	ldr	r2, [r4, #16]
 8006912:	bf0c      	ite	eq
 8006914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006918:	2500      	movne	r5, #0
 800691a:	4293      	cmp	r3, r2
 800691c:	bfc4      	itt	gt
 800691e:	1a9b      	subgt	r3, r3, r2
 8006920:	18ed      	addgt	r5, r5, r3
 8006922:	f04f 0900 	mov.w	r9, #0
 8006926:	341a      	adds	r4, #26
 8006928:	454d      	cmp	r5, r9
 800692a:	d11a      	bne.n	8006962 <_printf_common+0xd6>
 800692c:	2000      	movs	r0, #0
 800692e:	e008      	b.n	8006942 <_printf_common+0xb6>
 8006930:	2301      	movs	r3, #1
 8006932:	4652      	mov	r2, sl
 8006934:	4639      	mov	r1, r7
 8006936:	4630      	mov	r0, r6
 8006938:	47c0      	blx	r8
 800693a:	3001      	adds	r0, #1
 800693c:	d103      	bne.n	8006946 <_printf_common+0xba>
 800693e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006946:	3501      	adds	r5, #1
 8006948:	e7c3      	b.n	80068d2 <_printf_common+0x46>
 800694a:	18e1      	adds	r1, r4, r3
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	2030      	movs	r0, #48	; 0x30
 8006950:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006954:	4422      	add	r2, r4
 8006956:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800695a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800695e:	3302      	adds	r3, #2
 8006960:	e7c5      	b.n	80068ee <_printf_common+0x62>
 8006962:	2301      	movs	r3, #1
 8006964:	4622      	mov	r2, r4
 8006966:	4639      	mov	r1, r7
 8006968:	4630      	mov	r0, r6
 800696a:	47c0      	blx	r8
 800696c:	3001      	adds	r0, #1
 800696e:	d0e6      	beq.n	800693e <_printf_common+0xb2>
 8006970:	f109 0901 	add.w	r9, r9, #1
 8006974:	e7d8      	b.n	8006928 <_printf_common+0x9c>
	...

08006978 <_printf_i>:
 8006978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800697c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006980:	460c      	mov	r4, r1
 8006982:	7e09      	ldrb	r1, [r1, #24]
 8006984:	b085      	sub	sp, #20
 8006986:	296e      	cmp	r1, #110	; 0x6e
 8006988:	4617      	mov	r7, r2
 800698a:	4606      	mov	r6, r0
 800698c:	4698      	mov	r8, r3
 800698e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006990:	f000 80b3 	beq.w	8006afa <_printf_i+0x182>
 8006994:	d822      	bhi.n	80069dc <_printf_i+0x64>
 8006996:	2963      	cmp	r1, #99	; 0x63
 8006998:	d036      	beq.n	8006a08 <_printf_i+0x90>
 800699a:	d80a      	bhi.n	80069b2 <_printf_i+0x3a>
 800699c:	2900      	cmp	r1, #0
 800699e:	f000 80b9 	beq.w	8006b14 <_printf_i+0x19c>
 80069a2:	2958      	cmp	r1, #88	; 0x58
 80069a4:	f000 8083 	beq.w	8006aae <_printf_i+0x136>
 80069a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80069b0:	e032      	b.n	8006a18 <_printf_i+0xa0>
 80069b2:	2964      	cmp	r1, #100	; 0x64
 80069b4:	d001      	beq.n	80069ba <_printf_i+0x42>
 80069b6:	2969      	cmp	r1, #105	; 0x69
 80069b8:	d1f6      	bne.n	80069a8 <_printf_i+0x30>
 80069ba:	6820      	ldr	r0, [r4, #0]
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	0605      	lsls	r5, r0, #24
 80069c0:	f103 0104 	add.w	r1, r3, #4
 80069c4:	d52a      	bpl.n	8006a1c <_printf_i+0xa4>
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6011      	str	r1, [r2, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da03      	bge.n	80069d6 <_printf_i+0x5e>
 80069ce:	222d      	movs	r2, #45	; 0x2d
 80069d0:	425b      	negs	r3, r3
 80069d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069d6:	486f      	ldr	r0, [pc, #444]	; (8006b94 <_printf_i+0x21c>)
 80069d8:	220a      	movs	r2, #10
 80069da:	e039      	b.n	8006a50 <_printf_i+0xd8>
 80069dc:	2973      	cmp	r1, #115	; 0x73
 80069de:	f000 809d 	beq.w	8006b1c <_printf_i+0x1a4>
 80069e2:	d808      	bhi.n	80069f6 <_printf_i+0x7e>
 80069e4:	296f      	cmp	r1, #111	; 0x6f
 80069e6:	d020      	beq.n	8006a2a <_printf_i+0xb2>
 80069e8:	2970      	cmp	r1, #112	; 0x70
 80069ea:	d1dd      	bne.n	80069a8 <_printf_i+0x30>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	f043 0320 	orr.w	r3, r3, #32
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	e003      	b.n	80069fe <_printf_i+0x86>
 80069f6:	2975      	cmp	r1, #117	; 0x75
 80069f8:	d017      	beq.n	8006a2a <_printf_i+0xb2>
 80069fa:	2978      	cmp	r1, #120	; 0x78
 80069fc:	d1d4      	bne.n	80069a8 <_printf_i+0x30>
 80069fe:	2378      	movs	r3, #120	; 0x78
 8006a00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a04:	4864      	ldr	r0, [pc, #400]	; (8006b98 <_printf_i+0x220>)
 8006a06:	e055      	b.n	8006ab4 <_printf_i+0x13c>
 8006a08:	6813      	ldr	r3, [r2, #0]
 8006a0a:	1d19      	adds	r1, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6011      	str	r1, [r2, #0]
 8006a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e08c      	b.n	8006b36 <_printf_i+0x1be>
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6011      	str	r1, [r2, #0]
 8006a20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a24:	bf18      	it	ne
 8006a26:	b21b      	sxthne	r3, r3
 8006a28:	e7cf      	b.n	80069ca <_printf_i+0x52>
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	6825      	ldr	r5, [r4, #0]
 8006a2e:	1d18      	adds	r0, r3, #4
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	0628      	lsls	r0, r5, #24
 8006a34:	d501      	bpl.n	8006a3a <_printf_i+0xc2>
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	e002      	b.n	8006a40 <_printf_i+0xc8>
 8006a3a:	0668      	lsls	r0, r5, #25
 8006a3c:	d5fb      	bpl.n	8006a36 <_printf_i+0xbe>
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	4854      	ldr	r0, [pc, #336]	; (8006b94 <_printf_i+0x21c>)
 8006a42:	296f      	cmp	r1, #111	; 0x6f
 8006a44:	bf14      	ite	ne
 8006a46:	220a      	movne	r2, #10
 8006a48:	2208      	moveq	r2, #8
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a50:	6865      	ldr	r5, [r4, #4]
 8006a52:	60a5      	str	r5, [r4, #8]
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	f2c0 8095 	blt.w	8006b84 <_printf_i+0x20c>
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	f021 0104 	bic.w	r1, r1, #4
 8006a60:	6021      	str	r1, [r4, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d13d      	bne.n	8006ae2 <_printf_i+0x16a>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	f040 808e 	bne.w	8006b88 <_printf_i+0x210>
 8006a6c:	4665      	mov	r5, ip
 8006a6e:	2a08      	cmp	r2, #8
 8006a70:	d10b      	bne.n	8006a8a <_printf_i+0x112>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	07db      	lsls	r3, r3, #31
 8006a76:	d508      	bpl.n	8006a8a <_printf_i+0x112>
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	bfde      	ittt	le
 8006a80:	2330      	movle	r3, #48	; 0x30
 8006a82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a8a:	ebac 0305 	sub.w	r3, ip, r5
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	f8cd 8000 	str.w	r8, [sp]
 8006a94:	463b      	mov	r3, r7
 8006a96:	aa03      	add	r2, sp, #12
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff fef6 	bl	800688c <_printf_common>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d14d      	bne.n	8006b40 <_printf_i+0x1c8>
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa8:	b005      	add	sp, #20
 8006aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aae:	4839      	ldr	r0, [pc, #228]	; (8006b94 <_printf_i+0x21c>)
 8006ab0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	1d1d      	adds	r5, r3, #4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6015      	str	r5, [r2, #0]
 8006abe:	060a      	lsls	r2, r1, #24
 8006ac0:	d50b      	bpl.n	8006ada <_printf_i+0x162>
 8006ac2:	07ca      	lsls	r2, r1, #31
 8006ac4:	bf44      	itt	mi
 8006ac6:	f041 0120 	orrmi.w	r1, r1, #32
 8006aca:	6021      	strmi	r1, [r4, #0]
 8006acc:	b91b      	cbnz	r3, 8006ad6 <_printf_i+0x15e>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	f022 0220 	bic.w	r2, r2, #32
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	e7b7      	b.n	8006a4a <_printf_i+0xd2>
 8006ada:	064d      	lsls	r5, r1, #25
 8006adc:	bf48      	it	mi
 8006ade:	b29b      	uxthmi	r3, r3
 8006ae0:	e7ef      	b.n	8006ac2 <_printf_i+0x14a>
 8006ae2:	4665      	mov	r5, ip
 8006ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ae8:	fb02 3311 	mls	r3, r2, r1, r3
 8006aec:	5cc3      	ldrb	r3, [r0, r3]
 8006aee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006af2:	460b      	mov	r3, r1
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d1f5      	bne.n	8006ae4 <_printf_i+0x16c>
 8006af8:	e7b9      	b.n	8006a6e <_printf_i+0xf6>
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	6961      	ldr	r1, [r4, #20]
 8006b00:	1d18      	adds	r0, r3, #4
 8006b02:	6010      	str	r0, [r2, #0]
 8006b04:	0628      	lsls	r0, r5, #24
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	d501      	bpl.n	8006b0e <_printf_i+0x196>
 8006b0a:	6019      	str	r1, [r3, #0]
 8006b0c:	e002      	b.n	8006b14 <_printf_i+0x19c>
 8006b0e:	066a      	lsls	r2, r5, #25
 8006b10:	d5fb      	bpl.n	8006b0a <_printf_i+0x192>
 8006b12:	8019      	strh	r1, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	4665      	mov	r5, ip
 8006b1a:	e7b9      	b.n	8006a90 <_printf_i+0x118>
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	1d19      	adds	r1, r3, #4
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	681d      	ldr	r5, [r3, #0]
 8006b24:	6862      	ldr	r2, [r4, #4]
 8006b26:	2100      	movs	r1, #0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f7f9 fb69 	bl	8000200 <memchr>
 8006b2e:	b108      	cbz	r0, 8006b34 <_printf_i+0x1bc>
 8006b30:	1b40      	subs	r0, r0, r5
 8006b32:	6060      	str	r0, [r4, #4]
 8006b34:	6863      	ldr	r3, [r4, #4]
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b3e:	e7a7      	b.n	8006a90 <_printf_i+0x118>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4639      	mov	r1, r7
 8006b46:	4630      	mov	r0, r6
 8006b48:	47c0      	blx	r8
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d0aa      	beq.n	8006aa4 <_printf_i+0x12c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	079b      	lsls	r3, r3, #30
 8006b52:	d413      	bmi.n	8006b7c <_printf_i+0x204>
 8006b54:	68e0      	ldr	r0, [r4, #12]
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	4298      	cmp	r0, r3
 8006b5a:	bfb8      	it	lt
 8006b5c:	4618      	movlt	r0, r3
 8006b5e:	e7a3      	b.n	8006aa8 <_printf_i+0x130>
 8006b60:	2301      	movs	r3, #1
 8006b62:	464a      	mov	r2, r9
 8006b64:	4639      	mov	r1, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	47c0      	blx	r8
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d09a      	beq.n	8006aa4 <_printf_i+0x12c>
 8006b6e:	3501      	adds	r5, #1
 8006b70:	68e3      	ldr	r3, [r4, #12]
 8006b72:	9a03      	ldr	r2, [sp, #12]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	42ab      	cmp	r3, r5
 8006b78:	dcf2      	bgt.n	8006b60 <_printf_i+0x1e8>
 8006b7a:	e7eb      	b.n	8006b54 <_printf_i+0x1dc>
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	f104 0919 	add.w	r9, r4, #25
 8006b82:	e7f5      	b.n	8006b70 <_printf_i+0x1f8>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ac      	bne.n	8006ae2 <_printf_i+0x16a>
 8006b88:	7803      	ldrb	r3, [r0, #0]
 8006b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b92:	e76c      	b.n	8006a6e <_printf_i+0xf6>
 8006b94:	08006f1b 	.word	0x08006f1b
 8006b98:	08006f2c 	.word	0x08006f2c

08006b9c <__ascii_wctomb>:
 8006b9c:	b149      	cbz	r1, 8006bb2 <__ascii_wctomb+0x16>
 8006b9e:	2aff      	cmp	r2, #255	; 0xff
 8006ba0:	bf85      	ittet	hi
 8006ba2:	238a      	movhi	r3, #138	; 0x8a
 8006ba4:	6003      	strhi	r3, [r0, #0]
 8006ba6:	700a      	strbls	r2, [r1, #0]
 8006ba8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006bac:	bf98      	it	ls
 8006bae:	2001      	movls	r0, #1
 8006bb0:	4770      	bx	lr
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4770      	bx	lr

08006bb6 <memcpy>:
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	1e43      	subs	r3, r0, #1
 8006bba:	440a      	add	r2, r1
 8006bbc:	4291      	cmp	r1, r2
 8006bbe:	d100      	bne.n	8006bc2 <memcpy+0xc>
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bca:	e7f7      	b.n	8006bbc <memcpy+0x6>

08006bcc <memmove>:
 8006bcc:	4288      	cmp	r0, r1
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	eb01 0302 	add.w	r3, r1, r2
 8006bd4:	d807      	bhi.n	8006be6 <memmove+0x1a>
 8006bd6:	1e42      	subs	r2, r0, #1
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d00a      	beq.n	8006bf2 <memmove+0x26>
 8006bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006be4:	e7f8      	b.n	8006bd8 <memmove+0xc>
 8006be6:	4283      	cmp	r3, r0
 8006be8:	d9f5      	bls.n	8006bd6 <memmove+0xa>
 8006bea:	1881      	adds	r1, r0, r2
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	42d3      	cmn	r3, r2
 8006bf0:	d100      	bne.n	8006bf4 <memmove+0x28>
 8006bf2:	bd10      	pop	{r4, pc}
 8006bf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bfc:	e7f7      	b.n	8006bee <memmove+0x22>
	...

08006c00 <_free_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4605      	mov	r5, r0
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d045      	beq.n	8006c94 <_free_r+0x94>
 8006c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0c:	1f0c      	subs	r4, r1, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfb8      	it	lt
 8006c12:	18e4      	addlt	r4, r4, r3
 8006c14:	f000 f8d2 	bl	8006dbc <__malloc_lock>
 8006c18:	4a1f      	ldr	r2, [pc, #124]	; (8006c98 <_free_r+0x98>)
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	b933      	cbnz	r3, 8006c2e <_free_r+0x2e>
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	6014      	str	r4, [r2, #0]
 8006c24:	4628      	mov	r0, r5
 8006c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c2a:	f000 b8c8 	b.w	8006dbe <__malloc_unlock>
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	d90c      	bls.n	8006c4c <_free_r+0x4c>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	1862      	adds	r2, r4, r1
 8006c36:	4293      	cmp	r3, r2
 8006c38:	bf04      	itt	eq
 8006c3a:	681a      	ldreq	r2, [r3, #0]
 8006c3c:	685b      	ldreq	r3, [r3, #4]
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	bf04      	itt	eq
 8006c42:	1852      	addeq	r2, r2, r1
 8006c44:	6022      	streq	r2, [r4, #0]
 8006c46:	6004      	str	r4, [r0, #0]
 8006c48:	e7ec      	b.n	8006c24 <_free_r+0x24>
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	b10a      	cbz	r2, 8006c54 <_free_r+0x54>
 8006c50:	42a2      	cmp	r2, r4
 8006c52:	d9fa      	bls.n	8006c4a <_free_r+0x4a>
 8006c54:	6819      	ldr	r1, [r3, #0]
 8006c56:	1858      	adds	r0, r3, r1
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d10b      	bne.n	8006c74 <_free_r+0x74>
 8006c5c:	6820      	ldr	r0, [r4, #0]
 8006c5e:	4401      	add	r1, r0
 8006c60:	1858      	adds	r0, r3, r1
 8006c62:	4282      	cmp	r2, r0
 8006c64:	6019      	str	r1, [r3, #0]
 8006c66:	d1dd      	bne.n	8006c24 <_free_r+0x24>
 8006c68:	6810      	ldr	r0, [r2, #0]
 8006c6a:	6852      	ldr	r2, [r2, #4]
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	4401      	add	r1, r0
 8006c70:	6019      	str	r1, [r3, #0]
 8006c72:	e7d7      	b.n	8006c24 <_free_r+0x24>
 8006c74:	d902      	bls.n	8006c7c <_free_r+0x7c>
 8006c76:	230c      	movs	r3, #12
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	e7d3      	b.n	8006c24 <_free_r+0x24>
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	1821      	adds	r1, r4, r0
 8006c80:	428a      	cmp	r2, r1
 8006c82:	bf04      	itt	eq
 8006c84:	6811      	ldreq	r1, [r2, #0]
 8006c86:	6852      	ldreq	r2, [r2, #4]
 8006c88:	6062      	str	r2, [r4, #4]
 8006c8a:	bf04      	itt	eq
 8006c8c:	1809      	addeq	r1, r1, r0
 8006c8e:	6021      	streq	r1, [r4, #0]
 8006c90:	605c      	str	r4, [r3, #4]
 8006c92:	e7c7      	b.n	8006c24 <_free_r+0x24>
 8006c94:	bd38      	pop	{r3, r4, r5, pc}
 8006c96:	bf00      	nop
 8006c98:	200002fc 	.word	0x200002fc

08006c9c <_malloc_r>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	1ccd      	adds	r5, r1, #3
 8006ca0:	f025 0503 	bic.w	r5, r5, #3
 8006ca4:	3508      	adds	r5, #8
 8006ca6:	2d0c      	cmp	r5, #12
 8006ca8:	bf38      	it	cc
 8006caa:	250c      	movcc	r5, #12
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	4606      	mov	r6, r0
 8006cb0:	db01      	blt.n	8006cb6 <_malloc_r+0x1a>
 8006cb2:	42a9      	cmp	r1, r5
 8006cb4:	d903      	bls.n	8006cbe <_malloc_r+0x22>
 8006cb6:	230c      	movs	r3, #12
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	2000      	movs	r0, #0
 8006cbc:	bd70      	pop	{r4, r5, r6, pc}
 8006cbe:	f000 f87d 	bl	8006dbc <__malloc_lock>
 8006cc2:	4a21      	ldr	r2, [pc, #132]	; (8006d48 <_malloc_r+0xac>)
 8006cc4:	6814      	ldr	r4, [r2, #0]
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	b991      	cbnz	r1, 8006cf0 <_malloc_r+0x54>
 8006cca:	4c20      	ldr	r4, [pc, #128]	; (8006d4c <_malloc_r+0xb0>)
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	b91b      	cbnz	r3, 8006cd8 <_malloc_r+0x3c>
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 f863 	bl	8006d9c <_sbrk_r>
 8006cd6:	6020      	str	r0, [r4, #0]
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f000 f85e 	bl	8006d9c <_sbrk_r>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d124      	bne.n	8006d2e <_malloc_r+0x92>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f868 	bl	8006dbe <__malloc_unlock>
 8006cee:	e7e4      	b.n	8006cba <_malloc_r+0x1e>
 8006cf0:	680b      	ldr	r3, [r1, #0]
 8006cf2:	1b5b      	subs	r3, r3, r5
 8006cf4:	d418      	bmi.n	8006d28 <_malloc_r+0x8c>
 8006cf6:	2b0b      	cmp	r3, #11
 8006cf8:	d90f      	bls.n	8006d1a <_malloc_r+0x7e>
 8006cfa:	600b      	str	r3, [r1, #0]
 8006cfc:	50cd      	str	r5, [r1, r3]
 8006cfe:	18cc      	adds	r4, r1, r3
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 f85c 	bl	8006dbe <__malloc_unlock>
 8006d06:	f104 000b 	add.w	r0, r4, #11
 8006d0a:	1d23      	adds	r3, r4, #4
 8006d0c:	f020 0007 	bic.w	r0, r0, #7
 8006d10:	1ac3      	subs	r3, r0, r3
 8006d12:	d0d3      	beq.n	8006cbc <_malloc_r+0x20>
 8006d14:	425a      	negs	r2, r3
 8006d16:	50e2      	str	r2, [r4, r3]
 8006d18:	e7d0      	b.n	8006cbc <_malloc_r+0x20>
 8006d1a:	428c      	cmp	r4, r1
 8006d1c:	684b      	ldr	r3, [r1, #4]
 8006d1e:	bf16      	itet	ne
 8006d20:	6063      	strne	r3, [r4, #4]
 8006d22:	6013      	streq	r3, [r2, #0]
 8006d24:	460c      	movne	r4, r1
 8006d26:	e7eb      	b.n	8006d00 <_malloc_r+0x64>
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6849      	ldr	r1, [r1, #4]
 8006d2c:	e7cc      	b.n	8006cc8 <_malloc_r+0x2c>
 8006d2e:	1cc4      	adds	r4, r0, #3
 8006d30:	f024 0403 	bic.w	r4, r4, #3
 8006d34:	42a0      	cmp	r0, r4
 8006d36:	d005      	beq.n	8006d44 <_malloc_r+0xa8>
 8006d38:	1a21      	subs	r1, r4, r0
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f82e 	bl	8006d9c <_sbrk_r>
 8006d40:	3001      	adds	r0, #1
 8006d42:	d0cf      	beq.n	8006ce4 <_malloc_r+0x48>
 8006d44:	6025      	str	r5, [r4, #0]
 8006d46:	e7db      	b.n	8006d00 <_malloc_r+0x64>
 8006d48:	200002fc 	.word	0x200002fc
 8006d4c:	20000300 	.word	0x20000300

08006d50 <_realloc_r>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	4607      	mov	r7, r0
 8006d54:	4614      	mov	r4, r2
 8006d56:	460e      	mov	r6, r1
 8006d58:	b921      	cbnz	r1, 8006d64 <_realloc_r+0x14>
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d60:	f7ff bf9c 	b.w	8006c9c <_malloc_r>
 8006d64:	b922      	cbnz	r2, 8006d70 <_realloc_r+0x20>
 8006d66:	f7ff ff4b 	bl	8006c00 <_free_r>
 8006d6a:	4625      	mov	r5, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d70:	f000 f826 	bl	8006dc0 <_malloc_usable_size_r>
 8006d74:	42a0      	cmp	r0, r4
 8006d76:	d20f      	bcs.n	8006d98 <_realloc_r+0x48>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f7ff ff8e 	bl	8006c9c <_malloc_r>
 8006d80:	4605      	mov	r5, r0
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d0f2      	beq.n	8006d6c <_realloc_r+0x1c>
 8006d86:	4631      	mov	r1, r6
 8006d88:	4622      	mov	r2, r4
 8006d8a:	f7ff ff14 	bl	8006bb6 <memcpy>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4638      	mov	r0, r7
 8006d92:	f7ff ff35 	bl	8006c00 <_free_r>
 8006d96:	e7e9      	b.n	8006d6c <_realloc_r+0x1c>
 8006d98:	4635      	mov	r5, r6
 8006d9a:	e7e7      	b.n	8006d6c <_realloc_r+0x1c>

08006d9c <_sbrk_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4c06      	ldr	r4, [pc, #24]	; (8006db8 <_sbrk_r+0x1c>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4605      	mov	r5, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	f7fb f8fa 	bl	8001fa0 <_sbrk>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_sbrk_r+0x1a>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_sbrk_r+0x1a>
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200006c8 	.word	0x200006c8

08006dbc <__malloc_lock>:
 8006dbc:	4770      	bx	lr

08006dbe <__malloc_unlock>:
 8006dbe:	4770      	bx	lr

08006dc0 <_malloc_usable_size_r>:
 8006dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc4:	1f18      	subs	r0, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfbc      	itt	lt
 8006dca:	580b      	ldrlt	r3, [r1, r0]
 8006dcc:	18c0      	addlt	r0, r0, r3
 8006dce:	4770      	bx	lr

08006dd0 <_init>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr

08006ddc <_fini>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr
