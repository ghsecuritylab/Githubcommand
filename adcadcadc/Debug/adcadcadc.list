
adcadcadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f28  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f4  080050f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050fc  080050fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000000c  08005110  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005110  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013412  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc9  00000000  00000000  0003344e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001170  00000000  00000000  00036018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b56  00000000  00000000  00038170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fdd0  00000000  00000000  0005dcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4ea2  00000000  00000000  0006da96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  001529b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080050bc 	.word	0x080050bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080050bc 	.word	0x080050bc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004fe:	4b4d      	ldr	r3, [pc, #308]	; (8000634 <MX_ADC1_Init+0x148>)
 8000500:	4a4d      	ldr	r2, [pc, #308]	; (8000638 <MX_ADC1_Init+0x14c>)
 8000502:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000504:	4b4b      	ldr	r3, [pc, #300]	; (8000634 <MX_ADC1_Init+0x148>)
 8000506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800050c:	4b49      	ldr	r3, [pc, #292]	; (8000634 <MX_ADC1_Init+0x148>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000512:	4b48      	ldr	r3, [pc, #288]	; (8000634 <MX_ADC1_Init+0x148>)
 8000514:	2201      	movs	r2, #1
 8000516:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000518:	4b46      	ldr	r3, [pc, #280]	; (8000634 <MX_ADC1_Init+0x148>)
 800051a:	2201      	movs	r2, #1
 800051c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051e:	4b45      	ldr	r3, [pc, #276]	; (8000634 <MX_ADC1_Init+0x148>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <MX_ADC1_Init+0x148>)
 8000528:	2200      	movs	r2, #0
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052c:	4b41      	ldr	r3, [pc, #260]	; (8000634 <MX_ADC1_Init+0x148>)
 800052e:	4a43      	ldr	r2, [pc, #268]	; (800063c <MX_ADC1_Init+0x150>)
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000532:	4b40      	ldr	r3, [pc, #256]	; (8000634 <MX_ADC1_Init+0x148>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000538:	4b3e      	ldr	r3, [pc, #248]	; (8000634 <MX_ADC1_Init+0x148>)
 800053a:	2207      	movs	r2, #7
 800053c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <MX_ADC1_Init+0x148>)
 8000540:	2201      	movs	r2, #1
 8000542:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <MX_ADC1_Init+0x148>)
 8000548:	2201      	movs	r2, #1
 800054a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054c:	4839      	ldr	r0, [pc, #228]	; (8000634 <MX_ADC1_Init+0x148>)
 800054e:	f000 ff8d 	bl	800146c <HAL_ADC_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000558:	f000 fcc2 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	4831      	ldr	r0, [pc, #196]	; (8000634 <MX_ADC1_Init+0x148>)
 800056e:	f001 f8d1 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000578:	f000 fcb2 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800057c:	2303      	movs	r3, #3
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000580:	2302      	movs	r3, #2
 8000582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000584:	2301      	movs	r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	4829      	ldr	r0, [pc, #164]	; (8000634 <MX_ADC1_Init+0x148>)
 800058e:	f001 f8c1 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000598:	f000 fca2 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800059c:	2308      	movs	r3, #8
 800059e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4821      	ldr	r0, [pc, #132]	; (8000634 <MX_ADC1_Init+0x148>)
 80005ae:	f001 f8b1 	bl	8001714 <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80005b8:	f000 fc92 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005bc:	2309      	movs	r3, #9
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	481a      	ldr	r0, [pc, #104]	; (8000634 <MX_ADC1_Init+0x148>)
 80005ca:	f001 f8a3 	bl	8001714 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005d4:	f000 fc84 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005d8:	230a      	movs	r3, #10
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005dc:	2305      	movs	r3, #5
 80005de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4619      	mov	r1, r3
 80005e4:	4813      	ldr	r0, [pc, #76]	; (8000634 <MX_ADC1_Init+0x148>)
 80005e6:	f001 f895 	bl	8001714 <HAL_ADC_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005f0:	f000 fc76 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005f4:	230c      	movs	r3, #12
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80005f8:	2306      	movs	r3, #6
 80005fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_ADC1_Init+0x148>)
 8000602:	f001 f887 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 800060c:	f000 fc68 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000614:	2307      	movs	r3, #7
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x148>)
 800061e:	f001 f879 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000628:	f000 fc5a 	bl	8000ee0 <Error_Handler>
  }

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000088 	.word	0x20000088
 8000638:	40012000 	.word	0x40012000
 800063c:	0f000001 	.word	0x0f000001

08000640 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000652:	4b45      	ldr	r3, [pc, #276]	; (8000768 <MX_ADC3_Init+0x128>)
 8000654:	4a45      	ldr	r2, [pc, #276]	; (800076c <MX_ADC3_Init+0x12c>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000658:	4b43      	ldr	r3, [pc, #268]	; (8000768 <MX_ADC3_Init+0x128>)
 800065a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b41      	ldr	r3, [pc, #260]	; (8000768 <MX_ADC3_Init+0x128>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <MX_ADC3_Init+0x128>)
 8000668:	2201      	movs	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <MX_ADC3_Init+0x128>)
 800066e:	2201      	movs	r2, #1
 8000670:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <MX_ADC3_Init+0x128>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <MX_ADC3_Init+0x128>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <MX_ADC3_Init+0x128>)
 8000682:	4a3b      	ldr	r2, [pc, #236]	; (8000770 <MX_ADC3_Init+0x130>)
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <MX_ADC3_Init+0x128>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <MX_ADC3_Init+0x128>)
 800068e:	2206      	movs	r2, #6
 8000690:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_ADC3_Init+0x128>)
 8000694:	2201      	movs	r2, #1
 8000696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_ADC3_Init+0x128>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a0:	4831      	ldr	r0, [pc, #196]	; (8000768 <MX_ADC3_Init+0x128>)
 80006a2:	f000 fee3 	bl	800146c <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006ac:	f000 fc18 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80006b8:	2301      	movs	r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <MX_ADC3_Init+0x128>)
 80006c2:	f001 f827 	bl	8001714 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006cc:	f000 fc08 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006d0:	2305      	movs	r3, #5
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <MX_ADC3_Init+0x128>)
 80006e2:	f001 f817 	bl	8001714 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80006ec:	f000 fbf8 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006f0:	2306      	movs	r3, #6
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006f4:	2303      	movs	r3, #3
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	481a      	ldr	r0, [pc, #104]	; (8000768 <MX_ADC3_Init+0x128>)
 80006fe:	f001 f809 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000708:	f000 fbea 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800070c:	2307      	movs	r3, #7
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <MX_ADC3_Init+0x128>)
 800071a:	f000 fffb 	bl	8001714 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8000724:	f000 fbdc 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000728:	230e      	movs	r3, #14
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800072c:	2305      	movs	r3, #5
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_ADC3_Init+0x128>)
 8000736:	f000 ffed 	bl	8001714 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 8000740:	f000 fbce 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000744:	230f      	movs	r3, #15
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000748:	2306      	movs	r3, #6
 800074a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_ADC3_Init+0x128>)
 8000752:	f000 ffdf 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 800075c:	f000 fbc0 	bl	8000ee0 <Error_Handler>
  }

}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000d0 	.word	0x200000d0
 800076c:	40012200 	.word	0x40012200
 8000770:	0f000001 	.word	0x0f000001

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a79      	ldr	r2, [pc, #484]	; (8000978 <HAL_ADC_MspInit+0x204>)
 8000792:	4293      	cmp	r3, r2
 8000794:	f040 808d 	bne.w	80008b2 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
 800079c:	4b77      	ldr	r3, [pc, #476]	; (800097c <HAL_ADC_MspInit+0x208>)
 800079e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a0:	4a76      	ldr	r2, [pc, #472]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a6:	6453      	str	r3, [r2, #68]	; 0x44
 80007a8:	4b74      	ldr	r3, [pc, #464]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
 80007b8:	4b70      	ldr	r3, [pc, #448]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a6f      	ldr	r2, [pc, #444]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
 80007c4:	4b6d      	ldr	r3, [pc, #436]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	4b69      	ldr	r3, [pc, #420]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	4a68      	ldr	r2, [pc, #416]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6313      	str	r3, [r2, #48]	; 0x30
 80007e0:	4b66      	ldr	r3, [pc, #408]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	4b62      	ldr	r3, [pc, #392]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a61      	ldr	r2, [pc, #388]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30
 80007fc:	4b5f      	ldr	r3, [pc, #380]	; (800097c <HAL_ADC_MspInit+0x208>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = Current4_Pin|Voltage0_Pin|Voltage1_Pin;
 8000808:	230d      	movs	r3, #13
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	4859      	ldr	r0, [pc, #356]	; (8000980 <HAL_ADC_MspInit+0x20c>)
 800081c:	f002 fba8 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current0_Pin|Currnet1_Pin;
 8000820:	2309      	movs	r3, #9
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4854      	ldr	r0, [pc, #336]	; (8000984 <HAL_ADC_MspInit+0x210>)
 8000834:	f002 fb9c 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current2_Pin|Current3_Pin;
 8000838:	2303      	movs	r3, #3
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	484f      	ldr	r0, [pc, #316]	; (8000988 <HAL_ADC_MspInit+0x214>)
 800084c:	f002 fb90 	bl	8002f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000850:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000852:	4a4f      	ldr	r2, [pc, #316]	; (8000990 <HAL_ADC_MspInit+0x21c>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000856:	4b4d      	ldr	r3, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085c:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x218>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b4a      	ldr	r3, [pc, #296]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b48      	ldr	r3, [pc, #288]	; (800098c <HAL_ADC_MspInit+0x218>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000876:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000878:	4b44      	ldr	r3, [pc, #272]	; (800098c <HAL_ADC_MspInit+0x218>)
 800087a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000880:	4b42      	ldr	r3, [pc, #264]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b40      	ldr	r3, [pc, #256]	; (800098c <HAL_ADC_MspInit+0x218>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b3f      	ldr	r3, [pc, #252]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000894:	483d      	ldr	r0, [pc, #244]	; (800098c <HAL_ADC_MspInit+0x218>)
 8000896:	f001 fb6d 	bl	8001f74 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80008a0:	f000 fb1e 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a39      	ldr	r2, [pc, #228]	; (800098c <HAL_ADC_MspInit+0x218>)
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
 80008aa:	4a38      	ldr	r2, [pc, #224]	; (800098c <HAL_ADC_MspInit+0x218>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008b0:	e05e      	b.n	8000970 <HAL_ADC_MspInit+0x1fc>
  else if(adcHandle->Instance==ADC3)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a37      	ldr	r2, [pc, #220]	; (8000994 <HAL_ADC_MspInit+0x220>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d159      	bne.n	8000970 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <HAL_ADC_MspInit+0x208>)
 80008c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c4:	4a2d      	ldr	r2, [pc, #180]	; (800097c <HAL_ADC_MspInit+0x208>)
 80008c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ca:	6453      	str	r3, [r2, #68]	; 0x44
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <HAL_ADC_MspInit+0x208>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <HAL_ADC_MspInit+0x208>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <HAL_ADC_MspInit+0x208>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_ADC_MspInit+0x208>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Input0_Pin|Temp_Pin|Forward0_Pin|Forward1_Pin 
 80008f4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <HAL_ADC_MspInit+0x224>)
 800090a:	f002 fb31 	bl	8002f70 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000910:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <HAL_ADC_MspInit+0x22c>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800091a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_ADC_MspInit+0x228>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_ADC_MspInit+0x228>)
 800092a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800092e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000936:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_ADC_MspInit+0x228>)
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000946:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_ADC_MspInit+0x228>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000956:	f001 fb0d 	bl	8001f74 <HAL_DMA_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8000960:	f000 fabe 	bl	8000ee0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x228>)
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
 800096a:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_ADC_MspInit+0x228>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000970:	bf00      	nop
 8000972:	3738      	adds	r7, #56	; 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40012000 	.word	0x40012000
 800097c:	40023800 	.word	0x40023800
 8000980:	40020800 	.word	0x40020800
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400
 800098c:	20000118 	.word	0x20000118
 8000990:	40026470 	.word	0x40026470
 8000994:	40012200 	.word	0x40012200
 8000998:	40021400 	.word	0x40021400
 800099c:	20000028 	.word	0x20000028
 80009a0:	40026410 	.word	0x40026410

080009a4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_DAC_Init+0x4c>)
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MX_DAC_Init+0x50>)
 80009b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_DAC_Init+0x4c>)
 80009ba:	f001 fa6c 	bl	8001e96 <HAL_DAC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009c4:	f000 fa8c 	bl	8000ee0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_DAC_Init+0x4c>)
 80009d8:	f001 fa7f 	bl	8001eda <HAL_DAC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009e2:	f000 fa7d 	bl	8000ee0 <Error_Handler>
  }

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000178 	.word	0x20000178
 80009f4:	40007400 	.word	0x40007400

080009f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_DAC_MspInit+0x7c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d127      	bne.n	8000a6a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_DAC_MspInit+0x80>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <HAL_DAC_MspInit+0x80>)
 8000a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_DAC_MspInit+0x80>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_DAC_MspInit+0x80>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_DAC_MspInit+0x80>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_DAC_MspInit+0x80>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_DAC_MspInit+0x84>)
 8000a66:	f002 fa83 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40007400 	.word	0x40007400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_DMA_Init+0x4c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <MX_DMA_Init+0x4c>)
 8000a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_DMA_Init+0x4c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2038      	movs	r0, #56	; 0x38
 8000aa8:	f001 f9bf 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aac:	2038      	movs	r0, #56	; 0x38
 8000aae:	f001 f9d8 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	203c      	movs	r0, #60	; 0x3c
 8000ab8:	f001 f9b7 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000abc:	203c      	movs	r0, #60	; 0x3c
 8000abe:	f001 f9d0 	bl	8001e62 <HAL_NVIC_EnableIRQ>

}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_ETH_Init+0x78>)
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <MX_ETH_Init+0x7c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ETH_Init+0x78>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_ETH_Init+0x78>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_ETH_Init+0x78>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_ETH_Init+0x78>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_ETH_Init+0x78>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	3302      	adds	r3, #2
 8000afe:	22e1      	movs	r2, #225	; 0xe1
 8000b00:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	3303      	adds	r3, #3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	3305      	adds	r3, #5
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b32:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_ETH_Init+0x78>)
 8000b36:	f001 fdad 	bl	8002694 <HAL_ETH_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000b40:	f000 f9ce 	bl	8000ee0 <Error_Handler>
  }

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000018c 	.word	0x2000018c
 8000b4c:	40028000 	.word	0x40028000

08000b50 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_ETH_MspInit+0x138>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	f040 8085 	bne.w	8000c7e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a43      	ldr	r2, [pc, #268]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b8c:	623b      	str	r3, [r7, #32]
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a3c      	ldr	r2, [pc, #240]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a35      	ldr	r2, [pc, #212]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_ETH_MspInit+0x13c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c1c:	2332      	movs	r3, #50	; 0x32
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <HAL_ETH_MspInit+0x140>)
 8000c38:	f002 f99a 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c3c:	2386      	movs	r3, #134	; 0x86
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	480f      	ldr	r0, [pc, #60]	; (8000c94 <HAL_ETH_MspInit+0x144>)
 8000c58:	f002 f98a 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000c5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000c7a:	f002 f979 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40028000 	.word	0x40028000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400

08000c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a30      	ldr	r2, [pc, #192]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cbc:	f043 0320 	orr.w	r3, r3, #32
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_GPIO_Init+0xe4>)
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_GPIO_Init+0xe8>)
 8000d6e:	f002 f8ff 	bl	8002f70 <HAL_GPIO_Init>

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	10110000 	.word	0x10110000
 8000d84:	40021000 	.word	0x40021000

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fada 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f82a 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f7ff ff82 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d98:	f7ff fe72 	bl	8000a80 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d9c:	f7ff fba6 	bl	80004ec <MX_ADC1_Init>
  MX_ETH_Init();
 8000da0:	f7ff fe96 	bl	8000ad0 <MX_ETH_Init>
  MX_TIM2_Init();
 8000da4:	f000 f9b6 	bl	8001114 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000da8:	f000 fa28 	bl	80011fc <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000dac:	f7ff fc48 	bl	8000640 <MX_ADC3_Init>
  MX_DAC_Init();
 8000db0:	f7ff fdf8 	bl	80009a4 <MX_DAC_Init>
  MX_SPI1_Init();
 8000db4:	f000 f89c 	bl	8000ef0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <main+0x4c>)
 8000dba:	f002 ff74 	bl	8003ca6 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc1, 7);
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <main+0x50>)
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <main+0x54>)
 8000dc4:	f000 fb96 	bl	80014f4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, adc3, 6);
 8000dc8:	2206      	movs	r2, #6
 8000dca:	4905      	ldr	r1, [pc, #20]	; (8000de0 <main+0x58>)
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <main+0x5c>)
 8000dce:	f000 fb91 	bl	80014f4 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <main+0x4a>
 8000dd4:	2000024c 	.word	0x2000024c
 8000dd8:	200001d8 	.word	0x200001d8
 8000ddc:	20000088 	.word	0x20000088
 8000de0:	200001e8 	.word	0x200001e8
 8000de4:	200000d0 	.word	0x200000d0

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	; 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 f958 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e5c:	23a8      	movs	r3, #168	; 0xa8
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fa29 	bl	80032c4 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 f832 	bl	8000ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2105      	movs	r1, #5
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fc82 	bl	80037a4 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ea6:	f000 f81b 	bl	8000ee0 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	timer++;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ece:	801a      	strh	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	200001d4 	.word	0x200001d4

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <MX_SPI1_Init+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f3c:	220a      	movs	r2, #10
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f42:	f002 fe21 	bl	8003b88 <HAL_SPI_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f4c:	f7ff ffc8 	bl	8000ee0 <Error_Handler>
  }

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001f4 	.word	0x200001f4
 8000f58:	40013000 	.word	0x40013000

08000f5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_SPI_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12b      	bne.n	8000fd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fb6:	2338      	movs	r3, #56	; 0x38
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_SPI_MspInit+0x8c>)
 8000fd2:	f001 ffcd 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40013000 	.word	0x40013000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020400 	.word	0x40020400

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_MspInit+0x4c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f9aa 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM2_IRQHandler+0x10>)
 800109e:	f002 fe26 	bl	8003cee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000024c 	.word	0x2000024c

080010ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <USART1_IRQHandler+0x10>)
 80010b2:	f003 fa1b 	bl	80044ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000028c 	.word	0x2000028c

080010c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA2_Stream0_IRQHandler+0x10>)
 80010c6:	f001 f87d 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000028 	.word	0x20000028

080010d4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <DMA2_Stream4_IRQHandler+0x10>)
 80010da:	f001 f873 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000118 	.word	0x20000118

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <SystemInit+0x28>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <SystemInit+0x28>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SystemInit+0x28>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001102:	609a      	str	r2, [r3, #8]
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_TIM2_Init+0x98>)
 8001132:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001136:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_TIM2_Init+0x98>)
 800113a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800113e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_TIM2_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_TIM2_Init+0x98>)
 8001148:	f242 720f 	movw	r2, #9999	; 0x270f
 800114c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_TIM2_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_TIM2_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115a:	4814      	ldr	r0, [pc, #80]	; (80011ac <MX_TIM2_Init+0x98>)
 800115c:	f002 fd78 	bl	8003c50 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001166:	f7ff febb 	bl	8000ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_TIM2_Init+0x98>)
 8001178:	f002 fec1 	bl	8003efe <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001182:	f7ff fead 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_TIM2_Init+0x98>)
 8001194:	f003 f8cc 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800119e:	f7ff fe9f 	bl	8000ee0 <Error_Handler>
  }

}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000024c 	.word	0x2000024c

080011b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d115      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_TIM_Base_MspInit+0x48>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_TIM_Base_MspInit+0x48>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_TIM_Base_MspInit+0x48>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	201c      	movs	r0, #28
 80011e4:	f000 fe21 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e8:	201c      	movs	r0, #28
 80011ea:	f000 fe3a 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART1_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001234:	f003 f90c 	bl	8004450 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f7ff fe4f 	bl	8000ee0 <Error_Handler>
  }

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000028c 	.word	0x2000028c
 800124c:	40011000 	.word	0x40011000

08001250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_UART_MspInit+0x94>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d134      	bne.n	80012dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0x98>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_UART_MspInit+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_UART_MspInit+0x9c>)
 80012c8:	f001 fe52 	bl	8002f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2025      	movs	r0, #37	; 0x25
 80012d2:	f000 fdaa 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d6:	2025      	movs	r0, #37	; 0x25
 80012d8:	f000 fdc3 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40011000 	.word	0x40011000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012f6:	e003      	b.n	8001300 <LoopCopyDataInit>

080012f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012fe:	3104      	adds	r1, #4

08001300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001308:	d3f6      	bcc.n	80012f8 <CopyDataInit>
  ldr  r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800130c:	e002      	b.n	8001314 <LoopFillZerobss>

0800130e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800130e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001310:	f842 3b04 	str.w	r3, [r2], #4

08001314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001318:	d3f9      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800131a:	f7ff fee5 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 fea1 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fd31 	bl	8000d88 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001328:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800132c:	08005104 	.word	0x08005104
  ldr  r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001334:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001338:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800133c:	200002d0 	.word	0x200002d0

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fd51 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fe38 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fd69 	bl	8001e7e <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c4:	f000 fd31 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	200002cc 	.word	0x200002cc

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200002cc 	.word	0x200002cc

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_Delay+0x40>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e033      	b.n	80014ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff f972 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fa5a 	bl	8001978 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
 80014da:	e001      	b.n	80014e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Start_DMA+0x1e>
 800150e:	2302      	movs	r3, #2
 8001510:	e0cc      	b.n	80016ac <HAL_ADC_Start_DMA+0x1b8>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d018      	beq.n	800155a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001538:	4b5e      	ldr	r3, [pc, #376]	; (80016b4 <HAL_ADC_Start_DMA+0x1c0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5e      	ldr	r2, [pc, #376]	; (80016b8 <HAL_ADC_Start_DMA+0x1c4>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9a      	lsrs	r2, r3, #18
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800154c:	e002      	b.n	8001554 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3b01      	subs	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 80a0 	bne.w	80016aa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a8:	d106      	bne.n	80015b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f023 0206 	bic.w	r2, r3, #6
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
 80015b6:	e002      	b.n	80015be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_ADC_Start_DMA+0x1c8>)
 80015c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	4a3c      	ldr	r2, [pc, #240]	; (80016c0 <HAL_ADC_Start_DMA+0x1cc>)
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <HAL_ADC_Start_DMA+0x1d0>)
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015de:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <HAL_ADC_Start_DMA+0x1d4>)
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	334c      	adds	r3, #76	; 0x4c
 8001616:	4619      	mov	r1, r3
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f000 fd58 	bl	80020d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2b00      	cmp	r3, #0
 800162a:	d12a      	bne.n	8001682 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_ADC_Start_DMA+0x1d8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d015      	beq.n	8001662 <HAL_ADC_Start_DMA+0x16e>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_ADC_Start_DMA+0x1dc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d105      	bne.n	800164c <HAL_ADC_Start_DMA+0x158>
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_ADC_Start_DMA+0x1c8>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_ADC_Start_DMA+0x1e0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d129      	bne.n	80016aa <HAL_ADC_Start_DMA+0x1b6>
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_ADC_Start_DMA+0x1c8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d823      	bhi.n	80016aa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11c      	bne.n	80016aa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	e013      	b.n	80016aa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a11      	ldr	r2, [pc, #68]	; (80016cc <HAL_ADC_Start_DMA+0x1d8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d10e      	bne.n	80016aa <HAL_ADC_Start_DMA+0x1b6>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	40012300 	.word	0x40012300
 80016c0:	08001b71 	.word	0x08001b71
 80016c4:	08001c2b 	.word	0x08001c2b
 80016c8:	08001c47 	.word	0x08001c47
 80016cc:	40012000 	.word	0x40012000
 80016d0:	40012100 	.word	0x40012100
 80016d4:	40012200 	.word	0x40012200

080016d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1c>
 800172c:	2302      	movs	r3, #2
 800172e:	e113      	b.n	8001958 <HAL_ADC_ConfigChannel+0x244>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b09      	cmp	r3, #9
 800173e:	d925      	bls.n	800178c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68d9      	ldr	r1, [r3, #12]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1e      	subs	r3, #30
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68d9      	ldr	r1, [r3, #12]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29b      	uxth	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	4603      	mov	r3, r0
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4403      	add	r3, r0
 800177e:	3b1e      	subs	r3, #30
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	e022      	b.n	80017d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	2207      	movs	r2, #7
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6919      	ldr	r1, [r3, #16]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4403      	add	r3, r0
 80017c8:	409a      	lsls	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d824      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b05      	subs	r3, #5
 80017ec:	221f      	movs	r2, #31
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b05      	subs	r3, #5
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	635a      	str	r2, [r3, #52]	; 0x34
 8001822:	e04c      	b.n	80018be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d824      	bhi.n	8001876 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3b23      	subs	r3, #35	; 0x23
 800183e:	221f      	movs	r2, #31
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43da      	mvns	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	400a      	ands	r2, r1
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	3b23      	subs	r3, #35	; 0x23
 8001868:	fa00 f203 	lsl.w	r2, r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
 8001874:	e023      	b.n	80018be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b41      	subs	r3, #65	; 0x41
 8001888:	221f      	movs	r2, #31
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b41      	subs	r3, #65	; 0x41
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_ADC_ConfigChannel+0x250>)
 80018c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_ADC_ConfigChannel+0x254>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d10f      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1d8>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d10b      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_ADC_ConfigChannel+0x254>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_ADC_ConfigChannel+0x23a>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_ADC_ConfigChannel+0x258>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x1f4>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b11      	cmp	r3, #17
 8001906:	d122      	bne.n	800194e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_ADC_ConfigChannel+0x258>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d111      	bne.n	800194e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_ADC_ConfigChannel+0x25c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_ADC_ConfigChannel+0x260>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	0c9a      	lsrs	r2, r3, #18
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001940:	e002      	b.n	8001948 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40012300 	.word	0x40012300
 8001968:	40012000 	.word	0x40012000
 800196c:	10000012 	.word	0x10000012
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <ADC_Init+0x1f0>)
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	431a      	orrs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	021a      	lsls	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <ADC_Init+0x1f4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d022      	beq.n	8001a56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	e00f      	b.n	8001a76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0202 	bic.w	r2, r2, #2
 8001a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6899      	ldr	r1, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e1b      	ldrb	r3, [r3, #24]
 8001a90:	005a      	lsls	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ac2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	035a      	lsls	r2, r3, #13
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	e007      	b.n	8001aec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	051a      	lsls	r2, r3, #20
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b2e:	025a      	lsls	r2, r3, #9
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6899      	ldr	r1, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	029a      	lsls	r2, r3, #10
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40012300 	.word	0x40012300
 8001b6c:	0f000001 	.word	0x0f000001

08001b70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13c      	bne.n	8001c04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d12b      	bne.n	8001bfc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d127      	bne.n	8001bfc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d119      	bne.n	8001bfc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0220 	bic.w	r2, r2, #32
 8001bd6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fd6b 	bl	80016d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c02:	e00e      	b.n	8001c22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fd75 	bl	8001700 <HAL_ADC_ErrorCallback>
}
 8001c16:	e004      	b.n	8001c22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fd57 	bl	80016ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f043 0204 	orr.w	r2, r3, #4
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff fd4a 	bl	8001700 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e014      	b.n	8001ed2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe fd9d 	bl	80009f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	795b      	ldrb	r3, [r3, #5]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_DAC_ConfigChannel+0x20>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e036      	b.n	8001f68 <HAL_DAC_ConfigChannel+0x8e>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2202      	movs	r2, #2
 8001f04:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f0e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	22c0      	movs	r2, #192	; 0xc0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43da      	mvns	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	400a      	ands	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fa46 	bl	8001410 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e099      	b.n	80020c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e00f      	b.n	8001fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7ff fa2d 	bl	8001410 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d908      	bls.n	8001fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e078      	b.n	80020c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e8      	bne.n	8001fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_DMA_Init+0x158>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4313      	orrs	r3, r2
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b04      	cmp	r3, #4
 8002064:	d117      	bne.n	8002096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa91 	bl	80025a0 <DMA_CheckFifoParam>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002092:	2301      	movs	r3, #1
 8002094:	e016      	b.n	80020c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa48 	bl	8002534 <DMA_CalcBaseAndBitshift>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	f010803f 	.word	0xf010803f

080020d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Start_IT+0x26>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e040      	b.n	8002178 <HAL_DMA_Start_IT+0xa8>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d12f      	bne.n	800216a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f9da 	bl	80024d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	223f      	movs	r2, #63	; 0x3f
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0216 	orr.w	r2, r2, #22
 800213e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e005      	b.n	8002176 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00c      	b.n	80021b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021d0:	4b92      	ldr	r3, [pc, #584]	; (800241c <HAL_DMA_IRQHandler+0x258>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a92      	ldr	r2, [pc, #584]	; (8002420 <HAL_DMA_IRQHandler+0x25c>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0a9b      	lsrs	r3, r3, #10
 80021dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2208      	movs	r2, #8
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01a      	beq.n	8002230 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0204 	bic.w	r2, r2, #4
 8002216:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	2208      	movs	r2, #8
 800221e:	409a      	lsls	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	2201      	movs	r2, #1
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f043 0202 	orr.w	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	2204      	movs	r2, #4
 800226c:	409a      	lsls	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2204      	movs	r2, #4
 800228a:	409a      	lsls	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f043 0204 	orr.w	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	2210      	movs	r2, #16
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d043      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03c      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	2210      	movs	r2, #16
 80022c0:	409a      	lsls	r2, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d024      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e01f      	b.n	8002334 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
 8002304:	e016      	b.n	8002334 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0208 	bic.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	2220      	movs	r2, #32
 800233a:	409a      	lsls	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 808e 	beq.w	8002462 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8086 	beq.w	8002462 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2220      	movs	r2, #32
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b05      	cmp	r3, #5
 800236c:	d136      	bne.n	80023dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0216 	bic.w	r2, r2, #22
 800237c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800238c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_DMA_IRQHandler+0x1da>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0208 	bic.w	r2, r2, #8
 80023ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	223f      	movs	r2, #63	; 0x3f
 80023b4:	409a      	lsls	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d07d      	beq.n	80024ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
        }
        return;
 80023da:	e078      	b.n	80024ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01c      	beq.n	8002424 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d108      	bne.n	800240a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d030      	beq.n	8002462 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
 8002408:	e02b      	b.n	8002462 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d027      	beq.n	8002462 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
 800241a:	e022      	b.n	8002462 <HAL_DMA_IRQHandler+0x29e>
 800241c:	20000000 	.word	0x20000000
 8002420:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0210 	bic.w	r2, r2, #16
 8002440:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	2b00      	cmp	r3, #0
 8002468:	d032      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d022      	beq.n	80024bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2205      	movs	r2, #5
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3301      	adds	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	429a      	cmp	r2, r3
 8002498:	d307      	bcc.n	80024aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f2      	bne.n	800248e <HAL_DMA_IRQHandler+0x2ca>
 80024a8:	e000      	b.n	80024ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024ce:	bf00      	nop
    }
  }
}
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop

080024d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d108      	bne.n	8002518 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002516:	e007      	b.n	8002528 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3b10      	subs	r3, #16
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <DMA_CalcBaseAndBitshift+0x64>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <DMA_CalcBaseAndBitshift+0x68>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d909      	bls.n	8002576 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	; 0x58
 8002574:	e007      	b.n	8002586 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800257e:	f023 0303 	bic.w	r3, r3, #3
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	aaaaaaab 	.word	0xaaaaaaab
 800259c:	080050ec 	.word	0x080050ec

080025a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11f      	bne.n	80025fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d855      	bhi.n	800266c <DMA_CheckFifoParam+0xcc>
 80025c0:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <DMA_CheckFifoParam+0x28>)
 80025c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c6:	bf00      	nop
 80025c8:	080025d9 	.word	0x080025d9
 80025cc:	080025eb 	.word	0x080025eb
 80025d0:	080025d9 	.word	0x080025d9
 80025d4:	0800266d 	.word	0x0800266d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d045      	beq.n	8002670 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e8:	e042      	b.n	8002670 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025f2:	d13f      	bne.n	8002674 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e03c      	b.n	8002674 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	d121      	bne.n	8002648 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d836      	bhi.n	8002678 <DMA_CheckFifoParam+0xd8>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <DMA_CheckFifoParam+0x70>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	08002627 	.word	0x08002627
 8002618:	08002621 	.word	0x08002621
 800261c:	08002639 	.word	0x08002639
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      break;
 8002624:	e02f      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d024      	beq.n	800267c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002636:	e021      	b.n	800267c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002640:	d11e      	bne.n	8002680 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002646:	e01b      	b.n	8002680 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <DMA_CheckFifoParam+0xb4>
 800264e:	2b03      	cmp	r3, #3
 8002650:	d003      	beq.n	800265a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002652:	e018      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e015      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00e      	beq.n	8002684 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      break;
 800266a:	e00b      	b.n	8002684 <DMA_CheckFifoParam+0xe4>
      break;
 800266c:	bf00      	nop
 800266e:	e00a      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;
 8002670:	bf00      	nop
 8002672:	e008      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;
 8002674:	bf00      	nop
 8002676:	e006      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;
 8002678:	bf00      	nop
 800267a:	e004      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;
 800267c:	bf00      	nop
 800267e:	e002      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;   
 8002680:	bf00      	nop
 8002682:	e000      	b.n	8002686 <DMA_CheckFifoParam+0xe6>
      break;
 8002684:	bf00      	nop
    }
  } 
  
  return status; 
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80026a4:	4baa      	ldr	r3, [pc, #680]	; (8002950 <HAL_ETH_Init+0x2bc>)
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e185      	b.n	80029c6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fa3e 	bl	8000b50 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	4b9e      	ldr	r3, [pc, #632]	; (8002954 <HAL_ETH_Init+0x2c0>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	4a9d      	ldr	r2, [pc, #628]	; (8002954 <HAL_ETH_Init+0x2c0>)
 80026de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e2:	6453      	str	r3, [r2, #68]	; 0x44
 80026e4:	4b9b      	ldr	r3, [pc, #620]	; (8002954 <HAL_ETH_Init+0x2c0>)
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026f0:	4b99      	ldr	r3, [pc, #612]	; (8002958 <HAL_ETH_Init+0x2c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a98      	ldr	r2, [pc, #608]	; (8002958 <HAL_ETH_Init+0x2c4>)
 80026f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026fc:	4b96      	ldr	r3, [pc, #600]	; (8002958 <HAL_ETH_Init+0x2c4>)
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4994      	ldr	r1, [pc, #592]	; (8002958 <HAL_ETH_Init+0x2c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002722:	f7fe fe75 	bl	8001410 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002728:	e011      	b.n	800274e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800272a:	f7fe fe71 	bl	8001410 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002738:	d909      	bls.n	800274e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2203      	movs	r2, #3
 800273e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e13b      	b.n	80029c6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e4      	bne.n	800272a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f023 031c 	bic.w	r3, r3, #28
 800276e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002770:	f001 f9d6 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8002774:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4a78      	ldr	r2, [pc, #480]	; (800295c <HAL_ETH_Init+0x2c8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d908      	bls.n	8002790 <HAL_ETH_Init+0xfc>
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4a77      	ldr	r2, [pc, #476]	; (8002960 <HAL_ETH_Init+0x2cc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d804      	bhi.n	8002790 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e027      	b.n	80027e0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4a73      	ldr	r2, [pc, #460]	; (8002960 <HAL_ETH_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d908      	bls.n	80027aa <HAL_ETH_Init+0x116>
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4a72      	ldr	r2, [pc, #456]	; (8002964 <HAL_ETH_Init+0x2d0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d804      	bhi.n	80027aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f043 030c 	orr.w	r3, r3, #12
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	e01a      	b.n	80027e0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4a6d      	ldr	r2, [pc, #436]	; (8002964 <HAL_ETH_Init+0x2d0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d903      	bls.n	80027ba <HAL_ETH_Init+0x126>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4a6c      	ldr	r2, [pc, #432]	; (8002968 <HAL_ETH_Init+0x2d4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d911      	bls.n	80027de <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_ETH_Init+0x2d4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d908      	bls.n	80027d4 <HAL_ETH_Init+0x140>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4a69      	ldr	r2, [pc, #420]	; (800296c <HAL_ETH_Init+0x2d8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d804      	bhi.n	80027d4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e005      	b.n	80027e0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e000      	b.n	80027e0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80027de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80027e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027ec:	2100      	movs	r1, #0
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f956 	bl	8002aa0 <HAL_ETH_WritePHYRegister>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80027fe:	6939      	ldr	r1, [r7, #16]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f9b3 	bl	8002b6c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0d9      	b.n	80029c6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002812:	20ff      	movs	r0, #255	; 0xff
 8002814:	f7fe fe08 	bl	8001428 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a7 	beq.w	8002970 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002822:	f7fe fdf5 	bl	8001410 <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	461a      	mov	r2, r3
 800282e:	2101      	movs	r1, #1
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8cd 	bl	80029d0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002836:	f7fe fdeb 	bl	8001410 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d90f      	bls.n	8002868 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f98c 	bl	8002b6c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0ae      	b.n	80029c6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0da      	beq.n	8002828 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002876:	2100      	movs	r1, #0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f911 	bl	8002aa0 <HAL_ETH_WritePHYRegister>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002888:	6939      	ldr	r1, [r7, #16]
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f96e 	bl	8002b6c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002898:	2301      	movs	r3, #1
 800289a:	e094      	b.n	80029c6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800289c:	f7fe fdb8 	bl	8001410 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	461a      	mov	r2, r3
 80028a8:	2101      	movs	r1, #1
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f890 	bl	80029d0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80028b0:	f7fe fdae 	bl	8001410 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d90f      	bls.n	80028e2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f94f 	bl	8002b6c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e071      	b.n	80029c6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0da      	beq.n	80028a2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	461a      	mov	r2, r3
 80028f2:	211f      	movs	r1, #31
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f86b 	bl	80029d0 <HAL_ETH_ReadPHYRegister>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f930 	bl	8002b6c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002914:	2301      	movs	r3, #1
 8002916:	e056      	b.n	80029c6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	e002      	b.n	8002932 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	e037      	b.n	80029b4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e032      	b.n	80029b4 <HAL_ETH_Init+0x320>
 800294e:	bf00      	nop
 8002950:	03938700 	.word	0x03938700
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	01312cff 	.word	0x01312cff
 8002960:	02160ebf 	.word	0x02160ebf
 8002964:	039386ff 	.word	0x039386ff
 8002968:	05f5e0ff 	.word	0x05f5e0ff
 800296c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	08db      	lsrs	r3, r3, #3
 8002976:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002980:	4313      	orrs	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	2100      	movs	r1, #0
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f889 	bl	8002aa0 <HAL_ETH_WritePHYRegister>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8e6 	bl	8002b6c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e00c      	b.n	80029c6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80029ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80029b0:	f7fe fd3a 	bl	8001428 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8d8 	bl	8002b6c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop

080029d0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	460b      	mov	r3, r1
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b82      	cmp	r3, #130	; 0x82
 80029f0:	d101      	bne.n	80029f6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
 80029f4:	e050      	b.n	8002a98 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2282      	movs	r2, #130	; 0x82
 80029fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 031c 	and.w	r3, r3, #28
 8002a0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8a1b      	ldrh	r3, [r3, #16]
 8002a12:	02db      	lsls	r3, r3, #11
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 0302 	bic.w	r3, r3, #2
 8002a30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a42:	f7fe fce5 	bl	8001410 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a48:	e015      	b.n	8002a76 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002a4a:	f7fe fce1 	bl	8001410 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d309      	bcc.n	8002a6e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e014      	b.n	8002a98 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e4      	bne.n	8002a4a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b42      	cmp	r3, #66	; 0x42
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e04e      	b.n	8002b64 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2242      	movs	r2, #66	; 0x42
 8002aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 031c 	and.w	r3, r3, #28
 8002adc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8a1b      	ldrh	r3, [r3, #16]
 8002ae2:	02db      	lsls	r3, r3, #11
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	019b      	lsls	r3, r3, #6
 8002af0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b1c:	f7fe fc78 	bl	8001410 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b22:	e015      	b.n	8002b50 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002b24:	f7fe fc74 	bl	8001410 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d309      	bcc.n	8002b48 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e00d      	b.n	8002b64 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e4      	bne.n	8002b24 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0b0      	sub	sp, #192	; 0xc0
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b88:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b90:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002bb8:	e001      	b.n	8002bbe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002bd8:	2340      	movs	r3, #64	; 0x40
 8002bda:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c44:	4bac      	ldr	r3, [pc, #688]	; (8002ef8 <ETH_MACDMAConfig+0x38c>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002c50:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002c54:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002c58:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002c5e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002c62:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002c66:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002c6c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002c70:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002c74:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002c78:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002c7c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002c80:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002c82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f7fe fbc1 	bl	8001428 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cb0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cb4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002cb8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002cbe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002cc4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002cca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002cd0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002cd4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002cdc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cde:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cea:	2001      	movs	r0, #1
 8002cec:	f7fe fb9c 	bl	8001428 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cf8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d02:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d0c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d1c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d20:	4013      	ands	r3, r2
 8002d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d2a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002d30:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002d36:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002d3c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002d42:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002d48:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002d4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d5c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7fe fb5d 	bl	8001428 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d76:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7fe fb48 	bl	8001428 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002daa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002db4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002dea:	2300      	movs	r3, #0
 8002dec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df6:	3318      	adds	r3, #24
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <ETH_MACDMAConfig+0x390>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e0a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e0e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002e10:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002e12:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002e14:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002e16:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002e18:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002e1a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002e1c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002e1e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002e20:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002e22:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002e26:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002e2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3e:	3318      	adds	r3, #24
 8002e40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e44:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e4e:	3318      	adds	r3, #24
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fe fae6 	bl	8001428 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e64:	3318      	adds	r3, #24
 8002e66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e6a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e70:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002e74:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e78:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002e7c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e80:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002e82:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002e86:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e94:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7fe fabf 	bl	8001428 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eb6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10f      	bne.n	8002ee0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec8:	331c      	adds	r3, #28
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002edc:	331c      	adds	r3, #28
 8002ede:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f809 	bl	8002f00 <ETH_MACAddressConfig>
}
 8002eee:	bf00      	nop
 8002ef0:	37c0      	adds	r7, #192	; 0xc0
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	ff20810f 	.word	0xff20810f
 8002efc:	f8de3f23 	.word	0xf8de3f23

08002f00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3305      	adds	r3, #5
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	3204      	adds	r2, #4
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <ETH_MACAddressConfig+0x68>)
 8002f22:	4413      	add	r3, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3303      	adds	r3, #3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	061a      	lsls	r2, r3, #24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3302      	adds	r3, #2
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	4313      	orrs	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <ETH_MACAddressConfig+0x6c>)
 8002f52:	4413      	add	r3, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	6013      	str	r3, [r2, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40028040 	.word	0x40028040
 8002f6c:	40028044 	.word	0x40028044

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e177      	b.n	800327c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 8166 	bne.w	8003276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d00b      	beq.n	8002fca <HAL_GPIO_Init+0x5a>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d007      	beq.n	8002fca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fbe:	2b11      	cmp	r3, #17
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b12      	cmp	r3, #18
 8002fc8:	d130      	bne.n	800302c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0201 	and.w	r2, r3, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0xfc>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80c0 	beq.w	8003276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_GPIO_Init+0x320>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a64      	ldr	r2, [pc, #400]	; (8003290 <HAL_GPIO_Init+0x320>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_GPIO_Init+0x320>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003112:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_GPIO_Init+0x324>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_GPIO_Init+0x328>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d037      	beq.n	80031ae <HAL_GPIO_Init+0x23e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a56      	ldr	r2, [pc, #344]	; (800329c <HAL_GPIO_Init+0x32c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d031      	beq.n	80031aa <HAL_GPIO_Init+0x23a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a55      	ldr	r2, [pc, #340]	; (80032a0 <HAL_GPIO_Init+0x330>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02b      	beq.n	80031a6 <HAL_GPIO_Init+0x236>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_GPIO_Init+0x334>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d025      	beq.n	80031a2 <HAL_GPIO_Init+0x232>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a53      	ldr	r2, [pc, #332]	; (80032a8 <HAL_GPIO_Init+0x338>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01f      	beq.n	800319e <HAL_GPIO_Init+0x22e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_GPIO_Init+0x33c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d019      	beq.n	800319a <HAL_GPIO_Init+0x22a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a51      	ldr	r2, [pc, #324]	; (80032b0 <HAL_GPIO_Init+0x340>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0x226>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_GPIO_Init+0x344>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x222>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4f      	ldr	r2, [pc, #316]	; (80032b8 <HAL_GPIO_Init+0x348>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x21e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4e      	ldr	r2, [pc, #312]	; (80032bc <HAL_GPIO_Init+0x34c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x21a>
 8003186:	2309      	movs	r3, #9
 8003188:	e012      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800318a:	230a      	movs	r3, #10
 800318c:	e010      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800318e:	2308      	movs	r3, #8
 8003190:	e00e      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 8003192:	2307      	movs	r3, #7
 8003194:	e00c      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 8003196:	2306      	movs	r3, #6
 8003198:	e00a      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800319a:	2305      	movs	r3, #5
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800319e:	2304      	movs	r3, #4
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031ae:	2300      	movs	r3, #0
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c0:	4934      	ldr	r1, [pc, #208]	; (8003294 <HAL_GPIO_Init+0x324>)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ce:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <HAL_GPIO_Init+0x350>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f2:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_GPIO_Init+0x350>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_GPIO_Init+0x350>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321c:	4a28      	ldr	r2, [pc, #160]	; (80032c0 <HAL_GPIO_Init+0x350>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <HAL_GPIO_Init+0x350>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	f67f ae84 	bls.w	8002f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003284:	bf00      	nop
 8003286:	3724      	adds	r7, #36	; 0x24
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40021400 	.word	0x40021400
 80032b0:	40021800 	.word	0x40021800
 80032b4:	40021c00 	.word	0x40021c00
 80032b8:	40022000 	.word	0x40022000
 80032bc:	40022400 	.word	0x40022400
 80032c0:	40013c00 	.word	0x40013c00

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e25b      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d075      	beq.n	80033ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e2:	4ba3      	ldr	r3, [pc, #652]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00c      	beq.n	8003308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4ba0      	ldr	r3, [pc, #640]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d112      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b9d      	ldr	r3, [pc, #628]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b99      	ldr	r3, [pc, #612]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05b      	beq.n	80033cc <HAL_RCC_OscConfig+0x108>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d157      	bne.n	80033cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e236      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x74>
 800332a:	4b91      	ldr	r3, [pc, #580]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a90      	ldr	r2, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x98>
 8003342:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a87      	ldr	r2, [pc, #540]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 800335c:	4b84      	ldr	r3, [pc, #528]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a83      	ldr	r2, [pc, #524]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe f848 	bl	8001410 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f844 	bl	8001410 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1fb      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xc0>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe f834 	bl	8001410 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe f830 	bl	8001410 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1e7      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0xe8>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033da:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b62      	ldr	r3, [pc, #392]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b5c      	ldr	r3, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1bb      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4952      	ldr	r1, [pc, #328]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_OscConfig+0x2b0>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd ffe9 	bl	8001410 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd ffe5 	bl	8001410 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e19c      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4940      	ldr	r1, [pc, #256]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_OscConfig+0x2b0>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd ffc8 	bl	8001410 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fd ffc4 	bl	8001410 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e17b      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d030      	beq.n	8003510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCC_OscConfig+0x2b4>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd ffa8 	bl	8001410 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd ffa4 	bl	8001410 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e15b      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x200>
 80034e2:	e015      	b.n	8003510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_OscConfig+0x2b4>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7fd ff91 	bl	8001410 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fd ff8d 	bl	8001410 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e144      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a0 	beq.w	800365e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_OscConfig+0x2b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d121      	bne.n	800359e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_RCC_OscConfig+0x2b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <HAL_RCC_OscConfig+0x2b8>)
 8003560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003566:	f7fd ff53 	bl	8001410 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	e011      	b.n	8003592 <HAL_RCC_OscConfig+0x2ce>
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	42470000 	.word	0x42470000
 8003578:	42470e80 	.word	0x42470e80
 800357c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fd ff46 	bl	8001410 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0fd      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_OscConfig+0x4d4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	e01c      	b.n	80035ee <HAL_RCC_OscConfig+0x32a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x312>
 80035bc:	4b77      	ldr	r3, [pc, #476]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4a76      	ldr	r2, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70
 80035c8:	4b74      	ldr	r3, [pc, #464]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a73      	ldr	r2, [pc, #460]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	e00b      	b.n	80035ee <HAL_RCC_OscConfig+0x32a>
 80035d6:	4b71      	ldr	r3, [pc, #452]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a70      	ldr	r2, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	4b6e      	ldr	r3, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a6d      	ldr	r2, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d015      	beq.n	8003622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fd ff0b 	bl	8001410 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd ff07 	bl	8001410 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0bc      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ee      	beq.n	80035fe <HAL_RCC_OscConfig+0x33a>
 8003620:	e014      	b.n	800364c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003622:	f7fd fef5 	bl	8001410 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fd fef1 	bl	8001410 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0a6      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003640:	4b56      	ldr	r3, [pc, #344]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ee      	bne.n	800362a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d105      	bne.n	800365e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003652:	4b52      	ldr	r3, [pc, #328]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a51      	ldr	r2, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8092 	beq.w	800378c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d05c      	beq.n	800372e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d141      	bne.n	8003700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fd fec5 	bl	8001410 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368a:	f7fd fec1 	bl	8001410 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e078      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369c:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	019b      	lsls	r3, r3, #6
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	061b      	lsls	r3, r3, #24
 80036cc:	4933      	ldr	r1, [pc, #204]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd fe9a 	bl	8001410 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd fe96 	bl	8001410 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e04d      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x41c>
 80036fe:	e045      	b.n	800378c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fd fe83 	bl	8001410 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd fe7f 	bl	8001410 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e036      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003720:	4b1e      	ldr	r3, [pc, #120]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x44a>
 800372c:	e02e      	b.n	800378c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e029      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	429a      	cmp	r2, r3
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d115      	bne.n	8003788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003762:	4013      	ands	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003768:	4293      	cmp	r3, r2
 800376a:	d10d      	bne.n	8003788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40007000 	.word	0x40007000
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470060 	.word	0x42470060

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0cc      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d90c      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b65      	ldr	r3, [pc, #404]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a52      	ldr	r2, [pc, #328]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800381a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	494d      	ldr	r1, [pc, #308]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d044      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d119      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d003      	beq.n	8003862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	2b03      	cmp	r3, #3
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e067      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4934      	ldr	r1, [pc, #208]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7fd fdbc 	bl	8001410 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7fd fdb8 	bl	8001410 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 020c 	and.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1eb      	bne.n	800389c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d20c      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4916      	ldr	r1, [pc, #88]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	490e      	ldr	r1, [pc, #56]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f821 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800392e:	4601      	mov	r1, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	5cd3      	ldrb	r3, [r2, r3]
 800393e:	fa21 f303 	lsr.w	r3, r1, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fd1c 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00
 8003960:	40023800 	.word	0x40023800
 8003964:	080050d4 	.word	0x080050d4
 8003968:	20000000 	.word	0x20000000
 800396c:	20000004 	.word	0x20000004

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	2300      	movs	r3, #0
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d007      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x32>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d008      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x38>
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80b4 	bne.w	8003b04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800399e:	60bb      	str	r3, [r7, #8]
       break;
 80039a0:	e0b3      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039a4:	60bb      	str	r3, [r7, #8]
      break;
 80039a6:	e0b0      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b2:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d04a      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039be:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	f04f 0400 	mov.w	r4, #0
 80039c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	ea03 0501 	and.w	r5, r3, r1
 80039d4:	ea04 0602 	and.w	r6, r4, r2
 80039d8:	4629      	mov	r1, r5
 80039da:	4632      	mov	r2, r6
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	f04f 0400 	mov.w	r4, #0
 80039e4:	0154      	lsls	r4, r2, #5
 80039e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039ea:	014b      	lsls	r3, r1, #5
 80039ec:	4619      	mov	r1, r3
 80039ee:	4622      	mov	r2, r4
 80039f0:	1b49      	subs	r1, r1, r5
 80039f2:	eb62 0206 	sbc.w	r2, r2, r6
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	f04f 0400 	mov.w	r4, #0
 80039fe:	0194      	lsls	r4, r2, #6
 8003a00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a04:	018b      	lsls	r3, r1, #6
 8003a06:	1a5b      	subs	r3, r3, r1
 8003a08:	eb64 0402 	sbc.w	r4, r4, r2
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	00e2      	lsls	r2, r4, #3
 8003a16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a1a:	00d9      	lsls	r1, r3, #3
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4614      	mov	r4, r2
 8003a20:	195b      	adds	r3, r3, r5
 8003a22:	eb44 0406 	adc.w	r4, r4, r6
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	0262      	lsls	r2, r4, #9
 8003a30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a34:	0259      	lsls	r1, r3, #9
 8003a36:	460b      	mov	r3, r1
 8003a38:	4614      	mov	r4, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f04f 0400 	mov.w	r4, #0
 8003a44:	461a      	mov	r2, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	f7fc fbd0 	bl	80001ec <__aeabi_uldivmod>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e049      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	f04f 0400 	mov.w	r4, #0
 8003a5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	ea03 0501 	and.w	r5, r3, r1
 8003a6a:	ea04 0602 	and.w	r6, r4, r2
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4632      	mov	r2, r6
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	0154      	lsls	r4, r2, #5
 8003a7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a80:	014b      	lsls	r3, r1, #5
 8003a82:	4619      	mov	r1, r3
 8003a84:	4622      	mov	r2, r4
 8003a86:	1b49      	subs	r1, r1, r5
 8003a88:	eb62 0206 	sbc.w	r2, r2, r6
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	0194      	lsls	r4, r2, #6
 8003a96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	1a5b      	subs	r3, r3, r1
 8003a9e:	eb64 0402 	sbc.w	r4, r4, r2
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	00e2      	lsls	r2, r4, #3
 8003aac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ab0:	00d9      	lsls	r1, r3, #3
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	195b      	adds	r3, r3, r5
 8003ab8:	eb44 0406 	adc.w	r4, r4, r6
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	02a2      	lsls	r2, r4, #10
 8003ac6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aca:	0299      	lsls	r1, r3, #10
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f04f 0400 	mov.w	r4, #0
 8003ada:	461a      	mov	r2, r3
 8003adc:	4623      	mov	r3, r4
 8003ade:	f7fc fb85 	bl	80001ec <__aeabi_uldivmod>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	3301      	adds	r3, #1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	60bb      	str	r3, [r7, #8]
      break;
 8003b02:	e002      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b06:	60bb      	str	r3, [r7, #8]
      break;
 8003b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4601      	mov	r1, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4a03      	ldr	r2, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	080050e4 	.word	0x080050e4

08003b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b64:	f7ff ffdc 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b68:	4601      	mov	r1, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0b5b      	lsrs	r3, r3, #13
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4a03      	ldr	r2, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	080050e4 	.word	0x080050e4

08003b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e056      	b.n	8003c48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fd f9d1 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	f003 0104 	and.w	r1, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e01d      	b.n	8003c9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fa9a 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fa14 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d007      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d122      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d11b      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f06f 0202 	mvn.w	r2, #2
 8003d1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9a5 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003d36:	e005      	b.n	8003d44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f997 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9a8 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d122      	bne.n	8003d9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d11b      	bne.n	8003d9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0204 	mvn.w	r2, #4
 8003d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f97b 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003d8a:	e005      	b.n	8003d98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f96d 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f97e 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d122      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d11b      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f06f 0208 	mvn.w	r2, #8
 8003dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f951 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003dde:	e005      	b.n	8003dec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f943 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f954 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d122      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d11b      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f06f 0210 	mvn.w	r2, #16
 8003e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f927 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003e32:	e005      	b.n	8003e40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f919 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f92a 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10e      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0201 	mvn.w	r2, #1
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fd f825 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d10e      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d107      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 facf 	bl	800443c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d10e      	bne.n	8003eca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8ef 	bl	80040a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0220 	mvn.w	r2, #32
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fa99 	bl	8004428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_ConfigClockSource+0x18>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e0a6      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x166>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d067      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x120>
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d80b      	bhi.n	8003f6a <HAL_TIM_ConfigClockSource+0x6c>
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d073      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x140>
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d802      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x62>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d06f      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f5e:	e078      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d06c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x140>
 8003f64:	2b30      	cmp	r3, #48	; 0x30
 8003f66:	d06a      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f68:	e073      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f6a:	2b70      	cmp	r3, #112	; 0x70
 8003f6c:	d00d      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x8c>
 8003f6e:	2b70      	cmp	r3, #112	; 0x70
 8003f70:	d804      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x7e>
 8003f72:	2b50      	cmp	r3, #80	; 0x50
 8003f74:	d033      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0xe0>
 8003f76:	2b60      	cmp	r3, #96	; 0x60
 8003f78:	d041      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f7a:	e06a      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f80:	d066      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x152>
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f86:	d017      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f88:	e063      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f000 f9a9 	bl	80042f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
      break;
 8003fb6:	e04c      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f000 f992 	bl	80042f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fda:	609a      	str	r2, [r3, #8]
      break;
 8003fdc:	e039      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 f906 	bl	80041fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2150      	movs	r1, #80	; 0x50
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f95f 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e029      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 f925 	bl	800425a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2160      	movs	r1, #96	; 0x60
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f94f 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 800401c:	e019      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 f8e6 	bl	80041fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2140      	movs	r1, #64	; 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f93f 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 800403c:	e009      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f000 f936 	bl	80042ba <TIM_ITRx_SetConfig>
      break;
 800404e:	e000      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a40      	ldr	r2, [pc, #256]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3d      	ldr	r2, [pc, #244]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3b      	ldr	r2, [pc, #236]	; (80041dc <TIM_Base_SetConfig+0x120>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3a      	ldr	r2, [pc, #232]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2f      	ldr	r2, [pc, #188]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d027      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d023      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <TIM_Base_SetConfig+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d017      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_Base_SetConfig+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <TIM_Base_SetConfig+0x13c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0xf8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d103      	bne.n	80041bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800
 80041f0:	40001800 	.word	0x40001800
 80041f4:	40001c00 	.word	0x40001c00
 80041f8:	40002000 	.word	0x40002000

080041fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0201 	bic.w	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 030a 	bic.w	r3, r3, #10
 8004238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f023 0210 	bic.w	r2, r3, #16
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f043 0307 	orr.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800430a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	021a      	lsls	r2, r3, #8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	431a      	orrs	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e05a      	b.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d01d      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10c      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40010400 	.word	0x40010400
 8004420:	40014000 	.word	0x40014000
 8004424:	40001800 	.word	0x40001800

08004428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e03f      	b.n	80044e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fc feea 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fa69 	bl	800496c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_UART_IRQHandler+0x52>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f996 	bl	8004868 <UART_Receive_IT>
      return;
 800453c:	e0d1      	b.n	80046e2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80b0 	beq.w	80046a6 <HAL_UART_IRQHandler+0x1ba>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_UART_IRQHandler+0x70>
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a5 	beq.w	80046a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_UART_IRQHandler+0x90>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_UART_IRQHandler+0xb0>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	f043 0202 	orr.w	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_UART_IRQHandler+0xd0>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	f043 0204 	orr.w	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00f      	beq.n	80045e6 <HAL_UART_IRQHandler+0xfa>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_UART_IRQHandler+0xee>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d078      	beq.n	80046e0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_UART_IRQHandler+0x11c>
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f930 	bl	8004868 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_UART_IRQHandler+0x144>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d031      	beq.n	8004694 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f879 	bl	8004728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d123      	bne.n	800468c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004652:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <HAL_UART_IRQHandler+0x1fc>)
 8004662:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fd89 	bl	8002180 <HAL_DMA_Abort_IT>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d016      	beq.n	80046a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467e:	4610      	mov	r0, r2
 8004680:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004682:	e00e      	b.n	80046a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f845 	bl	8004714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468a:	e00a      	b.n	80046a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f841 	bl	8004714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004692:	e006      	b.n	80046a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f83d 	bl	8004714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80046a0:	e01e      	b.n	80046e0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a2:	bf00      	nop
    return;
 80046a4:	e01c      	b.n	80046e0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1d6>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f866 	bl	800478c <UART_Transmit_IT>
    return;
 80046c0:	e00f      	b.n	80046e2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1f6>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8ae 	bl	8004838 <UART_EndTransmit_IT>
    return;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80046e0:	bf00      	nop
  }
}
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	08004765 	.word	0x08004765

080046ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800473e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff ffc8 	bl	8004714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b21      	cmp	r3, #33	; 0x21
 800479e:	d144      	bne.n	800482a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d11a      	bne.n	80047e0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047be:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]
 80047d2:	e00e      	b.n	80047f2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]
 80047de:	e008      	b.n	80047f2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	1c59      	adds	r1, r3, #1
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6211      	str	r1, [r2, #32]
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4619      	mov	r1, r3
 8004800:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004814:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004824:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff47 	bl	80046ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b22      	cmp	r3, #34	; 0x22
 800487a:	d171      	bne.n	8004960 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d123      	bne.n	80048ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10e      	bne.n	80048b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
 80048b0:	e029      	b.n	8004906 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
 80048cc:	e01b      	b.n	8004906 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6858      	ldr	r0, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	1c59      	adds	r1, r3, #1
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6291      	str	r1, [r2, #40]	; 0x28
 80048e6:	b2c2      	uxtb	r2, r0
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e00c      	b.n	8004906 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	1c58      	adds	r0, r3, #1
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	6288      	str	r0, [r1, #40]	; 0x28
 80048fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29b      	uxth	r3, r3
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4619      	mov	r1, r3
 8004914:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004916:	2b00      	cmp	r3, #0
 8004918:	d120      	bne.n	800495c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0220 	bic.w	r2, r2, #32
 8004928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fed4 	bl	8004700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e002      	b.n	8004962 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049ae:	f023 030c 	bic.w	r3, r3, #12
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049da:	f040 818b 	bne.w	8004cf4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4ac1      	ldr	r2, [pc, #772]	; (8004ce8 <UART_SetConfig+0x37c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d005      	beq.n	80049f4 <UART_SetConfig+0x88>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4abf      	ldr	r2, [pc, #764]	; (8004cec <UART_SetConfig+0x380>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 80bd 	bne.w	8004b6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049f4:	f7ff f8b4 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 80049f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	461d      	mov	r5, r3
 80049fe:	f04f 0600 	mov.w	r6, #0
 8004a02:	46a8      	mov	r8, r5
 8004a04:	46b1      	mov	r9, r6
 8004a06:	eb18 0308 	adds.w	r3, r8, r8
 8004a0a:	eb49 0409 	adc.w	r4, r9, r9
 8004a0e:	4698      	mov	r8, r3
 8004a10:	46a1      	mov	r9, r4
 8004a12:	eb18 0805 	adds.w	r8, r8, r5
 8004a16:	eb49 0906 	adc.w	r9, r9, r6
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a2e:	4688      	mov	r8, r1
 8004a30:	4691      	mov	r9, r2
 8004a32:	eb18 0005 	adds.w	r0, r8, r5
 8004a36:	eb49 0106 	adc.w	r1, r9, r6
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	461d      	mov	r5, r3
 8004a40:	f04f 0600 	mov.w	r6, #0
 8004a44:	196b      	adds	r3, r5, r5
 8004a46:	eb46 0406 	adc.w	r4, r6, r6
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f7fb fbcd 	bl	80001ec <__aeabi_uldivmod>
 8004a52:	4603      	mov	r3, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	461a      	mov	r2, r3
 8004a58:	4ba5      	ldr	r3, [pc, #660]	; (8004cf0 <UART_SetConfig+0x384>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	461d      	mov	r5, r3
 8004a68:	f04f 0600 	mov.w	r6, #0
 8004a6c:	46a9      	mov	r9, r5
 8004a6e:	46b2      	mov	sl, r6
 8004a70:	eb19 0309 	adds.w	r3, r9, r9
 8004a74:	eb4a 040a 	adc.w	r4, sl, sl
 8004a78:	4699      	mov	r9, r3
 8004a7a:	46a2      	mov	sl, r4
 8004a7c:	eb19 0905 	adds.w	r9, r9, r5
 8004a80:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a98:	4689      	mov	r9, r1
 8004a9a:	4692      	mov	sl, r2
 8004a9c:	eb19 0005 	adds.w	r0, r9, r5
 8004aa0:	eb4a 0106 	adc.w	r1, sl, r6
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	f04f 0600 	mov.w	r6, #0
 8004aae:	196b      	adds	r3, r5, r5
 8004ab0:	eb46 0406 	adc.w	r4, r6, r6
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	f7fb fb98 	bl	80001ec <__aeabi_uldivmod>
 8004abc:	4603      	mov	r3, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <UART_SetConfig+0x384>)
 8004ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	2164      	movs	r1, #100	; 0x64
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	3332      	adds	r3, #50	; 0x32
 8004ad6:	4a86      	ldr	r2, [pc, #536]	; (8004cf0 <UART_SetConfig+0x384>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae4:	4498      	add	r8, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	461d      	mov	r5, r3
 8004aea:	f04f 0600 	mov.w	r6, #0
 8004aee:	46a9      	mov	r9, r5
 8004af0:	46b2      	mov	sl, r6
 8004af2:	eb19 0309 	adds.w	r3, r9, r9
 8004af6:	eb4a 040a 	adc.w	r4, sl, sl
 8004afa:	4699      	mov	r9, r3
 8004afc:	46a2      	mov	sl, r4
 8004afe:	eb19 0905 	adds.w	r9, r9, r5
 8004b02:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b1a:	4689      	mov	r9, r1
 8004b1c:	4692      	mov	sl, r2
 8004b1e:	eb19 0005 	adds.w	r0, r9, r5
 8004b22:	eb4a 0106 	adc.w	r1, sl, r6
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	f04f 0600 	mov.w	r6, #0
 8004b30:	196b      	adds	r3, r5, r5
 8004b32:	eb46 0406 	adc.w	r4, r6, r6
 8004b36:	461a      	mov	r2, r3
 8004b38:	4623      	mov	r3, r4
 8004b3a:	f7fb fb57 	bl	80001ec <__aeabi_uldivmod>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	461a      	mov	r2, r3
 8004b44:	4b6a      	ldr	r3, [pc, #424]	; (8004cf0 <UART_SetConfig+0x384>)
 8004b46:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2164      	movs	r1, #100	; 0x64
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <UART_SetConfig+0x384>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 0207 	and.w	r2, r3, #7
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4442      	add	r2, r8
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	e26f      	b.n	800504e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b6e:	f7fe ffe3 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004b72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	461d      	mov	r5, r3
 8004b78:	f04f 0600 	mov.w	r6, #0
 8004b7c:	46a8      	mov	r8, r5
 8004b7e:	46b1      	mov	r9, r6
 8004b80:	eb18 0308 	adds.w	r3, r8, r8
 8004b84:	eb49 0409 	adc.w	r4, r9, r9
 8004b88:	4698      	mov	r8, r3
 8004b8a:	46a1      	mov	r9, r4
 8004b8c:	eb18 0805 	adds.w	r8, r8, r5
 8004b90:	eb49 0906 	adc.w	r9, r9, r6
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ba0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ba4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ba8:	4688      	mov	r8, r1
 8004baa:	4691      	mov	r9, r2
 8004bac:	eb18 0005 	adds.w	r0, r8, r5
 8004bb0:	eb49 0106 	adc.w	r1, r9, r6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	461d      	mov	r5, r3
 8004bba:	f04f 0600 	mov.w	r6, #0
 8004bbe:	196b      	adds	r3, r5, r5
 8004bc0:	eb46 0406 	adc.w	r4, r6, r6
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	f7fb fb10 	bl	80001ec <__aeabi_uldivmod>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <UART_SetConfig+0x384>)
 8004bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	461d      	mov	r5, r3
 8004be2:	f04f 0600 	mov.w	r6, #0
 8004be6:	46a9      	mov	r9, r5
 8004be8:	46b2      	mov	sl, r6
 8004bea:	eb19 0309 	adds.w	r3, r9, r9
 8004bee:	eb4a 040a 	adc.w	r4, sl, sl
 8004bf2:	4699      	mov	r9, r3
 8004bf4:	46a2      	mov	sl, r4
 8004bf6:	eb19 0905 	adds.w	r9, r9, r5
 8004bfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c12:	4689      	mov	r9, r1
 8004c14:	4692      	mov	sl, r2
 8004c16:	eb19 0005 	adds.w	r0, r9, r5
 8004c1a:	eb4a 0106 	adc.w	r1, sl, r6
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	461d      	mov	r5, r3
 8004c24:	f04f 0600 	mov.w	r6, #0
 8004c28:	196b      	adds	r3, r5, r5
 8004c2a:	eb46 0406 	adc.w	r4, r6, r6
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4623      	mov	r3, r4
 8004c32:	f7fb fadb 	bl	80001ec <__aeabi_uldivmod>
 8004c36:	4603      	mov	r3, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <UART_SetConfig+0x384>)
 8004c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2164      	movs	r1, #100	; 0x64
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	3332      	adds	r3, #50	; 0x32
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <UART_SetConfig+0x384>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c5e:	4498      	add	r8, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	461d      	mov	r5, r3
 8004c64:	f04f 0600 	mov.w	r6, #0
 8004c68:	46a9      	mov	r9, r5
 8004c6a:	46b2      	mov	sl, r6
 8004c6c:	eb19 0309 	adds.w	r3, r9, r9
 8004c70:	eb4a 040a 	adc.w	r4, sl, sl
 8004c74:	4699      	mov	r9, r3
 8004c76:	46a2      	mov	sl, r4
 8004c78:	eb19 0905 	adds.w	r9, r9, r5
 8004c7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c80:	f04f 0100 	mov.w	r1, #0
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c94:	4689      	mov	r9, r1
 8004c96:	4692      	mov	sl, r2
 8004c98:	eb19 0005 	adds.w	r0, r9, r5
 8004c9c:	eb4a 0106 	adc.w	r1, sl, r6
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	461d      	mov	r5, r3
 8004ca6:	f04f 0600 	mov.w	r6, #0
 8004caa:	196b      	adds	r3, r5, r5
 8004cac:	eb46 0406 	adc.w	r4, r6, r6
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	f7fb fa9a 	bl	80001ec <__aeabi_uldivmod>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <UART_SetConfig+0x384>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	; 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	3332      	adds	r3, #50	; 0x32
 8004cd2:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <UART_SetConfig+0x384>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 0207 	and.w	r2, r3, #7
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4442      	add	r2, r8
 8004ce4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ce6:	e1b2      	b.n	800504e <UART_SetConfig+0x6e2>
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4ad7      	ldr	r2, [pc, #860]	; (8005058 <UART_SetConfig+0x6ec>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d005      	beq.n	8004d0a <UART_SetConfig+0x39e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4ad6      	ldr	r2, [pc, #856]	; (800505c <UART_SetConfig+0x6f0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	f040 80d1 	bne.w	8004eac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d0a:	f7fe ff29 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 8004d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	469a      	mov	sl, r3
 8004d14:	f04f 0b00 	mov.w	fp, #0
 8004d18:	46d0      	mov	r8, sl
 8004d1a:	46d9      	mov	r9, fp
 8004d1c:	eb18 0308 	adds.w	r3, r8, r8
 8004d20:	eb49 0409 	adc.w	r4, r9, r9
 8004d24:	4698      	mov	r8, r3
 8004d26:	46a1      	mov	r9, r4
 8004d28:	eb18 080a 	adds.w	r8, r8, sl
 8004d2c:	eb49 090b 	adc.w	r9, r9, fp
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d44:	4688      	mov	r8, r1
 8004d46:	4691      	mov	r9, r2
 8004d48:	eb1a 0508 	adds.w	r5, sl, r8
 8004d4c:	eb4b 0609 	adc.w	r6, fp, r9
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	0094      	lsls	r4, r2, #2
 8004d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d68:	008b      	lsls	r3, r1, #2
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	4631      	mov	r1, r6
 8004d72:	f7fb fa3b 	bl	80001ec <__aeabi_uldivmod>
 8004d76:	4603      	mov	r3, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4bb8      	ldr	r3, [pc, #736]	; (8005060 <UART_SetConfig+0x6f4>)
 8004d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	469b      	mov	fp, r3
 8004d8c:	f04f 0c00 	mov.w	ip, #0
 8004d90:	46d9      	mov	r9, fp
 8004d92:	46e2      	mov	sl, ip
 8004d94:	eb19 0309 	adds.w	r3, r9, r9
 8004d98:	eb4a 040a 	adc.w	r4, sl, sl
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	46a2      	mov	sl, r4
 8004da0:	eb19 090b 	adds.w	r9, r9, fp
 8004da4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004da8:	f04f 0100 	mov.w	r1, #0
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dbc:	4689      	mov	r9, r1
 8004dbe:	4692      	mov	sl, r2
 8004dc0:	eb1b 0509 	adds.w	r5, fp, r9
 8004dc4:	eb4c 060a 	adc.w	r6, ip, sl
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	0094      	lsls	r4, r2, #2
 8004ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004de0:	008b      	lsls	r3, r1, #2
 8004de2:	461a      	mov	r2, r3
 8004de4:	4623      	mov	r3, r4
 8004de6:	4628      	mov	r0, r5
 8004de8:	4631      	mov	r1, r6
 8004dea:	f7fb f9ff 	bl	80001ec <__aeabi_uldivmod>
 8004dee:	4603      	mov	r3, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	461a      	mov	r2, r3
 8004df4:	4b9a      	ldr	r3, [pc, #616]	; (8005060 <UART_SetConfig+0x6f4>)
 8004df6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2164      	movs	r1, #100	; 0x64
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	3332      	adds	r3, #50	; 0x32
 8004e08:	4a95      	ldr	r2, [pc, #596]	; (8005060 <UART_SetConfig+0x6f4>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e14:	4498      	add	r8, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	469b      	mov	fp, r3
 8004e1a:	f04f 0c00 	mov.w	ip, #0
 8004e1e:	46d9      	mov	r9, fp
 8004e20:	46e2      	mov	sl, ip
 8004e22:	eb19 0309 	adds.w	r3, r9, r9
 8004e26:	eb4a 040a 	adc.w	r4, sl, sl
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	46a2      	mov	sl, r4
 8004e2e:	eb19 090b 	adds.w	r9, r9, fp
 8004e32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e4a:	4689      	mov	r9, r1
 8004e4c:	4692      	mov	sl, r2
 8004e4e:	eb1b 0509 	adds.w	r5, fp, r9
 8004e52:	eb4c 060a 	adc.w	r6, ip, sl
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	f04f 0400 	mov.w	r4, #0
 8004e68:	0094      	lsls	r4, r2, #2
 8004e6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e6e:	008b      	lsls	r3, r1, #2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4623      	mov	r3, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	4631      	mov	r1, r6
 8004e78:	f7fb f9b8 	bl	80001ec <__aeabi_uldivmod>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b77      	ldr	r3, [pc, #476]	; (8005060 <UART_SetConfig+0x6f4>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	; 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	3332      	adds	r3, #50	; 0x32
 8004e96:	4a72      	ldr	r2, [pc, #456]	; (8005060 <UART_SetConfig+0x6f4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4442      	add	r2, r8
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	e0d0      	b.n	800504e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe fe44 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004eb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	469a      	mov	sl, r3
 8004eb6:	f04f 0b00 	mov.w	fp, #0
 8004eba:	46d0      	mov	r8, sl
 8004ebc:	46d9      	mov	r9, fp
 8004ebe:	eb18 0308 	adds.w	r3, r8, r8
 8004ec2:	eb49 0409 	adc.w	r4, r9, r9
 8004ec6:	4698      	mov	r8, r3
 8004ec8:	46a1      	mov	r9, r4
 8004eca:	eb18 080a 	adds.w	r8, r8, sl
 8004ece:	eb49 090b 	adc.w	r9, r9, fp
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ede:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ee2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ee6:	4688      	mov	r8, r1
 8004ee8:	4691      	mov	r9, r2
 8004eea:	eb1a 0508 	adds.w	r5, sl, r8
 8004eee:	eb4b 0609 	adc.w	r6, fp, r9
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f04f 0400 	mov.w	r4, #0
 8004f04:	0094      	lsls	r4, r2, #2
 8004f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4623      	mov	r3, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	4631      	mov	r1, r6
 8004f14:	f7fb f96a 	bl	80001ec <__aeabi_uldivmod>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b50      	ldr	r3, [pc, #320]	; (8005060 <UART_SetConfig+0x6f4>)
 8004f20:	fba3 2302 	umull	r2, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	469b      	mov	fp, r3
 8004f2e:	f04f 0c00 	mov.w	ip, #0
 8004f32:	46d9      	mov	r9, fp
 8004f34:	46e2      	mov	sl, ip
 8004f36:	eb19 0309 	adds.w	r3, r9, r9
 8004f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8004f3e:	4699      	mov	r9, r3
 8004f40:	46a2      	mov	sl, r4
 8004f42:	eb19 090b 	adds.w	r9, r9, fp
 8004f46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f5e:	4689      	mov	r9, r1
 8004f60:	4692      	mov	sl, r2
 8004f62:	eb1b 0509 	adds.w	r5, fp, r9
 8004f66:	eb4c 060a 	adc.w	r6, ip, sl
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	f04f 0400 	mov.w	r4, #0
 8004f7c:	0094      	lsls	r4, r2, #2
 8004f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f82:	008b      	lsls	r3, r1, #2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4623      	mov	r3, r4
 8004f88:	4628      	mov	r0, r5
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	f7fb f92e 	bl	80001ec <__aeabi_uldivmod>
 8004f90:	4603      	mov	r3, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	461a      	mov	r2, r3
 8004f96:	4b32      	ldr	r3, [pc, #200]	; (8005060 <UART_SetConfig+0x6f4>)
 8004f98:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	2164      	movs	r1, #100	; 0x64
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	3332      	adds	r3, #50	; 0x32
 8004faa:	4a2d      	ldr	r2, [pc, #180]	; (8005060 <UART_SetConfig+0x6f4>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb6:	4498      	add	r8, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	469b      	mov	fp, r3
 8004fbc:	f04f 0c00 	mov.w	ip, #0
 8004fc0:	46d9      	mov	r9, fp
 8004fc2:	46e2      	mov	sl, ip
 8004fc4:	eb19 0309 	adds.w	r3, r9, r9
 8004fc8:	eb4a 040a 	adc.w	r4, sl, sl
 8004fcc:	4699      	mov	r9, r3
 8004fce:	46a2      	mov	sl, r4
 8004fd0:	eb19 090b 	adds.w	r9, r9, fp
 8004fd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fec:	4689      	mov	r9, r1
 8004fee:	4692      	mov	sl, r2
 8004ff0:	eb1b 0509 	adds.w	r5, fp, r9
 8004ff4:	eb4c 060a 	adc.w	r6, ip, sl
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	f04f 0400 	mov.w	r4, #0
 800500a:	0094      	lsls	r4, r2, #2
 800500c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005010:	008b      	lsls	r3, r1, #2
 8005012:	461a      	mov	r2, r3
 8005014:	4623      	mov	r3, r4
 8005016:	4628      	mov	r0, r5
 8005018:	4631      	mov	r1, r6
 800501a:	f7fb f8e7 	bl	80001ec <__aeabi_uldivmod>
 800501e:	4603      	mov	r3, r0
 8005020:	460c      	mov	r4, r1
 8005022:	461a      	mov	r2, r3
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <UART_SetConfig+0x6f4>)
 8005026:	fba3 1302 	umull	r1, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2164      	movs	r1, #100	; 0x64
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	; 0x32
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <UART_SetConfig+0x6f4>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4442      	add	r2, r8
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	e7ff      	b.n	800504e <UART_SetConfig+0x6e2>
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005058:	40011000 	.word	0x40011000
 800505c:	40011400 	.word	0x40011400
 8005060:	51eb851f 	.word	0x51eb851f

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0d      	ldr	r6, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1ba4      	subs	r4, r4, r6
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2500      	movs	r5, #0
 8005070:	42a5      	cmp	r5, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4e0b      	ldr	r6, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f000 f820 	bl	80050bc <_init>
 800507c:	1ba4      	subs	r4, r4, r6
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2500      	movs	r5, #0
 8005082:	42a5      	cmp	r5, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508c:	4798      	blx	r3
 800508e:	3501      	adds	r5, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005096:	4798      	blx	r3
 8005098:	3501      	adds	r5, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	080050fc 	.word	0x080050fc
 80050a0:	080050fc 	.word	0x080050fc
 80050a4:	080050fc 	.word	0x080050fc
 80050a8:	08005100 	.word	0x08005100

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
