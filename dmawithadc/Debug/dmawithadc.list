
dmawithadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd8  08002dd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de0  08002de0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002df4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002df4  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac37  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019d5  00000000  00000000  0002ac73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002d190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c56  00000000  00000000  0002dc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a8b  00000000  00000000  00050856  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6cf1  00000000  00000000  000592e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ffd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef4  00000000  00000000  00130050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002da8 	.word	0x08002da8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002da8 	.word	0x08002da8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 faa3 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f815 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f931 	bl	8000760 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fe:	f000 f871 	bl	80005e4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000502:	f000 f8cf 	bl	80006a4 <MX_TIM6_Init>
  MX_DMA_Init();
 8000506:	f000 f90b 	bl	8000720 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  uint32_t length = 2;
 800050a:	2302      	movs	r3, #2
 800050c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, pdata,length);
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4902      	ldr	r1, [pc, #8]	; (800051c <main+0x30>)
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x34>)
 8000514:	f000 fc88 	bl	8000e28 <HAL_ADC_Start_DMA>
 8000518:	e7f9      	b.n	800050e <main+0x22>
 800051a:	bf00      	nop
 800051c:	20000110 	.word	0x20000110
 8000520:	20000028 	.word	0x20000028

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 fc30 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <SystemClock_Config+0xb8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a22      	ldr	r2, [pc, #136]	; (80005dc <SystemClock_Config+0xb8>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b20      	ldr	r3, [pc, #128]	; (80005dc <SystemClock_Config+0xb8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <SystemClock_Config+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <SystemClock_Config+0xbc>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SystemClock_Config+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fe43 	bl	8002224 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a4:	f000 f8f6 	bl	8000794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f89e 	bl	8002704 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ce:	f000 f8e1 	bl	8000794 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_ADC1_Init+0xb4>)
 80005f8:	4a28      	ldr	r2, [pc, #160]	; (800069c <MX_ADC1_Init+0xb8>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_ADC1_Init+0xb4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_ADC1_Init+0xb4>)
 800060a:	2201      	movs	r2, #1
 800060c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000610:	2201      	movs	r2, #1
 8000612:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_ADC1_Init+0xb4>)
 800061e:	2200      	movs	r2, #0
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000624:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <MX_ADC1_Init+0xbc>)
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ADC1_Init+0xb4>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000630:	2202      	movs	r2, #2
 8000632:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000636:	2201      	movs	r2, #1
 8000638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_ADC1_Init+0xb4>)
 800063e:	2201      	movs	r2, #1
 8000640:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000644:	f000 fa6c 	bl	8000b20 <HAL_ADC_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800064e:	f000 f8a1 	bl	8000794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800065a:	2302      	movs	r3, #2
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000664:	f000 fcfa 	bl	800105c <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800066e:	f000 f891 	bl	8000794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000672:	2301      	movs	r3, #1
 8000674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_ADC1_Init+0xb4>)
 8000680:	f000 fcec 	bl	800105c <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800068a:	f000 f883 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000028 	.word	0x20000028
 800069c:	40012000 	.word	0x40012000
 80006a0:	0f000001 	.word	0x0f000001

080006a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_TIM6_Init+0x74>)
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <MX_TIM6_Init+0x78>)
 80006b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_TIM6_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_TIM6_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_TIM6_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_TIM6_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_TIM6_Init+0x74>)
 80006d2:	f002 f9af 	bl	8002a34 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80006dc:	f000 f85a 	bl	8000794 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80006e0:	2108      	movs	r1, #8
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_TIM6_Init+0x74>)
 80006e4:	f002 f9d1 	bl	8002a8a <HAL_TIM_OnePulse_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80006ee:	f000 f851 	bl	8000794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_TIM6_Init+0x74>)
 8000700:	f002 faaa 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 f843 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000d0 	.word	0x200000d0
 800071c:	40001000 	.word	0x40001000

08000720 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <MX_DMA_Init+0x3c>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_DMA_Init+0x3c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2038      	movs	r0, #56	; 0x38
 8000748:	f001 f81d 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800074c:	2038      	movs	r0, #56	; 0x38
 800074e:	f001 f836 	bl	80017be <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_GPIO_Init+0x30>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <MX_GPIO_Init+0x30>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_GPIO_Init+0x30>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <HAL_ADC_MspInit+0xec>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d15f      	bne.n	80008d6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <HAL_ADC_MspInit+0xf0>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <HAL_ADC_MspInit+0xf0>)
 8000820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <HAL_ADC_MspInit+0xf0>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <HAL_ADC_MspInit+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <HAL_ADC_MspInit+0xf0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <HAL_ADC_MspInit+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800084e:	2303      	movs	r3, #3
 8000850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4821      	ldr	r0, [pc, #132]	; (80008e8 <HAL_ADC_MspInit+0xf4>)
 8000862:	f001 fb35 	bl	8001ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_ADC_MspInit+0xfc>)
 800086a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 8000880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000884:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 8000890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000894:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 8000898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008aa:	4810      	ldr	r0, [pc, #64]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 80008ac:	f000 ffa2 	bl	80017f4 <HAL_DMA_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80008b6:	f7ff ff6d 	bl	8000794 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_ADC_MspInit+0xf8>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2012      	movs	r0, #18
 80008cc:	f000 ff5b 	bl	8001786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008d0:	2012      	movs	r0, #18
 80008d2:	f000 ff74 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40012000 	.word	0x40012000
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	20000070 	.word	0x20000070
 80008f0:	40026410 	.word	0x40026410

080008f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <HAL_TIM_Base_MspInit+0x3c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10d      	bne.n	8000922 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_Base_MspInit+0x40>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <HAL_TIM_Base_MspInit+0x40>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_TIM_Base_MspInit+0x40>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40001000 	.word	0x40001000
 8000934:	40023800 	.word	0x40023800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f8a8 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <ADC_IRQHandler+0x10>)
 800099a:	f000 f904 	bl	8000ba6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028

080009a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <DMA2_Stream0_IRQHandler+0x10>)
 80009ae:	f001 f827 	bl	8001a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000070 	.word	0x20000070

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SystemInit+0x28>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SystemInit+0x28>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SystemInit+0x28>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d6:	609a      	str	r2, [r3, #8]
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ee:	e003      	b.n	80009f8 <LoopCopyDataInit>

080009f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009f6:	3104      	adds	r1, #4

080009f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a00:	d3f6      	bcc.n	80009f0 <CopyDataInit>
  ldr  r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a04:	e002      	b.n	8000a0c <LoopFillZerobss>

08000a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a08:	f842 3b04 	str.w	r3, [r2], #4

08000a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a10:	d3f9      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ffd3 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 f99b 	bl	8002d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fd67 	bl	80004ec <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a20:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a24:	08002de8 	.word	0x08002de8
  ldr  r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a34:	20000118 	.word	0x20000118

08000a38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <CAN1_RX0_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 fe83 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fe98 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fe9b 	bl	80017da <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	f000 fe63 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000114 	.word	0x20000114

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000114 	.word	0x20000114

08000b20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e033      	b.n	8000b9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d109      	bne.n	8000b52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fe58 	bl	80007f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d118      	bne.n	8000b90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b66:	f023 0302 	bic.w	r3, r3, #2
 8000b6a:	f043 0202 	orr.w	r2, r3, #2
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 fba4 	bl	80012c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f023 0303 	bic.w	r3, r3, #3
 8000b86:	f043 0201 	orr.w	r2, r3, #1
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8e:	e001      	b.n	8000b94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	2b20      	cmp	r3, #32
 8000bd8:	bf0c      	ite	eq
 8000bda:	2301      	moveq	r3, #1
 8000bdc:	2300      	movne	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d049      	beq.n	8000c7c <HAL_ADC_IRQHandler+0xd6>
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d046      	beq.n	8000c7c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d12b      	bne.n	8000c6c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d127      	bne.n	8000c6c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d119      	bne.n	8000c6c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0220 	bic.w	r2, r2, #32
 8000c46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d105      	bne.n	8000c6c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f043 0201 	orr.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 f9cd 	bl	800100c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f06f 0212 	mvn.w	r2, #18
 8000c7a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9c:	2b80      	cmp	r3, #128	; 0x80
 8000c9e:	bf0c      	ite	eq
 8000ca0:	2301      	moveq	r3, #1
 8000ca2:	2300      	movne	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d057      	beq.n	8000d5e <HAL_ADC_IRQHandler+0x1b8>
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d054      	beq.n	8000d5e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d139      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d12b      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d124      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d11d      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d119      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d28:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d105      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f043 0201 	orr.w	r2, r3, #1
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 fc34 	bl	80015bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f06f 020c 	mvn.w	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2301      	moveq	r3, #1
 8000d6e:	2300      	movne	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	2b40      	cmp	r3, #64	; 0x40
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d017      	beq.n	8000dc0 <HAL_ADC_IRQHandler+0x21a>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d014      	beq.n	8000dc0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10d      	bne.n	8000dc0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f93f 	bl	8001034 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f06f 0201 	mvn.w	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	2b20      	cmp	r3, #32
 8000dcc:	bf0c      	ite	eq
 8000dce:	2301      	moveq	r3, #1
 8000dd0:	2300      	movne	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d015      	beq.n	8000e20 <HAL_ADC_IRQHandler+0x27a>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d012      	beq.n	8000e20 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f043 0202 	orr.w	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f06f 0220 	mvn.w	r2, #32
 8000e0e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f919 	bl	8001048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f06f 0220 	mvn.w	r2, #32
 8000e1e:	601a      	str	r2, [r3, #0]
  }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Start_DMA+0x1e>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e0cc      	b.n	8000fe0 <HAL_ADC_Start_DMA+0x1b8>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d018      	beq.n	8000e8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0201 	orr.w	r2, r2, #1
 8000e6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <HAL_ADC_Start_DMA+0x1c0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a5e      	ldr	r2, [pc, #376]	; (8000fec <HAL_ADC_Start_DMA+0x1c4>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9a      	lsrs	r2, r3, #18
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f9      	bne.n	8000e82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	f040 80a0 	bne.w	8000fde <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ea6:	f023 0301 	bic.w	r3, r3, #1
 8000eaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ec8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000edc:	d106      	bne.n	8000eec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f023 0206 	bic.w	r2, r3, #6
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8000eea:	e002      	b.n	8000ef2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <HAL_ADC_Start_DMA+0x1c8>)
 8000efc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f02:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <HAL_ADC_Start_DMA+0x1cc>)
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0a:	4a3b      	ldr	r2, [pc, #236]	; (8000ff8 <HAL_ADC_Start_DMA+0x1d0>)
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f12:	4a3a      	ldr	r2, [pc, #232]	; (8000ffc <HAL_ADC_Start_DMA+0x1d4>)
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	334c      	adds	r3, #76	; 0x4c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f000 fcfe 	bl	8001950 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d12a      	bne.n	8000fb6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a26      	ldr	r2, [pc, #152]	; (8001000 <HAL_ADC_Start_DMA+0x1d8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d015      	beq.n	8000f96 <HAL_ADC_Start_DMA+0x16e>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a25      	ldr	r2, [pc, #148]	; (8001004 <HAL_ADC_Start_DMA+0x1dc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d105      	bne.n	8000f80 <HAL_ADC_Start_DMA+0x158>
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <HAL_ADC_Start_DMA+0x1c8>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00a      	beq.n	8000f96 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <HAL_ADC_Start_DMA+0x1e0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d129      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1b6>
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_ADC_Start_DMA+0x1c8>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d823      	bhi.n	8000fde <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11c      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	e013      	b.n	8000fde <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <HAL_ADC_Start_DMA+0x1d8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d10e      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1b6>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d107      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fdc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	431bde83 	.word	0x431bde83
 8000ff0:	40012300 	.word	0x40012300
 8000ff4:	080014b9 	.word	0x080014b9
 8000ff8:	08001573 	.word	0x08001573
 8000ffc:	0800158f 	.word	0x0800158f
 8001000:	40012000 	.word	0x40012000
 8001004:	40012100 	.word	0x40012100
 8001008:	40012200 	.word	0x40012200

0800100c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1c>
 8001074:	2302      	movs	r3, #2
 8001076:	e113      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x244>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b09      	cmp	r3, #9
 8001086:	d925      	bls.n	80010d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	3b1e      	subs	r3, #30
 800109e:	2207      	movs	r2, #7
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43da      	mvns	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	400a      	ands	r2, r1
 80010ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68d9      	ldr	r1, [r3, #12]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4403      	add	r3, r0
 80010c6:	3b1e      	subs	r3, #30
 80010c8:	409a      	lsls	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	e022      	b.n	800111a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6919      	ldr	r1, [r3, #16]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	2207      	movs	r2, #7
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	400a      	ands	r2, r1
 80010f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6919      	ldr	r1, [r3, #16]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	4603      	mov	r3, r0
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4403      	add	r3, r0
 8001110:	409a      	lsls	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b06      	cmp	r3, #6
 8001120:	d824      	bhi.n	800116c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b05      	subs	r3, #5
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3b05      	subs	r3, #5
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 800116a:	e04c      	b.n	8001206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b0c      	cmp	r3, #12
 8001172:	d824      	bhi.n	80011be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b23      	subs	r3, #35	; 0x23
 8001186:	221f      	movs	r2, #31
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43da      	mvns	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	400a      	ands	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b23      	subs	r3, #35	; 0x23
 80011b0:	fa00 f203 	lsl.w	r2, r0, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
 80011bc:	e023      	b.n	8001206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b41      	subs	r3, #65	; 0x41
 80011d0:	221f      	movs	r2, #31
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	400a      	ands	r2, r1
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3b41      	subs	r3, #65	; 0x41
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <HAL_ADC_ConfigChannel+0x250>)
 8001208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <HAL_ADC_ConfigChannel+0x254>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d10f      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x1d8>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d10b      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_ADC_ConfigChannel+0x254>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12b      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x23a>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <HAL_ADC_ConfigChannel+0x258>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d003      	beq.n	8001250 <HAL_ADC_ConfigChannel+0x1f4>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b11      	cmp	r3, #17
 800124e:	d122      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_ADC_ConfigChannel+0x258>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d111      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_ADC_ConfigChannel+0x25c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_ADC_ConfigChannel+0x260>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9a      	lsrs	r2, r3, #18
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001288:	e002      	b.n	8001290 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3b01      	subs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f9      	bne.n	800128a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40012300 	.word	0x40012300
 80012b0:	40012000 	.word	0x40012000
 80012b4:	10000012 	.word	0x10000012
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c8:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <ADC_Init+0x1f0>)
 80012ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	021a      	lsls	r2, r3, #8
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800133a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <ADC_Init+0x1f4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d022      	beq.n	800139e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6899      	ldr	r1, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6899      	ldr	r1, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e00f      	b.n	80013be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0202 	bic.w	r2, r2, #2
 80013cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6899      	ldr	r1, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7e1b      	ldrb	r3, [r3, #24]
 80013d8:	005a      	lsls	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01b      	beq.n	8001424 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800140a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6859      	ldr	r1, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	3b01      	subs	r3, #1
 8001418:	035a      	lsls	r2, r3, #13
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	e007      	b.n	8001434 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	3b01      	subs	r3, #1
 8001450:	051a      	lsls	r2, r3, #20
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001476:	025a      	lsls	r2, r3, #9
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800148e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6899      	ldr	r1, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	029a      	lsls	r2, r3, #10
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	609a      	str	r2, [r3, #8]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40012300 	.word	0x40012300
 80014b4:	0f000001 	.word	0x0f000001

080014b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13c      	bne.n	800154c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d12b      	bne.n	8001544 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d127      	bne.n	8001544 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800150c:	2b00      	cmp	r3, #0
 800150e:	d119      	bne.n	8001544 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0220 	bic.w	r2, r2, #32
 800151e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff fd61 	bl	800100c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800154a:	e00e      	b.n	800156a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fd75 	bl	8001048 <HAL_ADC_ErrorCallback>
}
 800155e:	e004      	b.n	800156a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fd4d 	bl	8001020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f043 0204 	orr.w	r2, r3, #4
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fd4a 	bl	8001048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff29 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001798:	f7ff ff3e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800179c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	f7ff ff8e 	bl	80016c4 <NVIC_EncodePriority>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff31 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffa2 	bl	800172c <SysTick_Config>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff f982 	bl	8000b08 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e099      	b.n	8001944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	e00f      	b.n	8001852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001832:	f7ff f969 	bl	8000b08 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b05      	cmp	r3, #5
 800183e:	d908      	bls.n	8001852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2220      	movs	r2, #32
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2203      	movs	r2, #3
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e078      	b.n	8001944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e8      	bne.n	8001832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_DMA_Init+0x158>)
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d107      	bne.n	80018bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4313      	orrs	r3, r2
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f023 0307 	bic.w	r3, r3, #7
 80018d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d117      	bne.n	8001916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00e      	beq.n	8001916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fa6f 	bl	8001ddc <DMA_CheckFifoParam>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001912:	2301      	movs	r3, #1
 8001914:	e016      	b.n	8001944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fa26 	bl	8001d70 <DMA_CalcBaseAndBitshift>
 8001924:	4603      	mov	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	223f      	movs	r2, #63	; 0x3f
 800192e:	409a      	lsls	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	f010803f 	.word	0xf010803f

08001950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_DMA_Start_IT+0x26>
 8001972:	2302      	movs	r3, #2
 8001974:	e040      	b.n	80019f8 <HAL_DMA_Start_IT+0xa8>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12f      	bne.n	80019ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f9b8 	bl	8001d14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0216 	orr.w	r2, r2, #22
 80019be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0208 	orr.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e005      	b.n	80019f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a0c:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_DMA_IRQHandler+0x258>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a92      	ldr	r2, [pc, #584]	; (8001c5c <HAL_DMA_IRQHandler+0x25c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2208      	movs	r2, #8
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2201      	movs	r2, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2210      	movs	r2, #16
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d043      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03c      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2210      	movs	r2, #16
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d018      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
 8001b2e:	e01f      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2220      	movs	r2, #32
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 808e 	beq.w	8001c9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8086 	beq.w	8001c9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2220      	movs	r2, #32
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d136      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_IRQHandler+0x1da>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	223f      	movs	r2, #63	; 0x3f
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d07d      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
        }
        return;
 8001c16:	e078      	b.n	8001d0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01c      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d108      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d030      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e02b      	b.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d027      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	e022      	b.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0210 	bic.w	r2, r2, #16
 8001c7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d032      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d022      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d307      	bcc.n	8001ce6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f2      	bne.n	8001cca <HAL_DMA_IRQHandler+0x2ca>
 8001ce4:	e000      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ce6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e000      	b.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d0a:	bf00      	nop
    }
  }
}
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	d108      	bne.n	8001d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d52:	e007      	b.n	8001d64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3b10      	subs	r3, #16
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d909      	bls.n	8001db2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58
 8001db0:	e007      	b.n	8001dc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	aaaaaaab 	.word	0xaaaaaaab
 8001dd8:	08002dd0 	.word	0x08002dd0

08001ddc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11f      	bne.n	8001e36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d855      	bhi.n	8001ea8 <DMA_CheckFifoParam+0xcc>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <DMA_CheckFifoParam+0x28>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e27 	.word	0x08001e27
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001ea9 	.word	0x08001ea9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d045      	beq.n	8001eac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e24:	e042      	b.n	8001eac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2e:	d13f      	bne.n	8001eb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e34:	e03c      	b.n	8001eb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3e:	d121      	bne.n	8001e84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d836      	bhi.n	8001eb4 <DMA_CheckFifoParam+0xd8>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <DMA_CheckFifoParam+0x70>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e63 	.word	0x08001e63
 8001e54:	08001e5d 	.word	0x08001e5d
 8001e58:	08001e75 	.word	0x08001e75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e02f      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d024      	beq.n	8001eb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e72:	e021      	b.n	8001eb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7c:	d11e      	bne.n	8001ebc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e82:	e01b      	b.n	8001ebc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d902      	bls.n	8001e90 <DMA_CheckFifoParam+0xb4>
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d003      	beq.n	8001e96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e8e:	e018      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
      break;
 8001e94:	e015      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00e      	beq.n	8001ec0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea6:	e00b      	b.n	8001ec0 <DMA_CheckFifoParam+0xe4>
      break;
 8001ea8:	bf00      	nop
 8001eaa:	e00a      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eac:	bf00      	nop
 8001eae:	e008      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb0:	bf00      	nop
 8001eb2:	e006      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb4:	bf00      	nop
 8001eb6:	e004      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb8:	bf00      	nop
 8001eba:	e002      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ec0:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e177      	b.n	80021dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8166 	bne.w	80021d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d00b      	beq.n	8001f2a <HAL_GPIO_Init+0x5a>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1e:	2b11      	cmp	r3, #17
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d130      	bne.n	8001f8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0xfc>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80c0 	beq.w	80021d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_GPIO_Init+0x320>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a64      	ldr	r2, [pc, #400]	; (80021f0 <HAL_GPIO_Init+0x320>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <HAL_GPIO_Init+0x320>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002072:	4a60      	ldr	r2, [pc, #384]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_GPIO_Init+0x328>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d037      	beq.n	800210e <HAL_GPIO_Init+0x23e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_GPIO_Init+0x32c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <HAL_GPIO_Init+0x23a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a55      	ldr	r2, [pc, #340]	; (8002200 <HAL_GPIO_Init+0x330>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <HAL_GPIO_Init+0x236>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a54      	ldr	r2, [pc, #336]	; (8002204 <HAL_GPIO_Init+0x334>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x232>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a53      	ldr	r2, [pc, #332]	; (8002208 <HAL_GPIO_Init+0x338>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x22e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_GPIO_Init+0x33c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x22a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_GPIO_Init+0x340>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x226>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_GPIO_Init+0x344>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x222>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4f      	ldr	r2, [pc, #316]	; (8002218 <HAL_GPIO_Init+0x348>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x21e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_GPIO_Init+0x34c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x21a>
 80020e6:	2309      	movs	r3, #9
 80020e8:	e012      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020ea:	230a      	movs	r3, #10
 80020ec:	e010      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e00e      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x240>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x240>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x240>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x240>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4934      	ldr	r1, [pc, #208]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002152:	4a33      	ldr	r2, [pc, #204]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002158:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_GPIO_Init+0x350>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217c:	4a28      	ldr	r2, [pc, #160]	; (8002220 <HAL_GPIO_Init+0x350>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <HAL_GPIO_Init+0x350>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_GPIO_Init+0x350>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a13      	ldr	r2, [pc, #76]	; (8002220 <HAL_GPIO_Init+0x350>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae84 	bls.w	8001eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	3724      	adds	r7, #36	; 0x24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021c00 	.word	0x40021c00
 8002218:	40022000 	.word	0x40022000
 800221c:	40022400 	.word	0x40022400
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e25b      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002242:	4ba3      	ldr	r3, [pc, #652]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4ba0      	ldr	r3, [pc, #640]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b9d      	ldr	r3, [pc, #628]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b99      	ldr	r3, [pc, #612]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e236      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a90      	ldr	r2, [pc, #576]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b8b      	ldr	r3, [pc, #556]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a8a      	ldr	r2, [pc, #552]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a87      	ldr	r2, [pc, #540]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a83      	ldr	r2, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a80      	ldr	r2, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fc14 	bl	8000b08 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe fc10 	bl	8000b08 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1fb      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fc00 	bl	8000b08 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fbfc 	bl	8000b08 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1e7      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1bb      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4952      	ldr	r1, [pc, #328]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <HAL_RCC_OscConfig+0x2b0>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fbb5 	bl	8000b08 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe fbb1 	bl	8000b08 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e19c      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4940      	ldr	r1, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_OscConfig+0x2b0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fb94 	bl	8000b08 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe fb90 	bl	8000b08 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e17b      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d030      	beq.n	8002470 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_RCC_OscConfig+0x2b4>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fb74 	bl	8000b08 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fb70 	bl	8000b08 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e15b      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x2b4>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe fb5d 	bl	8000b08 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe fb59 	bl	8000b08 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e144      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a0 	beq.w	80025be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7fe fb1f 	bl	8000b08 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e011      	b.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
 80024dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fb12 	bl	8000b08 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0fd      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x4d4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x2f0>
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a7c      	ldr	r2, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x312>
 800251c:	4b77      	ldr	r3, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a76      	ldr	r2, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	4b74      	ldr	r3, [pc, #464]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a73      	ldr	r2, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x32a>
 8002536:	4b71      	ldr	r3, [pc, #452]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a70      	ldr	r2, [pc, #448]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a6d      	ldr	r2, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe fad7 	bl	8000b08 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe fad3 	bl	8000b08 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0bc      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x33a>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fac1 	bl	8000b08 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fabd 	bl	8000b08 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0a6      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8092 	beq.w	80026ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c8:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d05c      	beq.n	800268e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d141      	bne.n	8002660 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b48      	ldr	r3, [pc, #288]	; (8002700 <HAL_RCC_OscConfig+0x4dc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fa91 	bl	8000b08 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fa8d 	bl	8000b08 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e078      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	4933      	ldr	r1, [pc, #204]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002632:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x4dc>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fa66 	bl	8000b08 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fa62 	bl	8000b08 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e04d      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x41c>
 800265e:	e045      	b.n	80026ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x4dc>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fa4f 	bl	8000b08 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fa4b 	bl	8000b08 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e036      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x44a>
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e029      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_RCC_OscConfig+0x4d8>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d115      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c2:	4013      	ands	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470060 	.word	0x42470060

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0cc      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b68      	ldr	r3, [pc, #416]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d90c      	bls.n	8002740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800277a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d044      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d119      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e067      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4934      	ldr	r1, [pc, #208]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe f988 	bl	8000b08 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe f984 	bl	8000b08 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e04f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d20c      	bcs.n	800284c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4601      	mov	r1, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	fa21 f303 	lsr.w	r3, r1, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f8e8 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08002dc0 	.word	0x08002dc0
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x158>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d007      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x32>
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x38>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 808d 	bne.w	8002a16 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x15c>)
 80028fe:	60bb      	str	r3, [r7, #8]
       break;
 8002900:	e08c      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002902:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002904:	60bb      	str	r3, [r7, #8]
      break;
 8002906:	e089      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x158>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002910:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002912:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d023      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	f04f 0400 	mov.w	r4, #0
 8002928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	ea03 0501 	and.w	r5, r3, r1
 8002934:	ea04 0602 	and.w	r6, r4, r2
 8002938:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x160>)
 800293a:	fb02 f106 	mul.w	r1, r2, r6
 800293e:	2200      	movs	r2, #0
 8002940:	fb02 f205 	mul.w	r2, r2, r5
 8002944:	440a      	add	r2, r1
 8002946:	493a      	ldr	r1, [pc, #232]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002948:	fba5 0101 	umull	r0, r1, r5, r1
 800294c:	1853      	adds	r3, r2, r1
 800294e:	4619      	mov	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	461a      	mov	r2, r3
 8002958:	4623      	mov	r3, r4
 800295a:	f7fd fc47 	bl	80001ec <__aeabi_uldivmod>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e049      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	ea03 0501 	and.w	r5, r3, r1
 800297c:	ea04 0602 	and.w	r6, r4, r2
 8002980:	4629      	mov	r1, r5
 8002982:	4632      	mov	r2, r6
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	0154      	lsls	r4, r2, #5
 800298e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002992:	014b      	lsls	r3, r1, #5
 8002994:	4619      	mov	r1, r3
 8002996:	4622      	mov	r2, r4
 8002998:	1b49      	subs	r1, r1, r5
 800299a:	eb62 0206 	sbc.w	r2, r2, r6
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	0194      	lsls	r4, r2, #6
 80029a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ac:	018b      	lsls	r3, r1, #6
 80029ae:	1a5b      	subs	r3, r3, r1
 80029b0:	eb64 0402 	sbc.w	r4, r4, r2
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	00e2      	lsls	r2, r4, #3
 80029be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029c2:	00d9      	lsls	r1, r3, #3
 80029c4:	460b      	mov	r3, r1
 80029c6:	4614      	mov	r4, r2
 80029c8:	195b      	adds	r3, r3, r5
 80029ca:	eb44 0406 	adc.w	r4, r4, r6
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	02a2      	lsls	r2, r4, #10
 80029d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029dc:	0299      	lsls	r1, r3, #10
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	4621      	mov	r1, r4
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	461a      	mov	r2, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	f7fd fbfc 	bl	80001ec <__aeabi_uldivmod>
 80029f4:	4603      	mov	r3, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x158>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	3301      	adds	r3, #1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	60bb      	str	r3, [r7, #8]
      break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	017d7840 	.word	0x017d7840

08002a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e01d      	b.n	8002a82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd ff4a 	bl	80008f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 f850 	bl	8002b18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e02d      	b.n	8002afa <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f825 	bl	8002b02 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f000 f824 	bl	8002b18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0208 	bic.w	r2, r2, #8
 8002ade:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <TIM_Base_SetConfig+0x114>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <TIM_Base_SetConfig+0x40>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b36:	d00f      	beq.n	8002b58 <TIM_Base_SetConfig+0x40>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a3d      	ldr	r2, [pc, #244]	; (8002c30 <TIM_Base_SetConfig+0x118>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_Base_SetConfig+0x40>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a3c      	ldr	r2, [pc, #240]	; (8002c34 <TIM_Base_SetConfig+0x11c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0x40>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3b      	ldr	r2, [pc, #236]	; (8002c38 <TIM_Base_SetConfig+0x120>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0x40>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3a      	ldr	r2, [pc, #232]	; (8002c3c <TIM_Base_SetConfig+0x124>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d108      	bne.n	8002b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a2f      	ldr	r2, [pc, #188]	; (8002c2c <TIM_Base_SetConfig+0x114>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02b      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d027      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <TIM_Base_SetConfig+0x118>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d023      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <TIM_Base_SetConfig+0x11c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01f      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <TIM_Base_SetConfig+0x120>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01b      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <TIM_Base_SetConfig+0x124>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d017      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <TIM_Base_SetConfig+0x128>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <TIM_Base_SetConfig+0x12c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00f      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <TIM_Base_SetConfig+0x130>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00b      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <TIM_Base_SetConfig+0x134>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <TIM_Base_SetConfig+0x138>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d003      	beq.n	8002bca <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <TIM_Base_SetConfig+0x13c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d108      	bne.n	8002bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <TIM_Base_SetConfig+0x114>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0xf8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <TIM_Base_SetConfig+0x124>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40010400 	.word	0x40010400
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40014400 	.word	0x40014400
 8002c48:	40014800 	.word	0x40014800
 8002c4c:	40001800 	.word	0x40001800
 8002c50:	40001c00 	.word	0x40001c00
 8002c54:	40002000 	.word	0x40002000

08002c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e05a      	b.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d022      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d01d      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d018      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d009      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10c      	bne.n	8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40001800 	.word	0x40001800

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	4e0d      	ldr	r6, [pc, #52]	; (8002d88 <__libc_init_array+0x38>)
 8002d54:	4c0d      	ldr	r4, [pc, #52]	; (8002d8c <__libc_init_array+0x3c>)
 8002d56:	1ba4      	subs	r4, r4, r6
 8002d58:	10a4      	asrs	r4, r4, #2
 8002d5a:	2500      	movs	r5, #0
 8002d5c:	42a5      	cmp	r5, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	4e0b      	ldr	r6, [pc, #44]	; (8002d90 <__libc_init_array+0x40>)
 8002d62:	4c0c      	ldr	r4, [pc, #48]	; (8002d94 <__libc_init_array+0x44>)
 8002d64:	f000 f820 	bl	8002da8 <_init>
 8002d68:	1ba4      	subs	r4, r4, r6
 8002d6a:	10a4      	asrs	r4, r4, #2
 8002d6c:	2500      	movs	r5, #0
 8002d6e:	42a5      	cmp	r5, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d78:	4798      	blx	r3
 8002d7a:	3501      	adds	r5, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d82:	4798      	blx	r3
 8002d84:	3501      	adds	r5, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	08002de0 	.word	0x08002de0
 8002d8c:	08002de0 	.word	0x08002de0
 8002d90:	08002de0 	.word	0x08002de0
 8002d94:	08002de4 	.word	0x08002de4

08002d98 <memset>:
 8002d98:	4402      	add	r2, r0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	f803 1b01 	strb.w	r1, [r3], #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <_init>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr

08002db4 <_fini>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr
